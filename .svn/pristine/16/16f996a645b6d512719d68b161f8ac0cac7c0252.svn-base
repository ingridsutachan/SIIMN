////*********************************************************
//
//    <copyright file="frmtributario.cs" company="Marketing Software de Colombia LTDA">
//    @Autor Ingrid Sutachan
//    @fecha 01 marzo 2014
//    </copyright>
//
////*********************************************************
namespace App.Forms.Contable
{
    using System;
    using System.Collections.Generic;
    using System.Windows.Forms;
    using Entities.Types;
    using Negocios.Contable;

    /// <summary>
    /// Formulario codigo tributario
    /// </summary>
    public partial class FrmTributario : Form
    {
        /// <summary>
        /// persistencia para el negocio de codigo tributario
        /// </summary>
        private tributariosn negociotributario;

        /// <summary>
        /// variable para manejar cierre de formulario
        /// </summary>
        private bool usrClose;

        /// <summary>
        /// Almacena boton da el usuario click
        /// </summary>
        private string botonclick;

        private Funciones funtions;

        /// <summary>
        /// Initializes a new instance of the <see cref="FrmTributario"/> class.
        /// </summary>
        public FrmTributario()
        {
            this.InitializeComponent();

            this.negociotributario = new tributariosn();

            this.funtions = new Funciones();

            this.CargarDatos();
        }

        #region VISUALIZACION

        /// <summary>
        /// Cargars the datos.
        /// </summary>
        private void CargarDatos()
        {
            try
            {
                List<TributarioDataSource> trib = new List<TributarioDataSource>();
                trib = this.negociotributario.CargarDatos();
                dgv_tributario.DataSource = trib;
                this.NombresTablas();
            }
            catch (Exception ex)
            {
                MessageBox.Show("Se presento un error. " + ex.Message);
            }
        }

        /// <summary>
        /// Nombreses the tablas.
        /// </summary>
        private void NombresTablas()
        {
            dgv_tributario.Columns[0].HeaderText = "Código";
            dgv_tributario.Columns[1].HeaderText = "Nombre";
            dgv_tributario.Columns[2].HeaderText = "Tope";
            dgv_tributario.Columns[3].HeaderText = "NIT Tope";
            dgv_tributario.Columns[4].HeaderText = "Nombre NIT";
            dgv_tributario.Columns[5].Visible = false;
            dgv_tributario.Columns[1].Width = 200;
            dgv_tributario.Columns[4].Width = 200;
        }


        /// <summary>
        /// Camposes the activos.
        /// </summary>
        private void CamposActivos()
        {
            txt_codigo.Enabled = true;
            txt_nombre.Enabled = true;
            txt_tope.Enabled = true;
            txt_nittope.Enabled = true;
            txt_nombrenito.Enabled = true;
        }

        /// <summary>
        /// Camposes the inactivos.
        /// </summary>
        private void CamposInactivos()
        {
            txt_codigo.Enabled = false;
            txt_nombre.Enabled = false;
            txt_tope.Enabled = false;
            txt_nittope.Enabled = false;
            txt_nombrenito.Enabled = false;
        }

        /// <summary>
        /// Camposes the vacios.
        /// </summary>
        private void CamposVacios()
        {
            txt_codigo.Text = string.Empty;
            txt_nombre.Text = string.Empty;
            txt_tope.Text = string.Empty;
            txt_nittope.Text = string.Empty;
            txt_nombrenito.Text = string.Empty;
        }

        #endregion

        #region GUARDAR DATOS

        /// <summary>
        /// Guardars the campos.
        /// </summary>
        /// <returns>tipo de tabla codigo tributario campos guardados</returns>
        private TributarioDataSource GuardarCampos()
        {
            TributarioDataSource trib = new TributarioDataSource();
            trib.Codigo = txt_codigo.Text;
            trib.NombreTrib = txt_nombre.Text;
            trib.Tope = int.Parse(txt_tope.Text);
            trib.NombreNitTipe = txt_nombrenito.Text;
            trib.IdNitTope = int.Parse(txt_nittope.Text);
            trib.IdCompania = Program.compa;
            return trib;
        }

        /// <summary>
        /// Validars the guardar.
        /// </summary>
        /// <returns>booleano si guarda o no</returns>
        private bool ValidarGuardar()
        {
            bool result = false;
            if (!txt_codigo.Text.Equals(string.Empty) && !txt_nombre.Text.Equals(string.Empty))
            {
                result = true;
            }
            else
            {
                result = false;
                MessageBox.Show("Debe ingresar todos los campos obligatorios", "ERROR", MessageBoxButtons.OK);
            }

            return result;
        }

        /// <summary>
        /// Handles the Click event of the Btn_guardar control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="EventArgs"/> instance containing the event data.</param>
        private void Btn_guardar_Click(object sender, EventArgs e)
        {
            bool guardar = this.ValidarGuardar();
            if (guardar)
            {
                TributarioDataSource tribut = new TributarioDataSource();
                tribut = this.GuardarCampos();

                if (this.botonclick.Equals("agregar"))
                {
                    try
                    {
                        bool guardarg = this.negociotributario.GuardarTribut(tribut);
                        if (guardarg)
                        {
                            MessageBox.Show("El Código Tributario ha sido Guardado", "GUARDAR", MessageBoxButtons.OK);
                        }
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show("Se presento un error. " + ex.Message);
                    }
                }
                if (this.botonclick.Equals("editar"))
                {
                    try
                    {
                        bool guardara = this.negociotributario.ActualizarTribut(tribut);
                        if (guardara)
                        {
                            MessageBox.Show("El comprobante ha sido Actualizado", "ACTUALIZAR", MessageBoxButtons.OK);
                        }
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show("Se presento un error. " + ex.Message);
                    }
                }

                this.CargarDatos();
                this.CamposVacios();
                this.CamposInactivos();
            }
        }
        #endregion

        #region BOTONES CLICK

        /// <summary>
        /// Handles the Click event of the Btn_nuevo control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="EventArgs"/> instance containing the event data.</param>
        private void Btn_nuevo_Click(object sender, EventArgs e)
        {
            this.CamposActivos();
            this.botonclick = "agregar";
            btn_guardar.Enabled = true;
            btn_guardar.Visible = true;
        }


        /// <summary>
        /// Handles the Click event of the Btn_editar control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="EventArgs"/> instance containing the event data.</param>
        private void Btn_editar_Click(object sender, EventArgs e)
        {
            string codtribu = dgv_tributario.CurrentRow.Cells[0].Value.ToString();
            this.CamposActivos();
            this.botonclick = "editar";
            btn_guardar.Enabled = true;
            TributarioDataSource tributario = new TributarioDataSource();
            try
            {
                tributario = this.negociotributario.DevolverDatos(codtribu);
                txt_codigo.Text = tributario.Codigo;
                txt_nombre.Text = tributario.NombreTrib;
                if (!tributario.Equals(string.Empty))
                {
                    txt_tope.Text = Convert.ToString(tributario.Tope);
                }
                else
                {
                    txt_tope.Text = "0";
                }

                txt_nittope.Text = Convert.ToString(tributario.IdNitTope);
                txt_nombrenito.Text = tributario.NombreNitTipe;
            }
            catch (Exception ex)
            {
                MessageBox.Show("Se presento un error. " + ex.Message);
            }
        }

        /// <summary>
        /// Handles the Click event of the Btn_eliminar control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="EventArgs"/> instance containing the event data.</param>
        private void Btn_eliminar_Click(object sender, EventArgs e)
        {
            string codigo = dgv_tributario.CurrentRow.Cells[0].Value.ToString();
            DialogResult result = MessageBox.Show("Esta seguro que desea eliminar?", "ELIMINAR", MessageBoxButtons.YesNo);
            if (result == DialogResult.Yes)
            {
                try
                {
                    if (this.negociotributario.EliminarTribut(codigo))
                    {
                        MessageBox.Show("eliminado");
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show("Se presento un error. " + ex.Message);
                }

                this.CargarDatos();
            }
        }

        /// <summary>
        /// Handles the Click event of the Btn_buscar control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="EventArgs"/> instance containing the event data.</param>
        private void Btn_buscar_Click(object sender, EventArgs e)
        {
            List<TributarioDataSource> tribut = new List<TributarioDataSource>();
            try
            {
                tribut = this.negociotributario.BuscarTribut(txt_buscar.Text);
                if (tribut.Count > 0)
                {
                    dgv_tributario.DataSource = tribut;
                    this.NombresTablas();
                }
                else
                {
                    MessageBox.Show("No se encuentra ", "Busqueda", MessageBoxButtons.OK);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Se presento un error. " + ex.Message);
            }
        }

        #endregion

        #region EVENTOS TEXTBOX Y DGV

        /// <summary>
        /// Handles the CellClick event of the Dgv_tributario control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="DataGridViewCellEventArgs"/> instance containing the event data.</param>
        private void Dgv_tributario_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            if (dgv_tributario.SelectedCells.Count > 0)
            {
                btn_eliminar.Enabled = true;
                btn_editar.Enabled = true;
            }
        }

        /// <summary>
        /// Handles the KeyPress event of the Txt_buscar control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="KeyPressEventArgs"/> instance containing the event data.</param>
        private void Txt_buscar_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Enter)
            {
                e.Handled = true;
                EventArgs eve = new EventArgs();
                this.Btn_buscar_Click(sender, eve);
                if (txt_buscar.Text.Equals(string.Empty))
                {
                    this.CargarDatos();
                }
            }
        }

        #endregion

        #region SALIR FORMULARIO


        /// <summary>
        /// Handles the Click event of the Salircuent control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="EventArgs"/> instance containing the event data.</param>
        private void Salircuent_Click(object sender, EventArgs e)
        {
            DialogResult result = MessageBox.Show("Esta seguro que desea salir?", "SALIR", MessageBoxButtons.YesNo);
            if (result == DialogResult.Yes)
            {
                this.usrClose = true;
                this.Close();
            }
        }

        /// <summary>
        /// Handles the FormClosing event of the FrmTributario control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="FormClosingEventArgs"/> instance containing the event data.</param>
        private void FrmTributario_FormClosing(object sender, FormClosingEventArgs e)
        {
            if (!this.usrClose)
            {
                DialogResult result = MessageBox.Show("Esta seguro que desea salir?", "SALIR", MessageBoxButtons.YesNo);
                if (result == DialogResult.No)
                {
                    e.Cancel = true;
                }
            }
        }

        #endregion 

        #region VALIDACIONES TXT


        private void EnterValida_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Enter)
            {
                e.Handled = true;
                SendKeys.Send("{TAB}");
            }
            else
            {
                e.Handled = this.funtions.ValidacionNumerico(e).Handled;
            }
        }

        private void EnterTab_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Enter)
            {
                e.Handled = true;
                SendKeys.Send("{TAB}");
            }
        }

        #endregion

        
    }
}
