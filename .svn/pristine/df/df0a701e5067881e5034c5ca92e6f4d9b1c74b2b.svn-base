////*********************************************************
//
//    <copyright file="centroc.cs" company="Marketing Software de Colombia LTDA">
//    @Autor Ingrid Sutachan
//    @fecha 01 marzo 2014
//    </copyright>
//
////*********************************************************
namespace Datos.Contable
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Entities;

    /// <summary>
    /// Clase centro capa de datos
    /// </summary>
    public class Centroc
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Centroc"/> class.
        /// </summary>
        public Centroc()
        {
        }

        /// <summary>
        /// Cargar centro
        /// </summary>
        /// <returns>Lista de registros que se encuentran en la tabla de la db</returns>
        public List<centrocostos> CargarCentro()
        {
            List<centrocostos> cent = new List<centrocostos>();
            using (siimnEntities bd = new siimnEntities())
            {
                try
                {
                    cent = bd.centrocostos.ToList();
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }

            return cent;
        }

        /// <summary>
        /// Guardar centro
        /// </summary>
        /// <param name="cent">centro de costos a guardar</param>
        public bool GuardarCentro(centrocostos cent)
        {
            bool result = false;
            using (siimnEntities bd = new siimnEntities())
            {
                try
                {
                    bd.centrocostos.Add(cent);
                    bd.SaveChanges();
                    result = true;
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }

            return result;
        }

        /// <summary>
        /// Devolver datos
        /// </summary>
        /// <param name="idcentro">identificador de centro </param>
        /// <returns>centro respectivo al identificador</returns>
        public centrocostos DevolverDatos(int idcentro)
        {
            centrocostos cent = new centrocostos();
            using (siimnEntities bd = new siimnEntities())
            {
                try
                {
                    var query = bd.centrocostos.Where(cen => cen.idcentro == idcentro).First();
                    cent = query;
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }

            return cent;
        }

        /// <summary>
        /// Actualizar centro
        /// </summary>
        /// <param name="cent">centro de costos a actualizar</param>
        public bool ActualizarCentro(centrocostos cent)
        {
            bool result = false;
            using (siimnEntities bd = new siimnEntities())
            {
                try
                {
                    var query = bd.centrocostos.Where(cen => cen.idcentro == cent.idcentro).First();
                    query.nombre = cent.nombre;
                    bd.SaveChanges();
                    result = true;
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }

            return result;
        }

        /// <summary>
        /// Eliminar centro
        /// </summary>
        /// <param name="idcentro">identificador de centro a eliminar</param>
        /// <returns>booleano que rectifica si se elimina el centro</returns>
        public bool EliminarCentro(int idcentro)
        {
            bool result = false;
            using (siimnEntities bd = new siimnEntities())
            {
                try
                {
                    var query = bd.centrocostos.Where(cen => cen.idcentro == idcentro).First();
                    bd.centrocostos.Remove(query);
                    bd.SaveChanges();
                    result = true;
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }

            return result;
        }

        /// <summary>
        /// Buscar centro.
        /// </summary>
        /// <param name="buscar">texto a buscar</param>
        /// <returns>lista de registros que contienen el texto buscado</returns>
        public List<centrocostos> BuscarCentro(string buscar)
        {
            List<centrocostos> centr = new List<centrocostos>();
            using (siimnEntities bd = new siimnEntities())
            {
                try
                {
                    var query = bd.centrocostos.Where(tip => tip.nombre.Contains(buscar)).ToList();
                    centr = query;
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }

            return centr;
        }

        public centrocostos DevolverAmbos(string buscar, string tipo)
        {
            centrocostos cent = new centrocostos();
            using (siimnEntities bd = new siimnEntities())
            {
                try
                {
                    if (tipo.Equals("idcent"))
                    {
                        int id = int.Parse(buscar);
                        var query = bd.centrocostos.Where(cen => cen.idcentro == id).First();
                        cent = query;
                    }
                    else
                    {
                        var query = bd.centrocostos.Where(cen => cen.nombre == buscar).First();
                        cent = query;
                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }

            return cent;
        }

        public bool ExisteCentro(int campo)
        {
            bool result = false;
            using (siimnEntities bd = new siimnEntities())
            {
                try
                {
                    var query = bd.centrocostos.Where(cen => cen.idcentro == campo).Count();
                    result = query > 0 ? true : false;
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }

            return result;
        }

        public string DevolverNombre(int codcentro)
        {
            string nombre;
            using (siimnEntities bd = new siimnEntities())
            {
                try
                {
                    var query = bd.centrocostos.Where(cen => cen.idcentro == codcentro).First();
                    nombre = query.nombre;
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }

            return nombre;
        }
    }
}
