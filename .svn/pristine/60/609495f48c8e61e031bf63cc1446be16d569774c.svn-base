namespace App.Forms.Contable.Reportes
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Data;
    using System.Drawing;
    using System.Linq;
    using System.Text;
    using System.Windows.Forms;
    using App.Forms.Contable.Reportes;
    using App.Forms.Contable.Reportes.Types;
    using Entities.Types;
    using Negocios.Contable;
    using Negocios.General;

    public partial class Form_ReporteBalance : Form
    {
        private Form_Balance form_Balance;

        private string tipo;

        private List<SaldosCuentasDataSource> balance;

        private string fecha;

        private bool terceros;

        private bool encabezado;

        private Empresan negocioEmpresa;

        private Cuentan negocioCuenta;

        private asientosn negocioAsiento;

        public Form_ReporteBalance()
        {
            this.InitializeComponent();
        }

        public Form_ReporteBalance(Form_Balance form_Balance, string tipo, List<SaldosCuentasDataSource> balance, List<CuentaDataSource> cuentas, string fecha, bool encabeza, bool terceros)
        {
            // TODO: Complete member initialization
            this.negocioCuenta = new Cuentan();
            this.negocioEmpresa = new Empresan();
            this.negocioAsiento = new asientosn();
            this.InitializeComponent();
            this.form_Balance = form_Balance;
            this.tipo = tipo;
            this.balance = balance;
            this.fecha = fecha;
            this.encabezado = encabeza;
            this.terceros = terceros;
            this.GenerarReporte(tipo);
        }

        #region EVENTOS FORMULARIO

        protected override bool ProcessCmdKey(ref Message msg, Keys keyData)
        {
            if (keyData == Keys.Escape)
            {
                this.Close();
                return true;
            }

            return base.ProcessCmdKey(ref msg, keyData);
        }

        private void Form_ReporteAsiento_FormClosing(object sender, FormClosingEventArgs e)
        {
            if ("mes".Equals(this.tipo))
            {
                this.form_Balance.SalirReporte(1);
            }
        }

        #endregion

        private void GenerarReporte(string cualasi)
        {
            EmpresaDataSource empresa = new EmpresaDataSource();
            List<CuentaDataSource> cuenta = new List<CuentaDataSource>();
            List<SaldosCuentasDataSource> saldos = new List<SaldosCuentasDataSource>();
            saldos = this.balance;
            try
            {
                empresa = this.negocioEmpresa.DevolverDatosEmpresa(Program.compa);
            }
            catch (Exception ex)
            {
                MessageBox.Show("SE PRESENTO UN ERROR" + ex.Message, "ERROR", MessageBoxButtons.OK);
            }

            switch (cualasi)
            {
                case "mes":

                    this.Text = "BALANCE DE PRUEBA POR MES";

                    List<BalanceDataSourceReports> balanceRe = new List<BalanceDataSourceReports>();
                    for (int i = 0; i < saldos.Count(); i++)
                    {
                        BalanceDataSourceReports balanceR = new BalanceDataSourceReports();
                                               if (this.encabezado)
                        {
                            balanceR.MesyAnio = "MES : " + saldos[i].Mes + "   AÑO : " + saldos[i].Anio;
                            balanceR.CompaniayNit = empresa.Nombrecia + " - " + empresa.NombreSucursal + " - " + empresa.NitCia + " - " + empresa.DigitoCia;
                            balanceR.FechaAct = "FECHA DE IMPRESION DD/MM/YYYY: " + DateTime.Now.ToShortDateString();
                            balanceR.Titulo = "BALANCE DE PRUEBA A ";
                        }
                        else
                        {
                            balanceR.Titulo = null;
                        }

                        if (this.terceros)
                        {
                            List<SaldosNitsDataSource> nitssaldos = new List<SaldosNitsDataSource>();
                            balanceR.Cuenta = saldos[i].Cuenta;
                            try
                            {
                                nitssaldos = this.negocioAsiento.SaldosNits(saldos[i].Cuenta, saldos[i].Anio, saldos[i].Mes, saldos[i].Sucursal);
                                if (nitssaldos != null)
                                {
                                    foreach (SaldosNitsDataSource nit in nitssaldos)
                                    {
                                        balanceR.TituloNit = "TERCEROS DE ESTA CUENTA:";
                                        balanceR.Nit = nit.Nit + "-" + nit.Nombrenit;
                                        balanceR.SaldoAnteriorNit = nit.SaldoAnterioMes;
                                        balanceR.SaldoActualNit = nit.SaldoNit;
                                        balanceR.ValorCreditoNit = nit.CreditoNit;
                                        balanceR.ValorDebitoNit = nit.DebitoNit;
                                        balanceR.CuentaMayor = saldos[i].Cuenta.Substring(0, 4);
                                        balanceR.Cuenta = saldos[i].Cuenta + " " + saldos[i].NombreCuenta;
                                        balanceR.NombreCuentaMayor = this.negocioCuenta.DevolverNombre(balanceR.CuentaMayor);
                                        balanceR.SaldoAnterior = saldos[i].SaldoAnterior;
                                        balanceR.Valorcredito = saldos[i].ValorCredito;
                                        balanceR.Valordebito = saldos[i].ValorDebito;
                                        balanceR.SaldoActual = saldos[i].SaldoActual;
                                        balanceRe.Add(balanceR);

                                    }
                                }
                                else
                                {
                                    balanceR.CuentaMayor = saldos[i].Cuenta.Substring(0, 4);
                                    balanceR.Cuenta = saldos[i].Cuenta + " " + saldos[i].NombreCuenta;
                                    balanceR.NombreCuentaMayor = this.negocioCuenta.DevolverNombre(balanceR.CuentaMayor);
                                    balanceR.SaldoAnterior = saldos[i].SaldoAnterior;
                                    balanceR.Valorcredito = saldos[i].ValorCredito;
                                    balanceR.Valordebito = saldos[i].ValorDebito;
                                    balanceR.SaldoActual = saldos[i].SaldoActual;
                                    balanceRe.Add(balanceR);
                                }
                            }
                            catch (Exception ex)
                            {
                                throw ex;
                            }
                        }
                        else
                        {
                            balanceR.CuentaMayor = saldos[i].Cuenta.Substring(0, 4);
                            balanceR.Cuenta = saldos[i].Cuenta + " " + saldos[i].NombreCuenta;
                            balanceR.NombreCuentaMayor = this.negocioCuenta.DevolverNombre(balanceR.CuentaMayor);
                            balanceR.SaldoAnterior = saldos[i].SaldoAnterior;
                            balanceR.Valorcredito = saldos[i].ValorCredito;
                            balanceR.Valordebito = saldos[i].ValorDebito;
                            balanceR.SaldoActual = saldos[i].SaldoActual;
                            balanceRe.Add(balanceR);
                        }
                    }

                    ReporteBalance reportebalance = new ReporteBalance();
                    reportebalance.SetDataSource(balanceRe);
                    crystal_reportebalance.ReportSource = reportebalance;
                    this.Size = new Size(1003, 583);
                    crystal_reportebalance.Size = new Size(987, 519);
                    break;
            }
        }
    }
}
