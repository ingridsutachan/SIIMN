////*********************************************************
//
//    <copyright file="nitsc.cs" company="Marketing Software de Colombia LTDA">
//    @Autor Ingrid Sutachan
//    @fecha 01 marzo 2014
//    </copyright>
//
////*********************************************************
namespace Datos.Contable
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Entities;

    /// <summary>
    /// Clase de nits en capa de datos
    /// </summary>
    public class Nitsc
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Nitsc"/> class.
        /// </summary>
        public Nitsc()
        {
        }

        /// <summary>
        /// Cargar nits
        /// </summary>
        /// <returns>lista de nits que se encuentra en la bd</returns>
        public List<maenits> CargarNits()
        {
            using (contableEntities bd = new contableEntities())
            {
                List<maenits> nits = new List<maenits>();
                try
                {
                    nits = bd.maenits.Include("tiponit").Include("pais")
                                                    .Include("departamento").Include("ciudad").ToList();
                }
                catch (Exception ex)
                {
                    throw ex;
                }

                return nits;
            }
        }

        /// <summary>
        /// Guardar nits
        /// </summary>
        /// <param name="nits">nit a guardar</param>
        public bool GuardarNits(maenits nits)
        {
            bool result = false;
            using (contableEntities bd = new contableEntities())
            {
                try
                {
                    maenits nit = new maenits();
                    nit.nit = nits.nit;
                    nit.digito = nits.digito;
                    nit.idtiponit = nits.idtiponit;
                    nit.nomnit = nits.nomnit;
                    nit.acteconomica = nits.acteconomica;
                    nit.idcompania = nits.idcompania;
                    nit.idpais = nits.idpais;
                    nit.iddept = nits.iddept;
                    nit.idciudad = nits.idciudad;
                    nit.direccion = nits.direccion;
                    nit.telefono = nits.telefono;
                    nit.celular = nits.celular;
                    nit.email = nits.email;
                    bd.maenits.Add(nit);
                    bd.SaveChanges();
                    result = true;
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }

            return result;
        }

        /// <summary>
        /// Devolver nit
        /// </summary>
        /// <param name="idnit">identificador del nit</param>
        /// <returns>nit respectivo al identificador</returns>
        public maenits DevolverNit(int idnit)
        {
            maenits nits = new maenits();
            using (contableEntities bd = new contableEntities())
            {
                try
                {
                    var query = bd.maenits.Include("tiponit").Include("pais")
                                                    .Include("departamento").Include("ciudad").Where(mae => mae
                        .idnit == idnit).First();
                    nits = query;
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }

            return nits;
        }

        /// <summary>
        /// Actualizar nit
        /// </summary>
        /// <param name="nit">nit a actualizar</param>
        public bool ActualizarNit(maenits nit)
        {
            bool result = false;
            using (contableEntities bd = new contableEntities())
            {
                try
                {
                    var query = bd.maenits.Where(mae => mae.idnit == nit.idnit).First();
                    query.nit = nit.nit;
                    query.digito = nit.digito;
                    query.idnit = nit.idnit;
                    query.nomnit = nit.nomnit;
                    query.acteconomica = nit.acteconomica;
                    query.idpais = nit.idpais;
                    query.iddept = nit.iddept;
                    query.idciudad = nit.idciudad;
                    query.direccion = nit.direccion;
                    query.telefono = nit.telefono;
                    query.celular = nit.celular;
                    query.email = nit.email;
                    bd.SaveChanges();
                    result = true;
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }

            return result;
        }

        /// <summary>
        /// Existe nit
        /// </summary>
        /// <param name="nits">nit a actualizar</param>
        /// <returns>booleano que rectifia si existe el nit</returns>
        public bool ExisteNit(maenits nits)
        {
            bool result = false;
            using (contableEntities bd = new contableEntities())
            {
                try
                {
                    var query = bd.maenits.Where(nit => nit.nit == nits.nit && nit.digito == nits.digito).Count();
                    if (query > 0)
                    {
                        result = true;
                    }
                    else
                    {
                        result = false;
                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }

            return result;
        }

        /// <summary>
        /// Eliminar nit
        /// </summary>
        /// <param name="idnit">el identificador del nit</param>
        /// <returns>booleano que rectifica si se elimina el registro</returns>
        public bool EliminarNit(int idnit)
        {
            bool result = false;
            using (contableEntities bd = new contableEntities())
            {
                try
                {
                    var query = bd.maenits.Where(mae => mae.idnit == idnit).First();
                    bd.maenits.Remove(query);
                    bd.SaveChanges();
                    result = true;
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }

            return result;
        }

        /// <summary>
        /// Buscar nit
        /// </summary>
        /// <param name="buscar">texto a buscar dentro de la tabla nit</param>
        /// <returns>registros que contienen el texto a buscar</returns>
        public List<maenits> BuscarNit(string buscar)
        {
            List<maenits> nits = new List<maenits>();
            using (contableEntities bd = new contableEntities())
            {
                try
                {
                    var query = bd.maenits.Include("tiponit")
                                           .Include("pais")
                                           .Include("departamento")
                                           .Include("ciudad")
                                           .Where(mae => mae.nit.Contains(buscar)
                                                              || mae.nomnit.Contains(buscar));
                    if (query.Count() > 0)
                    {
                        nits = query.ToList();
                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }

            return nits;
        }

        /// <summary>
        /// Devolver nit
        /// </summary>
        /// <param name="idnit">identificador del nit</param>
        /// <returns>nit respectivo al identificador</returns>
        public int DevolverAmbos(string nit, string digito)
        {
            int idnit;
            using (contableEntities bd = new contableEntities())
            {
                try
                {
                    var query = bd.maenits.Include("tiponit").Include("pais")
                                                     .Include("departamento").Include("ciudad").Where(mae => mae
                         .nit == nit && mae.digito == digito).First();
                    idnit = query.idnit;
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }

            return idnit;
        }


        public int BuscarNit(string nit, string digito)
        {
            int result = 0;

            using (contableEntities bd = new contableEntities())
            {
                try
                {
                    var query = bd.maenits.Where(mae => mae.nit == nit && mae.digito == digito).First();
                    result = query.idnit;
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }

            return result;
        }

        public List<maenits> CargarNitsReportes(int compania)
        {
            using (contableEntities bd = new contableEntities())
            {
                List<maenits> nits = new List<maenits>();
                try
                {
                    nits = bd.maenits.Include("tiponit").Include("pais")
                                                    .Include("departamento")
                                                           .Include("ciudad").Include("compania").ToList();
                }
                catch (Exception ex)
                {
                    throw ex;
                }

                return nits;
            }
        }

        public List<maenits> CargarNitsReportesNombre(int compania)
        {
            using (contableEntities bd = new contableEntities())
            {
                List<maenits> nits = new List<maenits>();
                try
                {
                    nits = bd.maenits.Include("tiponit").Include("pais")
                                                    .Include("departamento")
                                                           .Include("ciudad").Include("compania").ToList();
                }
                catch (Exception ex)
                {
                    throw ex;
                }

                return nits;
            }
        }

        public string DevolverNombre(int idnit)
        {
            string nombre;
            using (contableEntities bd = new contableEntities())
            {
                try
                {
                    var query = bd.maenits.Where(mae => mae
                         .idnit == idnit).First();
                    nombre = query.nomnit;
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }

            return nombre;
        }

        public bool ExisteNitAsi(string nit, string digito)
        {
            bool result = false;
            using (contableEntities bd = new contableEntities())
            {
                try
                {
                    var query = bd.maenits.Where(mae => mae.nit == nit && mae.digito == digito).Count();
                    if (query > 0)
                    {
                        result = true;
                    }
                    else
                    {
                        result = false;
                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }

            return result;
        }
    }
}
