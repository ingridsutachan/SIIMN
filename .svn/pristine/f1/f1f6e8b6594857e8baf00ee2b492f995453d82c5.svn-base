using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using Negocios.Contable;
using Entities.Types;
using App.Forms.Contable.Reportes;

namespace App.Forms.Contable
{
    public partial class Form_Formatos : Form
    {
        private formatosn negocioFormato;

        private Cuentan negocioCuenta;

        private bool usrClose;

        private Funciones funtions;

        private Form_VisualContable frmguar;

        private Form_ReporteFormato frmreporguar;

        public Form_Formatos()
        {
            InitializeComponent();
            this.negocioFormato = new formatosn();
            this.negocioCuenta = new Cuentan();
            this.funtions = new Funciones();
        }

        #region METODOS PUBLICOS

        /// <summary>
        /// Habilita los botones 
        /// </summary>
        public void BotonesHabit()
        {
            btn_buscar.Enabled = true;
            btn_editar.Enabled = true;
            btn_eliminar.Enabled = true;
            btn_nuevo.Enabled = true;
            btn_imprimir.Enabled = true;
        }

          public void CargarDatos(int idcompro)
          {
             /* CentroDataSource compedit = new CentroDataSource();
              try
              {
                  compedit = this.negociocentro.DevolverDatos(idcompro);
              }
              catch (Exception ex)
              {
                  MessageBox.Show("Se presento un error. " + ex.Message);
              }

              txt_codigo.Text = Convert.ToString(compedit.Codcentro);
              txt_nombre.Text = compedit.Nombrecentro;
              btn_guardar.Enabled = true;
              this.CamposActivos();
              txt_nombre.Focus();
              txt_codigo.ReadOnly = true;
              this.BotonesInhab();
              this.btn_cancelar.Enabled = true;*/
          }

        #endregion

        #region TECLAS DE ACCESO

        /// <summary>
        /// Teclas de Acceso a los botones
        /// </summary>
        /// <param name="msg">A <see cref="T:System.Windows.Forms.Message" />mensaje del proceso</param>
        /// <param name="keyData">un <see cref="T:System.Windows.Forms.Keys" /> valor tecla que recibe.</param>
        /// <returns>
        /// true si las teclas correspondiente son ingresadas
        /// </returns>
        protected override bool ProcessCmdKey(ref Message msg, Keys keyData)
        {
            EventArgs eve = new EventArgs();
            object sender = new object();
            switch (keyData)
            {
                case Keys.Control | Keys.N:

                    if (btn_nuevo.Enabled == true)
                    {
                        this.Btn_nuevo_Click(sender, eve);
                        return true;
                    }

                    break;

                case Keys.Control | Keys.E:

                   /* if (btn_editar.Enabled == true)
                    {
                        this.Btn_editar_Click(sender, eve);
                        return true;
                    }*/

                    break;
                case Keys.Control | Keys.B:

                  /*  if (btn_buscar.Enabled == true)
                    {
                        this.Btn_buscar_Click(sender, eve);
                        return true;
                    }*/

                    break;
                case Keys.Control | Keys.D:

                   /* if (btn_eliminar.Enabled == true)
                    {
                        this.Btn_eliminar_Click(sender, eve);
                        return true;
                    }*/

                    break;
                case Keys.Control | Keys.P:

                   /* if (btn_imprimir.Enabled == true)
                    {
                        this.Btn_imprimir_Click(sender, eve);
                        return true;
                    }*/

                    break;
                case Keys.Control | Keys.G:
                    if (btn_guardar.Enabled == true)
                    {
                        this.Btn_guardar_Click(sender, eve);
                        return true;
                    }

                    break;
                case Keys.Control | Keys.Z:
                    if (btn_cancelar.Enabled == true)
                    {
                        this.Btn_cancelar_Click(sender, eve);
                        return true;
                    }

                    break;
                case Keys.Escape:

                    if (btn_salir.Enabled == true)
                    {
                        this.Btn_salir_Click(sender, eve);
                        return true;
                    }

                    break;
            }

            return base.ProcessCmdKey(ref msg, keyData);
        }

        #endregion

        #region VISUALIZACION

        private void AutoCompletar()
        {
            CuentaDataSource cuenta = new CuentaDataSource();
            AutoCompleteStringCollection cuentas = new AutoCompleteStringCollection();
            try
            {
                var items = this.negocioCuenta.CargarCuenta();

                foreach (var item in items)
                {
                    cuentas.Add(item.Cuenta);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("SE PRESENTO UN ERROR." + ex.Message, "ERROR");
            }

            txt_cuentaini.AutoCompleteCustomSource = cuentas;
            txt_cuentafin.AutoCompleteCustomSource = cuentas;
        }

        private void BotonesInhabilitados()
        {
            this.btn_editar.Enabled = false;
            this.btn_eliminar.Enabled = false;
            this.btn_imprimir.Enabled = false;
            this.btn_buscar.Enabled = false;
            this.btn_cancelar.Enabled = true;
            this.btn_nuevo.Enabled = false;
        }

        private void BotonesInhab()
        {
            btn_buscar.Enabled = false;
            btn_editar.Enabled = false;
            btn_eliminar.Enabled = false;
            btn_nuevo.Enabled = false;
            btn_cancelar.Enabled = false;
            btn_imprimir.Enabled = false;
        }

        private void CamposActivos()
        {
            cbx_tipo.Enabled = true;
            txt_encabezado.Enabled = true;
            txt_clase.Enabled = true;
            txt_linea.Enabled = true;
            txt_nombre.Enabled = true;
            txt_cuentafin.Enabled = true;
            txt_cuentaini.Enabled = true;
        }

        private void CamposInactivos()
        {
            cbx_tipo.Enabled = true;
            txt_encabezado.Enabled = false;
            txt_clase.Enabled = false;
            txt_linea.Enabled = true;
            txt_nombre.Enabled = false;
            txt_cuentafin.Enabled = false;
            txt_cuentaini.Enabled = false;
            menu_botones.Focus();
        }

        private void CamposVacios()
        {

            txt_encabezado.Clear();
            txt_clase.Clear();
            txt_linea.Clear();
            txt_nombre.Clear();
            txt_cuentafin.Clear();
            txt_cuentaini.Clear();
        }

        #endregion

        #region BOTONES CLICK

        private void Btn_nuevo_Click(object sender, EventArgs e)
        {
            this.CamposActivos();
            this.BotonesInhabilitados();
            btn_guardar.Enabled = true;
            this.AutoCompletar();
            this.cbx_tipo.Focus();
            cbx_tipo.SelectedIndex = 0;
        }

        private void Btn_EditarBalance_Click(object sender, EventArgs e)
        {
            Form_VisualContable frm = new Form_VisualContable("formato", "editarbalance", this);
            this.frmguar = frm;
            frm.MdiParent = this.MdiParent;
            frm.Show();
            this.BotonesInhab();
        }

        private void Btn_Editarpyg_Click(object sender, EventArgs e)
        {
            Form_VisualContable frm = new Form_VisualContable("formato", "editarpyg", this);
            this.frmguar = frm;
            frm.MdiParent = this.MdiParent;
            frm.Show();
            this.BotonesInhab();
        }

        private void Btn_EliminarBalance_Click(object sender, EventArgs e)
        {
            Form_VisualContable frm = new Form_VisualContable("formato", "eliminarbalance", this);
            this.frmguar = frm;
            frm.MdiParent = this.MdiParent;
            frm.Show();
            this.BotonesInhab();
            this.CamposVacios();
            this.CamposInactivos();
        }

        private void Btn_Eliminarpyg_Click(object sender, EventArgs e)
        {
            Form_VisualContable frm = new Form_VisualContable("formato", "eliminarpyg", this);
            this.frmguar = frm;
            frm.MdiParent = this.MdiParent;
            frm.Show();
            this.BotonesInhab();
            this.CamposVacios();
            this.CamposInactivos();
        }

        private void btn_buscarbalance_Click(object sender, EventArgs e)
        {
            Form_VisualContable frm = new Form_VisualContable("formato", "buscarbalance", this);
            this.frmguar = frm;
            frm.MdiParent = this.MdiParent;
            frm.Show();
            this.BotonesInhab();
        }

        private void btn_buscarpyg_Click(object sender, EventArgs e)
        {
            Form_VisualContable frm = new Form_VisualContable("formato", "buscarpyg", this);
            this.frmguar = frm;
            frm.MdiParent = this.MdiParent;
            frm.Show();
            this.BotonesInhab();
        }

        private void Btn_imprimirbalance_Click(object sender, EventArgs e)
        {
            Form_ReporteFormato frm = new Form_ReporteFormato(this, "balance");
            this.frmreporguar = frm;
            frm.MdiParent = this.MdiParent;
            frm.Show();
            this.BotonesInhab();
        }

        private void Btn_imprimirpyg_Click(object sender, EventArgs e)
        {
            Form_ReporteFormato frm = new Form_ReporteFormato(this, "pyg");
            this.frmreporguar = frm;
            frm.MdiParent = this.MdiParent;
            frm.Show();
            this.BotonesInhab();
        }

        private void Btn_guardar_Click(object sender, EventArgs e)
        {
            bool validar = this.ValidarGuardar();
            if (validar)
            {
                FormatoDataSource formato = new FormatoDataSource();
                //formato = this.GuardarDatos();

                if (cbx_tipo.Enabled == false)
                {
                    bool existe = this.negocioFormato.ExisteFormato(formato);
                    if (!existe)
                    {
                        bool guardo = this.negocioFormato.GuardarFormato(formato, txt_encabezado.Text);
                        if (guardo)
                        {
                            MessageBox.Show("El formato ha sido guardado", "GUARDO", MessageBoxButtons.OK);
                            cbx_tipo.Enabled = false;
                            txt_encabezado.Enabled = false;
                            txt_clase.Text = string.Empty;
                            txt_nombre.Text = string.Empty;
                            txt_cuentafin.Text = string.Empty;
                            txt_cuentaini.Text = string.Empty;
                            btn_editar.Enabled = true;
                        }

                    }
                    else
                    {
                        MessageBox.Show("El formato ya existe", "GUARDO", MessageBoxButtons.OK);
                    }
                }
                else
                {
                    bool guardo = this.negocioFormato.ActualizarFormato(formato, txt_encabezado.Text);
                    if (guardo)
                    {
                        MessageBox.Show("El formato ha sido actualizado", "GUARDO", MessageBoxButtons.OK);
                        cbx_tipo.Enabled = false;
                        txt_encabezado.Enabled = false;
                        txt_clase.Text = string.Empty;
                        txt_nombre.Text = string.Empty;
                        txt_cuentafin.Text = string.Empty;
                        txt_cuentaini.Text = string.Empty;
                        btn_editar.Enabled = true;
                    }
                }
            }
        }

        private void Btn_cancelar_Click(object sender, EventArgs e)
        {
            DialogResult result = MessageBox.Show("ESTA SEGURO QUE DESEA CANCELAR?", "CANCELAR", MessageBoxButtons.YesNo);
            if (result == DialogResult.Yes)
            {
                this.CamposVacios();
                this.CamposInactivos();
                this.BotonesHabit();
                this.btn_cancelar.Enabled = false;
            }
        }

        private void Btn_salir_Click(object sender, EventArgs e)
        {
            DialogResult result = MessageBox.Show("ESTA SEGURO QUE DESEA SALIR?", "SALIR", MessageBoxButtons.YesNo);
            if (result == DialogResult.Yes)
            {
                this.usrClose = true;
                this.Close();
                this.frmguar.Close();
                this.frmreporguar.Close();
            }
        }

        #endregion

        #region   GUARDAR DATOS
        /* private FormatoDataSource GuardarDatos()
        {
            FormatoDataSource format = new FormatoDataSource();
            if (cbx_tipo.SelectedIndex == 0)
            {
                format.TipoFormato = "1";
                format.ClaseCuenta = cbx_clase.SelectedValue.ToString();
            }
            if (cbx_tipo.SelectedIndex == 1)
            {
                format.TipoFormato = "2";
                format.ClaseCuenta = Convert.ToString(int.Parse(cbx_clase.SelectedIndex.ToString()) + 1);
            }
            format.Linea = txt_linea.Text;
            format.Nombre = txt_nombre.Text;
            format.CuentaInicial = txt_cuentaini.Text;
            format.CuentaFinal = txt_cuentafin.Text;
            return format;
        }*/


        private bool ValidarGuardar()
        {
            bool result = false;
            if (!cbx_tipo.Text.Equals(string.Empty) && !txt_encabezado.Text.Equals(string.Empty) && !txt_clase.Text.Equals(string.Empty) && !txt_nombre.Text.Equals(string.Empty) &&
                !txt_cuentaini.Text.Equals(string.Empty) && !txt_cuentafin.Text.Equals(string.Empty))
            {
                result = true;
            }
            else
            {
                result = false;
                MessageBox.Show("Debe ingresar todos los campos", "ERROR", MessageBoxButtons.OK);
            }

            return result;

        }

        #endregion



        private void tabenter_KeyUp(object sender, KeyEventArgs e)
        {
            if (e.KeyValue == (char)Keys.Enter)
            {
                e.Handled = true;
                SendKeys.Send("{TAB}");
            }
        }
    
        private void txt_linea_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Enter)
            {
                e.Handled = true;
                SendKeys.Send("{TAB}");
            }
            else
            {
                e.Handled = this.funtions.ValidacionNumerico(e).Handled;
            }
        }


        #region SAlIR FORMULARIO

        private void salircuent_Click(object sender, EventArgs e)
        {
            DialogResult result = MessageBox.Show("Esta seguro que desea salir?", "SALIR", MessageBoxButtons.YesNo);
            if (result == DialogResult.Yes)
            {
                this.usrClose = true;
                this.Close();
            }
        }


        private void frm_formatos_FormClosing(object sender, FormClosingEventArgs e)
        {

            if (!this.usrClose)
            {
                DialogResult result = MessageBox.Show("Esta seguro que desea salir?", "SALIR", MessageBoxButtons.YesNo);
                if (result == DialogResult.No)
                {
                    e.Cancel = true;
                }
            }
        }

        #endregion

        #region VALIDACIONES

        private void cbx_tipo_SelectedIndexChanged_1(object sender, EventArgs e)
        {
            int idformat = cbx_tipo.SelectedIndex == 0 ? 1 : 2;
            txt_encabezado.Text = this.negocioFormato.DevolverEncabezado(idformat);
        }

        private void cbx_tipo_Leave(object sender, EventArgs e)
        {
            int idformat = cbx_tipo.SelectedIndex == 0 ? 1 : 2;
            txt_encabezado.Text = this.negocioFormato.DevolverEncabezado(idformat);
        }

        #endregion

        /*private void btn_buscar_Click(object sender, EventArgs e)
        {
            FormatoDataSource format = new FormatoDataSource();
            format.TipoFormato = cbx_tipo.SelectedIndex.ToString() == "0" ? "1" : "2";
            // format.ClaseCuenta = cbx_tipo.SelectedIndex.ToString() == "0" ? cbx_clase.SelectedValue.ToString() : Convert.ToString(int.Parse(cbx_clase.SelectedIndex.ToString()) + 1);
            format.Linea = txt_clase.Text;
            bool existe = this.negocioFormato.ExisteFormato(format);
            if (existe)
            {
                FormatoDataSource formato = new FormatoDataSource();
                formato = this.negocioFormato.DevolverFormato(format);
                txt_nombre.Enabled = true;
                txt_cuentaini.Enabled = true;
                txt_cuentafin.Enabled = true;
                txt_nombre.Text = formato.Nombre;
                txt_cuentaini.Text = formato.CuentaInicial;
                txt_cuentafin.Text = formato.CuentaFinal;
                btn_guardar.Enabled = true;
                cbx_tipo.Enabled = false;
                //cbx_clase.Enabled = false;
                txt_clase.Enabled = false;

            }
            else
            {
                MessageBox.Show("El tipo de formato que busca no existe", "NO EXISTE", MessageBoxButtons.OK);
            }
        }*/




    }
}
