// -----------------------------------------------------------------------
// <copyright file="formatosc.cs" company="">
// TODO: Update copyright text.
// </copyright>
// -----------------------------------------------------------------------

namespace Datos.Contable
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using Entities;


    /// <summary>
    /// TODO: Update summary.
    /// </summary>
    public class formatosc
    {
        public formatosc()
        {
        }

        public bool Guardarformato(formatosbpyg format, string encabezado)
        {
            using (siimnEntities bd = new siimnEntities())
            {
                try
                {
                    if (format.tipoformato.Equals("1"))
                    {
                        var query = bd.formatosbpyg.Where(frm => frm.idformato == 1);
                        if (query.Count() > 0)
                        {
                            query.First().nombref = encabezado;
                        }
                    }
                    else
                    {
                        var query = bd.formatosbpyg.Where(frm => frm.idformato == 2);
                        if (query.Count() > 0)
                        {
                            query.First().nombref = encabezado;
                        }
                    }
                    bd.formatosbpyg.Add(format);
                    bd.SaveChanges();
                    return true;
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }
        }

        public bool ExisteFormato(formatosbpyg format)
        {

            using (siimnEntities bd = new siimnEntities())
            {
                try
                {
                    var query = bd.formatosbpyg.Where(frm => frm.tipoformato == format.tipoformato && frm.clasemayor == format.clasemayor && frm.linea == format.linea);
                    if (query.Count() > 0)
                    {
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }
        }


        public formatosbpyg DevolverFormato(formatosbpyg format)
        {
            using (siimnEntities bd = new siimnEntities())
            {
                try
                {
                    var query = bd.formatosbpyg.Where(frm => frm.tipoformato == format.tipoformato && frm.clasemayor == format.clasemayor && frm.linea == format.linea);
                    if (query.Count() > 0)
                    {
                        return query.First();
                    }
                    else
                    {
                        return null;
                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }
        }

        public string DevolverEncabezado(int tipo)
        {
            using (siimnEntities bd = new siimnEntities())
            {
                try
                {
                    var query = bd.formatosbpyg;
                  //  var query = bd.formatosbpyg.Where(frm => frm.tipoformato == "1");
                    if (query.Count() > 0)
                    {
                        return query.First().nombref;
                    }
                    else
                    {
                        return string.Empty;
                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }
        }

        public bool ActualizarFormato(formatosbpyg format, string encabezado)
        {
            using (siimnEntities bd = new siimnEntities())
            {
                try
                {
                    if (format.tipoformato.Equals("1"))
                    {
                        var query = bd.formatosbpyg.Where(frm => frm.idformato == 1);
                        if (query.Count() > 0)
                        {
                            query.First().nombref = encabezado;
                        }
                    }
                    if (format.tipoformato.Equals("2"))
                    {
                        var query = bd.formatosbpyg.Where(frm => frm.idformato == 2);
                        if (query.Count() > 0)
                        {
                            query.First().nombref = encabezado;
                        }
                    }
                    var query1 = bd.formatosbpyg.Where(frm => frm.clasemayor == format.clasemayor && frm.linea == format.linea && frm.tipoformato == format.tipoformato);
                    if (query1.Count() > 0)
                    {
                        query1.First().nombref = format.nombref;
                        query1.First().cuentaini = format.cuentaini;
                        query1.First().cuentafin = format.cuentafin;
                        bd.SaveChanges();
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }
        }

        public List<formatosbpyg> Busqueda(string tipo, string buscar)
        {
            List<formatosbpyg> formabusq = new List<formatosbpyg>();
            using (siimnEntities bd = new siimnEntities())
            {
                try
                {
                    switch (tipo)
                    {
                        /*case "codigo":
                            var query = bd.centrocostos.OrderBy(com => com.idcentro).AsEnumerable().Where(cen => cen.idcentro.ToString().Contains(buscar));
                            formabusq = query.Count() > 0 ? query.ToList() : null;
                            break;

                        case "nombre":
                            var query1 = bd.centrocostos.OrderBy(com => com.idcentro).Where(cen => cen.nombrecentro.Contains(buscar));
                            formabusq = query1.Count() > 0 ? query1.ToList() : null;
                            break;

                        case "busqueda":
                            var query3 = bd.centrocostos.AsEnumerable().OrderBy(cen => cen.idcentro).Where(cen => cen.idcentro.ToString().Contains(buscar) || cen.nombrecentro.Contains(buscar));
                            formabusq = query3.Count() > 0 ? query3.ToList() : null;
                            break;*/

                        case "todos":
                            formabusq = bd.formatosbpyg.Count() > 0 ? bd.formatosbpyg.OrderBy(com => com.clasemayor).ToList() : null;
                            break;

                        default:
                            formabusq = null;
                            break;
                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }

            return formabusq;
        }
    }
}
