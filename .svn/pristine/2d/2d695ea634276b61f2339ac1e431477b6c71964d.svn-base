////*********************************************************
//
//    <copyright file="nitsn.cs" company="Marketing Software de Colombia LTDA">
//    @Autor Ingrid Sutachan
//    @fecha 01 marzo 2014
//    </copyright>
//
////*********************************************************
namespace Negocios.Contable
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Datos.Contable;
    using Entities;
    using Entities.Types;

    /// <summary>
    /// Clase Nits de Negocios
    /// </summary>
    public class Nitsn
    {
        /// <summary>
        /// instancia capa de datos
        /// </summary>
        private Nitsc persistencia;

        /// <summary>
        /// Initializes a new instance of the <see cref="Nitsn"/> class.
        /// </summary>
        public Nitsn()
        {
            this.persistencia = new Nitsc();
        }
        private maenits ConvertirDatatoBd(NitsDataSource nits)
        {
            maenits nit = new maenits();
            nit.idnit = nits.Idnit;
            nit.nit = nits.Nit;
            nit.digito = nits.Digito;
            nit.nombrenit = nits.Nombrenit;
            nit.idtiponit = nits.Tiponit;
            nit.acteconomic = nits.ActividadEconomica;
            nit.idciudad = nits.Idciudad;
            nit.direccion = nits.Direccion;
            nit.telefono = nits.Telefono;
            nit.celular = nits.Celular;
            nit.email = nits.Email;
            return nit;
        }

        private NitsDataSource ConvertirBdtoData(maenits nites)
        {
            NitsDataSource nits = new NitsDataSource();
            nits.Idnit = nites.idnit;
            nits.Nit = nites.nit;
            nits.Digito = nites.digito;
            nits.Tiponit = nites.idtiponit;
            nits.Nombretipo = nites.tiponit.nombretipo;
            nits.ActividadEconomica = nites.acteconomic;
            nits.Nombredpto = nites.ciudad.departamento.nombredept;
            nits.Nombrepais = nites.ciudad.departamento.pais.nombrepais;
            nits.Idciudad = nites.idciudad;
            nits.Nombreciudad = nites.ciudad.nombreciudad;
            nits.Nombrenit = nites.nombrenit;
            nits.Direccion = nites.direccion;
            nits.Telefono = nites.telefono;
            nits.Celular = nites.celular;
            nits.Email = nites.email;
            return nits;
        }

        /// <summary>
        /// Carga los nits
        /// </summary>
        /// <returns>lista de nits</returns>
        public List<NitsDataSource> CargarNits()
        {
            List<NitsDataSource> nits = new List<NitsDataSource>();
            try
            {
                var items = this.persistencia.CargarNits();

                foreach (var item in items)
                {
                    NitsDataSource nds = new NitsDataSource();
                    nds.Idnit = item.idnit;
                    nds.Nit = item.nit;
                    nds.Digito = item.digito;
                    nds.Nombrenit = item.nombrenit;
                    nds.Tiponit = item.idtiponit;
                    nds.ActividadEconomica = item.acteconomic;
                    nds.Idpais = item.ciudad.departamento.idpais;
                    nds.Iddepartamento = item.ciudad.codigodepto;
                    nds.Idciudad = item.idciudad;
                    nds.Direccion = item.direccion;
                    nds.Telefono = item.telefono;
                    nds.Celular = item.celular;
                    nds.Email = item.email;
                    nds.Nombretipo = item.tiponit.nombretipo;
                    nds.Nombrepais = item.ciudad.departamento.pais.nombrepais;
                    nds.Nombredpto = item.ciudad.departamento.nombredept;
                    nds.Nombreciudad = item.ciudad.nombreciudad;
                    nits.Add(nds);
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return nits;
        }

        /// <summary>
        /// Guarda nits.
        /// </summary>
        /// <param name="nits">Nit a guardar</param>
        public bool GuardarNits(NitsDataSource nits)
        {
            bool result = false;
            maenits nit = new maenits();
            nit = this.ConvertirDatatoBd(nits);
            try
            {
                result = this.persistencia.GuardarNits(nit);
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return result;
        }

        /// <summary>
        /// Devuelve  nits.
        /// </summary>
        /// <param name="idnit">entero con  idnit.</param>
        /// <returns>nit con el respectivo idnit</returns>
        public NitsDataSource DevolverNits(int idnit)
        {
            NitsDataSource nits = new NitsDataSource();
            try
            {
                var nites = this.persistencia.DevolverNit(idnit);
                nits = this.ConvertirBdtoData(nites);
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return nits;
        }

        /// <summary>
        /// Actualiza nits.
        /// </summary>
        /// <param name="nits">Nit a actualizar</param>
        public bool ActualizarNits(NitsDataSource nits)
        {
            bool result = false;
            maenits nit = new maenits();
            nit = this.ConvertirDatatoBd(nits);
            try
            {
                result = this.persistencia.ActualizarNit(nit);
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return result;
        }

        /// <summary>
        /// Verifica NIT
        /// </summary>
        /// <param name="nits">nit a verificar</param>
        /// <returns>booleano que dice si existe o no</returns>
        public bool ExisteNit(NitsDataSource nits)
        {
            bool result = false;
            maenits nit = new maenits();
            nit = this.ConvertirDatatoBd(nits);
            try
            {
                result = this.persistencia.ExisteNit(nit);
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return result;
        }

        /// <summary>
        /// Eliminar  nit
        /// </summary>
        /// <param name="idnit">identificador de nit</param>
        /// <returns>booleano que rectifica si se ha eliminado el registro</returns>
        public bool EliminarNit(int idnit)
        {
            bool result = false;
            try
            {
                result = this.persistencia.EliminarNit(idnit);
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return result;
        }

        /// <summary>
        /// Buscar nit
        /// </summary>
        /// <param name="buscar">texto a buscar</param>
        /// <returns>lista de nits encontrados </returns>
        public List<NitsDataSource> BuscarNit(string buscar)
        {
            List<NitsDataSource> nitsencuen = new List<NitsDataSource>();
            try
            {
                var items = this.persistencia.BuscarNit(buscar);

                foreach (var item in items)
                {
                    NitsDataSource nit = new NitsDataSource();
                    nit.Idnit = item.idnit;
                    nit.Nit = item.nit;
                    nit.Digito = item.digito;
                    nit.Nombrenit = item.nombrenit;
                    nit.Nombretipo = item.tiponit.nombretipo;
                    nit.ActividadEconomica = item.acteconomic;
                    nit.Idpais = item.ciudad.departamento.idpais;
                    nit.Idciudad = item.idciudad;
                    nit.Iddepartamento = item.ciudad.codigodepto;
                    nit.Nombrepais = item.ciudad.departamento.pais.nombrepais;
                    nit.Nombreciudad = item.ciudad.nombreciudad;
                    nit.Nombredpto = item.ciudad.departamento.nombredept;
                    nit.Direccion = item.direccion;
                    nit.Telefono = item.telefono;
                    nit.Celular = item.celular;
                    nit.Email = item.email;
                    nitsencuen.Add(nit);
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return nitsencuen;
        }


        /// <summary>
        /// Devuelve  nits.
        /// </summary>
        /// <param name="idnit">entero con  idnit.</param>
        /// <returns>nit con el respectivo idnit</returns>
        public int DevolverAmbos(string nit, string digito)
        {
            int idnit;
            try
            {
                idnit = this.persistencia.DevolverAmbos(nit, digito);
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return idnit;
        }

        public List<NitsDataSource> CargarNitsReporte(int compania)
        {
            List<NitsDataSource> nits = new List<NitsDataSource>();
            try
            {
                var items = this.persistencia.CargarNitsReportes(compania).OrderBy(m => m.nit);
                foreach (var item in items)
                {
                    NitsDataSource nds = new NitsDataSource();
                    nds.Idnit = item.idnit;
                    nds.Nit = item.nit;
                    nds.Digito = item.digito;
                    nds.Nombrenit = item.nombrenit;
                    nds.Tiponit = item.idtiponit;
                    nds.ActividadEconomica = item.acteconomic;
                    nds.Idpais = item.ciudad.departamento.idpais;
                    nds.Iddepartamento = item.ciudad.codigodepto;
                    nds.Idciudad = item.idciudad;
                    nds.Direccion = item.direccion;
                    nds.Telefono = item.telefono;
                    nds.Celular = item.celular;
                    nds.Email = item.email;
                    nds.Nombretipo = item.tiponit.nombretipo;
                    nds.Nombrepais = item.ciudad.departamento.pais.nombrepais;
                    nds.Nombredpto = item.ciudad.departamento.nombredept;
                    nds.Nombreciudad = item.ciudad.nombreciudad;
                    nits.Add(nds);
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return nits;
        }

        public List<NitsDataSource> CargarNitsReporteNombre(int compania)
        {
            List<NitsDataSource> nits = new List<NitsDataSource>();
            try
            {
                var items = this.persistencia.CargarNitsReportesNombre(compania).OrderBy(m => m.nombrenit);
                foreach (var item in items)
                {
                    NitsDataSource nds = new NitsDataSource();
                    nds.Idnit = item.idnit;
                    nds.Nit = item.nit;
                    nds.Digito = item.digito;
                    nds.Nombrenit = item.nombrenit;
                    nds.Tiponit = item.idtiponit;
                    nds.ActividadEconomica = item.acteconomic;
                    nds.Idpais = item.ciudad.departamento.idpais;
                    nds.Iddepartamento = item.ciudad.codigodepto;
                    nds.Idciudad = item.idciudad;
                    nds.Direccion = item.direccion;
                    nds.Telefono = item.telefono;
                    nds.Celular = item.celular;
                    nds.Email = item.email;
                    nds.Nombretipo = item.tiponit.nombretipo;
                    nds.Nombrepais = item.ciudad.departamento.pais.nombrepais;
                    nds.Nombredpto = item.ciudad.departamento.nombredept;
                    nds.Nombreciudad = item.ciudad.nombreciudad;
                    nits.Add(nds);
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return nits;
        }

        public string DevolverNombre(int idnit)
        {
            string nombre;
            try
            {
                nombre = this.persistencia.DevolverNombre(idnit);
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return nombre;
        }

        public bool ExisteNitAsi(string nit, string digito)
        {
            bool result = false;
            try
            {
                result = this.persistencia.ExisteNitAsi(nit, digito);
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return result;
        }
    }
}
