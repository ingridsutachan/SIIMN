namespace App.Forms.Contable
{
    using System;
    using System.Collections.Generic;
    using System.Windows.Forms;
    using Entities.Types;
    using Negocios.Contable;
    using Negocios.General;

    public partial class Frm_comprobantecierre : Form
    {
                private Cuentan negocioCuenta;

        private Comprobantesn negocioComprobante;

        private Parametrosn negocioParametros;

        private bool usrClose;

        private Funciones funtions;

        public Frm_comprobantecierre()
        {
            this.negocioCuenta = new Cuentan();
            this.negocioComprobante = new Comprobantesn();
            this.negocioParametros = new Parametrosn();
            this.funtions = new Funciones();
            this.InitializeComponent();
            this.AutoCompletar();
            this.CargarCampos();
        }

        #region VISUALIZACION

        private void AutoCompletar()
        {
            List<AsientosDataSource> cuenta = new List<AsientosDataSource>();
            cuenta = this.negocioCuenta.CargarCuenta();
            AutoCompleteStringCollection cuentas = new AutoCompleteStringCollection();
            foreach (AsientosDataSource item in cuenta)
            {
                cuentas.Add(item.Cuenta);
                cuentas.Add(item.Nombre);
            }

            txt_cuentainiing.AutoCompleteCustomSource = cuentas;
            txt_cuentafining.AutoCompleteCustomSource = cuentas;
            txt_cuentainicos.AutoCompleteCustomSource = cuentas;
            txt_cuentafincos.AutoCompleteCustomSource = cuentas;
            txt_cuentauti.AutoCompleteCustomSource = cuentas;
            /*List<ComprobantesDataSource> compro = new List<ComprobantesDataSource>();
            AutoCompleteStringCollection comprob = new AutoCompleteStringCollection();
            compro = this.negocioComprobante.CargarDatos();
            foreach (ComprobantesDataSource item in compro)
            {
                comprob.Add(Convert.ToString(item.Codigo));
                comprob.Add(item.Descricompro);
            }
            txt_codcomp.AutoCompleteCustomSource = comprob;*/
        }

        private void CargarCampos()
        {
            List<ParametrosDataSource> paramet = new List<ParametrosDataSource>();
            paramet = this.negocioParametros.CargarDatosComprobante();
            txt_cuentainiing.Text = paramet[0].ValorParametro;
            txt_nominiing.Text = this.negocioCuenta.DevolverNombre(paramet[0].ValorParametro);
            txt_cuentafining.Text = paramet[1].ValorParametro;
            txt_nomfining.Text = this.negocioCuenta.DevolverNombre(paramet[1].ValorParametro);
            txt_cuentainicos.Text = paramet[2].ValorParametro;
            txt_nominicos.Text = this.negocioCuenta.DevolverNombre(paramet[2].ValorParametro);
            txt_cuentafincos.Text = paramet[3].ValorParametro;
            txt_nomfincos.Text = this.negocioCuenta.DevolverNombre(paramet[3].ValorParametro);
            txt_cuentauti.Text = paramet[4].ValorParametro;
            txt_nomutili.Text = this.negocioCuenta.DevolverNombre(paramet[4].ValorParametro);
            txt_detalle.Text = paramet[6].ValorParametro;
            txt_codcomp.Text = paramet[5].ValorParametro;
        }

        #endregion

        #region  GUARDAR DATOS

        private bool ValidarCampos()
        {
            bool result = false;
            if (!txt_codcomp.Text.Equals(string.Empty) && !txt_cuentafincos.Text.Equals(string.Empty) && !txt_cuentafining.Text.Equals(string.Empty) &&
                !txt_cuentainicos.Text.Equals(string.Empty) && !txt_cuentainiing.Text.Equals(string.Empty) && !txt_cuentauti.Text.Equals(string.Empty) &&
                !txt_detalle.Text.Equals(string.Empty))
            {
                if (!txt_nomfincos.Text.Equals("Cuenta General") && !txt_nomfincos.Text.Equals("Cuenta no Existente") &&
                !txt_nomfining.Text.Equals("Cuenta General") && !txt_nomfining.Text.Equals("Cuenta no Existente") && !txt_nominicos.Text.Equals("Cuenta General") &&
                !txt_nominicos.Text.Equals("Cuenta no Existente") && !txt_nominiing.Text.Equals("Cuenta General") && !txt_nominiing.Text.Equals("Cuenta no Existente") &&
                !txt_nomutili.Text.Equals("Cuenta General") && !txt_nomutili.Text.Equals("Cuenta no Existente"))
                {
                    result = true;
                }
                else
                {
                    result = false;
                    MessageBox.Show("Alguna de las cuentas no es valida ", "ERROR", MessageBoxButtons.OK);
                }
            }
            else
            {
                result = false;
                MessageBox.Show("Debe ingresar todos los campos", "ERROR", MessageBoxButtons.OK);
            }

            return result;
        }

        private void Btnguardar_Click(object sender, EventArgs e)
        {
            if (this.ValidarCampos())
            {
                List<ParametrosDataSource> paramet = new List<ParametrosDataSource>();
                paramet = this.negocioParametros.CargarDatosComprobante();
                paramet[0].ValorParametro = txt_cuentainiing.Text;
                paramet[1].ValorParametro = txt_cuentafining.Text;
                paramet[2].ValorParametro = txt_cuentainicos.Text;
                paramet[3].ValorParametro = txt_cuentafincos.Text;
                paramet[4].ValorParametro = txt_cuentauti.Text;
                paramet[5].ValorParametro = txt_codcomp.Text;
                paramet[6].ValorParametro = txt_detalle.Text;

                if (this.negocioParametros.GuardarDatosComprobante(paramet))
                {
                    MessageBox.Show("El comprobante ha sido guardado", "GUARDAR", MessageBoxButtons.OK);
                }
            }
        }
        #endregion

        #region CERRAR FORMULARIO

        private void Salircuent_Click(object sender, EventArgs e)
        {
            DialogResult result = MessageBox.Show("Esta seguro que desea salir?", "SALIR", MessageBoxButtons.YesNo);
            if (result == DialogResult.Yes)
            {
                this.usrClose = true;
                this.Close();
            }
        }

        private void Frm_comprobantecierre_FormClosing(object sender, FormClosingEventArgs e)
        {
            if (!this.usrClose)
            {
                DialogResult result = MessageBox.Show("Esta seguro que desea salir?", "SALIR", MessageBoxButtons.YesNo);
                if (result == DialogResult.No)
                {
                    e.Cancel = true;
                }
            }
        }

        #endregion

        #region VALIDACIONES

        private void Txt_cuentainiing_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                string result = this.funtions.ValidaCuentaoNombre(txt_cuentainiing.Text);
                txt_nominiing.Text = result;
                if (result.Equals("Cuenta General") || result.Equals("Cuenta no Existente"))
                {
                    e.Handled = true;
                }
                else
                {
                    e.Handled = false;
                    SendKeys.Send("{TAB}");
                }
            }
        }

        private void Txt_cuentafining_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                string result = this.funtions.ValidaCuentaoNombre(txt_cuentafining.Text);
                txt_nomfining.Text = result;
                if (result.Equals("Cuenta General") || result.Equals("Cuenta no Existente"))
                {
                    e.Handled = true;
                }
                else
                {
                    e.Handled = false;
                    SendKeys.Send("{TAB}");
                }
            }
        }

        private void Txt_cuentainicos_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                string result = this.funtions.ValidaCuentaoNombre(txt_cuentainicos.Text);
                txt_nominicos.Text = result;
                if (result.Equals("Cuenta General") || result.Equals("Cuenta no Existente"))
                {
                    e.Handled = true;
                }
                else
                {
                    e.Handled = false;
                    SendKeys.Send("{TAB}");
                }
            }
        }

        private void Txt_cuentafincos_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                string result = this.funtions.ValidaCuentaoNombre(txt_cuentafincos.Text);
                txt_nomfincos.Text = result;
                if (result.Equals("Cuenta General") || result.Equals("Cuenta no Existente"))
                {
                    e.Handled = true;
                }
                else
                {
                    e.Handled = false;
                    SendKeys.Send("{TAB}");
                }
            }
        }

        private void Txt_cuentauti_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                string result = this.funtions.ValidaCuentaoNombre(txt_cuentauti.Text);
                txt_nomutili.Text = result;
                if (result.Equals("Cuenta General") || result.Equals("Cuenta no Existente"))
                {
                    e.Handled = true;
                }
                else
                {
                    e.Handled = false;
                    SendKeys.Send("{TAB}");
                }
            }
        }

        private void EnterTab_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Enter)
            {
                e.Handled = true;
                SendKeys.Send("{TAB}");
            }
        }

        private void EnterVal_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Enter)
            {
                e.Handled = true;
                SendKeys.Send("{TAB}");
            }
            else
            {
                e.Handled = this.funtions.ValidacionNumerico(e).Handled;
            }
        }

        #endregion
    }
}
