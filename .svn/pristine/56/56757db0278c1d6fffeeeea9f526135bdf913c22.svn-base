////*********************************************************
//
//    <copyright file="frmcomprobantes.cs" company="Marketing Software de Colombia LTDA">
//    @Autor Ingrid Sutachan
//    @fecha 01 marzo 2014
//    </copyright>
//
////*********************************************************
namespace App.Forms.Contable
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Windows.Forms;
    using Entities.Types;
    using Negocios.Contable;

    /// <summary>
    /// Clase formulario comprobantes 
    /// </summary>
    public partial class Frmcomprobantes : Form
    {
        /// <summary>
        /// instancia de comprobantes de la capa negocios
        /// </summary>
        private Comprobantesn negociocompro;

        /// <summary>
        /// identificador del comprobante al actualizar 
        /// </summary>
        private int idcomprobante;

        /// <summary>
        /// variable para manejar cierre de formulario
        /// </summary>
        private bool usrClose;

        private Funciones funtions;

        /// <summary>
        /// Initializes a new instance of the <see cref="Frmcomprobantes"/> class.
        /// </summary>
        public Frmcomprobantes()
        {
            this.InitializeComponent();
            this.negociocompro = new Comprobantesn();
            this.funtions = new Funciones();
            this.CargarDatos();
        }

        #region VISUALIZACION

        /// <summary>
        /// Cargar datos
        /// </summary>
        private void CargarDatos()
        {
            /*List<ComprobantesDataSource> listacompro = new List<ComprobantesDataSource>();
            try
            {
                listacompro = this.negociocompro.CargarDatos();
                dgv_comprobantes.DataSource = listacompro;
                this.NombresTablas();
            }
            catch (Exception ex)
            {
                MessageBox.Show("Se presento un error. " + ex.Message);
            }*/
        }



        /// <summary>
        /// Campos activos.
        /// </summary>
        private void CamposActivos()
        {
            txt_nombre.Enabled = true;
            txt_numeroini.Enabled = true;
            check_consecutivo.Enabled = true;
            txt_conversi.Enabled = true;
        }

        /// <summary>
        /// Campos inactivos.
        /// </summary>
        private void CamposInactivos()
        {
            txt_nombre.Enabled = false;
            txt_numeroini.Enabled = false;
            check_consecutivo.Enabled = false;
            txt_conversi.Enabled = false;
        }

        /// <summary>
        /// Campos vacios
        /// </summary>
        private void CamposVacios()
        {
            txt_nombre.Text = string.Empty;
            txt_numeroini.Text = string.Empty;
            check_consecutivo.Checked = false;
            txt_conversi.Text = string.Empty;
        }

        #endregion

        #region GUARDAR DATOS

        private bool ValidarGuardar()
        {
            bool result = false;
            if (!txt_nombre.Text.Equals(string.Empty) && !txt_numeroini.Text.Equals(string.Empty)
                && !txt_conversi.Text.Equals(string.Empty))
            {
                result = true;
            }
            else
            {
                result = false;
                MessageBox.Show("Debe ingresar todos los campos requeridos", "ERROR", MessageBoxButtons.OK);
            }

            return result;
        }

        /// <summary>
        /// Guardar campos
        /// </summary>
        /// <returns>tipo de comprobante a guardar</returns>
        private ComprobantesDataSource GuardarCampos()
        {
            ComprobantesDataSource comp = new ComprobantesDataSource();
            comp.Descricompro = txt_nombre.Text;
            comp.Consecutivo = check_consecutivo.Checked;
            comp.Numerosigui = int.Parse(txt_numeroini.Text);
            comp.Codigootra = txt_conversi.Text;
            return comp;
        }

        /// <summary>
        /// Handles the Click event of the Btn_guardar control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="EventArgs"/> instance containing the event data.</param>
        private void Btn_guardar_Click(object sender, EventArgs e)
        {
            bool guardar = this.ValidarGuardar();
            {
                ComprobantesDataSource compro = new ComprobantesDataSource();
                compro = this.GuardarCampos();
                if (txt_numeroini.ReadOnly == false)
                {
                    try
                    {
                        this.negociocompro.GuardarComp(compro);
                        MessageBox.Show("El comprobante ha sido Guardado", "GUARDAR", MessageBoxButtons.OK);
                        this.CargarDatos();
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show("Se presento un error. " + ex.Message);
                    }

                    this.CamposVacios();
                    this.CamposInactivos();
                }

                else
                {
                    compro.Codigo = this.idcomprobante;
                    try
                    {
                        this.negociocompro.ActualizarCompro(compro);
                        MessageBox.Show("El comprobante ha sido Actualizado", "ACTUALIZAR", MessageBoxButtons.OK);
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show("Se presento un error. " + ex.Message);
                    }

                    this.CargarDatos();
                    this.CamposVacios();
                    this.CamposInactivos();
                }
            }
        }

        #endregion

        #region BOTONES CLICK
        /// <summary>
        /// Handles the Click event of the Btn_nuevo control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="EventArgs"/> instance containing the event data.</param>
        private void Btn_nuevo_Click(object sender, EventArgs e)
        {
            this.CamposActivos();
           // btn_guardar.Enabled = true;
          
        }

        /// <summary>
        /// Handles the Click event of the Btn_editar control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="EventArgs"/> instance containing the event data.</param>
        private void Btn_editar_Click(object sender, EventArgs e)
        {
            
            btn_guardar.Enabled = true;
            this.CamposActivos();
           
            ComprobantesDataSource compedit = new ComprobantesDataSource();
            try
            {
                compedit = this.negociocompro.DevolverDatos(1);
                this.idcomprobante = compedit.Codigo;
                txt_nombre.Text = compedit.Descricompro;
                check_consecutivo.Checked = compedit.Consecutivo;
                txt_numeroini.Text = Convert.ToString(compedit.Numerosigui);
                txt_conversi.Text = compedit.Codigootra;
            }
            catch (Exception ex)
            {
                MessageBox.Show("Se presento un error. " + ex.Message);
            }
        }

        /// <summary>
        /// Handles the Click event of the Btn_eliminar control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="EventArgs"/> instance containing the event data.</param>
        private void Btn_eliminar_Click(object sender, EventArgs e)
        {
            
            DialogResult result = MessageBox.Show("Esta seguro que desea eliminar?", "ELIMINAR", MessageBoxButtons.YesNo);
            if (result == DialogResult.Yes)
            {
                try
                {
                    if (this.negociocompro.EliminarCompro(1))
                    {
                        MessageBox.Show("eliminado");
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show("Se presento un error. " + ex.Message);
                }

                this.CargarDatos();
            }
        }

        /// <summary>
        /// Handles the Click event of the Btn_buscar control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="EventArgs"/> instance containing the event data.</param>
        private void Btn_buscar_Click(object sender, EventArgs e)
        {
            
        }

        #endregion

        #region SALIR FORMULARIO
        /// <summary>
        /// Handles the Click event of the Salircuent control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="EventArgs"/> instance containing the event data.</param>
        private void Salircuent_Click(object sender, EventArgs e)
        {
            DialogResult result = MessageBox.Show("Esta seguro que desea salir?", "SALIR", MessageBoxButtons.YesNo);
            if (result == DialogResult.Yes)
            {
                this.usrClose = true;
                this.Close();
            }
        }

        /// <summary>
        /// Handles the FormClosing event of the Frmcomprobantes control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="FormClosingEventArgs"/> instance containing the event data.</param>
        private void Frmcomprobantes_FormClosing(object sender, FormClosingEventArgs e)
        {
            if (!this.usrClose)
            {
                DialogResult result = MessageBox.Show("Esta seguro que desea salir?", "SALIR", MessageBoxButtons.YesNo);
                if (result == DialogResult.No)
                {
                    e.Cancel = true;
                }
            }
        }

        #endregion

        #region VALIDACIONES

        private void EnterTab_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Enter)
            {
                e.Handled = true;
                SendKeys.Send("{TAB}");
            }
        }

        private void EnterTabVal_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Enter)
            {
                e.Handled = true;
                SendKeys.Send("{TAB}");
            }
            else
            {
                e.Handled = this.funtions.ValidacionNumerico(e).Handled;
            }
        }
        #endregion
    }
}
