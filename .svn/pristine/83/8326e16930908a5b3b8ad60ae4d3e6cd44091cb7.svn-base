////*********************************************************
//
//    <copyright file="Form_Actualizar.cs" company="Marketing Software de Colombia LTDA">
//    @Autor Ingrid Sutachan
//    @fecha 30 Marzo 2015
//    </copyright>
//
////*********************************************************
namespace App.Forms.Contable
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Windows.Forms;
    using Entities.Types;
    using Negocios.Contable;

    public partial class Form_Actualizar : Form
    {
        private asientosn NegocioAsiento;

        private Comprobantesn negocioComprobante;

        private int tipoact;

        public Form_Actualizar(int tipo)
        {
            this.NegocioAsiento = new asientosn();
            this.negocioComprobante = new Comprobantesn();
            this.InitializeComponent();
            tipoact = tipo;
            this.ValidarTipo(tipoact);
        }

        private void ValidarTipo(int tipo)
        {
            if (tipo == 1)
            {
                panel_acttodos.Visible = true;
                dt_desde.Focus();
            }
            if (tipo == 2)
            {
                panel_actuno.Visible = true;
                this.CargarComprobantes();
                cbx_comprobante.Focus();
            }

        }

        private void CargarComprobantes()
        {
            List<ComprobantesDataSource> comprob = new List<ComprobantesDataSource>();
            try
            {
                comprob = this.negocioComprobante.CargarDatos();
            }
            catch (Exception ex)
            {
                MessageBox.Show("SE PRESENTO UN ERROR." + ex.Message, "ERROR");
            }

            foreach (ComprobantesDataSource item in comprob)
            {
                item.Descricompro = Convert.ToString(item.Codigo) + "-" + item.Descricompro;
            }

            cbx_comprobante.DataSource = comprob;
            cbx_comprobante.ValueMember = "Codigo";
            cbx_comprobante.DisplayMember = "Descricompro";
        }

        private void Btn_actualizar_Click(object sender, EventArgs e)
        {
            if (this.ValidarActualizar())
            {
                btn_actualizar.Enabled = false;
                progressbarAct.Visible = true;
                backgroundWorker1.RunWorkerAsync();
                if (this.tipoact == 1)
                {
                    int cantasient = this.NegocioAsiento.ActualizarTodosAsientos(dt_desde.Value, dt_hasta.Value, Program.iduser);
                    if (cantasient > 0)
                    {
                        DialogResult ok = MessageBox.Show(cantasient + "    ASIENTOS HAN SIDO ACTUALIZADOS", "ACTUALIZAR ASIENTOS", MessageBoxButtons.OK);
                        if (ok == DialogResult.OK)
                        {
                            progressbarAct.Value = 0;
                            progressbarAct.Visible = false;
                            porcentaje.Visible = false;
                            dt_desde.Value = DateTime.Today;
                            dt_hasta.Value = DateTime.Today;
                            btn_actualizar.Enabled = true;
                        }
                    }
                    else
                    {
                        MessageBox.Show("NINGUN ASIENTO HA SIDO ACTUALIZADO", "ACTUALIZAR ASIENTOS", MessageBoxButtons.OK);
                    }
                }
                else
                {
                    bool actualiza = this.NegocioAsiento.ActualizarUnAsiento(int.Parse(cbx_comprobante.SelectedValue.ToString()), txt_numeroasiento.Text);
                    if (actualiza)
                    {
                        DialogResult ok = MessageBox.Show("    ASIENTO HA SIDO ACTUALIZADO", "ACTUALIZAR ASIENTOS", MessageBoxButtons.OK);
                        if (ok == DialogResult.OK)
                        {
                            progressbarAct.Value = 0;
                            progressbarAct.Visible = false;
                            porcentaje.Visible = false;
                            cbx_comprobante.SelectedValue = 1;
                            txt_numeroasiento.Clear();
                            btn_actualizar.Enabled = true;
                        }
                    }
                    else
                    {
                        MessageBox.Show("NINGUN ASIENTO HA SIDO ACTUALIZADO", "ACTUALIZAR ASIENTOS", MessageBoxButtons.OK);
                    }
                }
            }
        }

        private bool ValidarActualizar()
        {
            bool val = true;
            if (this.tipoact == 1)
            {
                val = this.NegocioAsiento.ExisteAsientoActualizar();

                if (val)
                {
                    val = this.NegocioAsiento.ExisteAsientoenFecha(dt_desde.Value, dt_hasta.Value);
                    if (!val)
                    {
                        MessageBox.Show("NO HAY ASIENTOS EN ESA FECHA PARA ACTUALIZAR", "ERROR", MessageBoxButtons.OK);
                    }
                }
                else
                {
                    MessageBox.Show("NO HAY ASIENTOS PARA ACTUALIZAR", "ERROR", MessageBoxButtons.OK);
                }
            }
            else
            {
                val = this.NegocioAsiento.ExisteAsiento(txt_numeroasiento.Text, int.Parse(cbx_comprobante.SelectedValue.ToString()));
                if (val)
                {
                    val = this.NegocioAsiento.AsientoYaActualizado(txt_numeroasiento.Text, int.Parse(cbx_comprobante.SelectedValue.ToString()));
                    if (!val)
                    {
                        MessageBox.Show("EL ASIENTO YA SE ENCUENTRA ACTUALIZADO", "ERROR", MessageBoxButtons.OK);
                    }
                }
                else
                {
                    MessageBox.Show("EL ASIENTO NO EXISTE", "ERROR", MessageBoxButtons.OK);
                }
            }

            return val;
        }

        private void timer_pg_Tick(object sender, EventArgs e)
        {
            /* this.progressbarAct.Increment(1);
             porcentaje.Visible = true;
             porcentaje.Text = progressbarAct.Value.ToString() + "%";*/
        }

        private void backgroundWorker1_DoWork(object sender, DoWorkEventArgs e)
        {
            for (int i = 0; i <= 100; i++)
            {
                // Report progress to 'UI' thread
                 backgroundWorker1.ReportProgress(i);
                 // Simulate long task
                 System.Threading.Thread.Sleep(100);
          }
        }

        private void backgroundWorker1_ProgressChanged(object sender, ProgressChangedEventArgs e)
        {
            progressbarAct.Value = e.ProgressPercentage;
            porcentaje.Text = e.ProgressPercentage.ToString() + "%";
            porcentaje.Visible = true;

        }

        private void backgroundWorker1_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {

        }
    }
}
