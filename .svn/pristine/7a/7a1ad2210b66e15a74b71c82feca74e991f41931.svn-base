// -----------------------------------------------------------------------
// <copyright file="asientosc.cs" company="">
// TODO: Update copyright text.
// </copyright>
// -----------------------------------------------------------------------

namespace Datos.Contable
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using Entities;


    /// <summary>
    /// TODO: Update summary.
    /// </summary>
    public class asientosc
    {
        public asientosc()
        {
        }

        public bool ExisteAsiento(string documento, int codcompr)
        {
            using (siimnEntities bd = new siimnEntities())
            {
                try
                {
                    var query = bd.movimi.Where(mov => mov.documento == documento && mov.asientofijo == false && mov.codigcomprob == codcompr);
                    if (query.Count() > 0)
                    {
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }
        }

        public List<movimi> DevolverAsiento(int codcompr, string documento)
        {
            using (siimnEntities bd = new siimnEntities())
            {
                try
                {
                    var query = bd.movimi.Include("maenits").Include("maeconta").Where(mov => mov.documento == documento && mov.asientofijo == false && mov.codigcomprob == codcompr);
                    if (query.Count() > 0)
                    {
                        return query.ToList();
                    }
                    else
                    {
                        return null;
                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }
        }

        public List<movimi> CargarAsiento(string documento)
        {
            List<movimi> asiento = new List<movimi>();
            using (siimnEntities bd = new siimnEntities())
            {
                try
                {
                    asiento = bd.movimi.Include("centro").Include("comprobante").Include("maeconta").Where(mov => mov.documento == documento).ToList();
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }

            return asiento;
        }

        public bool GuardarAsiento(List<movimi> asiento)
        {
            using (siimnEntities bd = new siimnEntities())
            {
                try
                {
                    foreach (movimi item in asiento)
                    {
                        bd.movimi.Add(item);
                    }

                    bd.SaveChanges();
                    return true;
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }
        }

        public List<movimi> CargarTodosAsientos()
        {
            List<movimi> AsiFijo = new List<movimi>();
            try
            {
                using (siimnEntities bd = new siimnEntities())
                {
                    var query = bd.movimi.Include("centro").Include("maenits").Include("maeconta").Include("comprobante").
                        Where(mov => mov.asientofijo == true).OrderBy(mov => mov.idmovimiento).ToList();
                    AsiFijo = query;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return AsiFijo;
        }

        public List<movimi> CargarAsientoFijo(string documento)
        {
            List<movimi> asiento = new List<movimi>();
            using (siimnEntities bd = new siimnEntities())
            {
                try
                {
                    asiento = bd.movimi.Include("centro").Include("comprobante").Include("maeconta").Include("maenits").Where(mov => mov.documento == documento && mov.asientofijo == true).ToList();
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }

            return asiento;
        }

        public List<movimi> DevolverNumeroAsientoFijo()
        {
            List<movimi> asientos = new List<movimi>();
            using (siimnEntities bd = new siimnEntities())
            {
                var query1 = bd.movimi.Where(mov => mov.asientofijo == true).Count();
                if (query1 > 0)
                {
                    asientos = bd.movimi.Where(mov => mov.asientofijo == true).ToList();
                }
            }

            return asientos;
        }

        public bool ExisteAsientoFijo(string documento)
        {
            bool result = false;
            using (siimnEntities bd = new siimnEntities())
            {
                var query = bd.movimi.Where(mov => mov.documento == documento && mov.asientofijo == true).Count();
                result = query > 0 ? true : false;
            }

            return result;
        }

        public int DevolverIdAsiento(string documento, int codcompr)
        {
            int idasiento = 1;
            using (siimnEntities bd = new siimnEntities())
            {
                var query = bd.movimi.Where(mov => mov.documento == documento && mov.codigcomprob == codcompr).First();
                // idasiento = query.idasiento;
            }

            return idasiento;
        }

        /* public bool ActualizarAsiento(List<movimi> asiento, int cantidad)
          {
            /*  bool result = false;
              using (siimnEntities bd = new siimnEntities())
              {
                  try
                  {
                      int idasi = asiento[0].idasiento;
                      var query = bd.movimi.Where(mov => mov.idasiento == idasi).ToList();
                      if (query.Count == cantidad)
                      {
                          foreach (movimi item in asiento)
                          {
                              var queryig = bd.movimi.Where(mov => mov.idasiento == item.idasiento).First();
                              queryig.fecha = item.fecha;
                              queryig.fechaact = item.fechaact;
                              queryig.codigcomprob = item.codigcomprob;
                              queryig.documento = item.documento;
                              queryig.cuenta = item.cuenta;
                              queryig.detalle = item.detalle;
                              queryig.idcentro = item.idcentro;
                              queryig.idnit = item.idnit;
                              queryig.referencia = item.referencia;
                              queryig.valordebito = item.valordebito;
                              queryig.valorcredito = item.valorcredito;
                              bd.SaveChanges();
                          }
                          result = true;
                      }
                      if (query.Count > cantidad)
                      {
                          for (int i = 0; i < cantidad; i++)
                          {
                              var queryig = bd.movimi.Where(mov => mov.idasiento == asiento[i].idasiento).First();
                              queryig.fecha = asiento[i].fecha;
                              queryig.fechaact = asiento[i].fechaact;
                              queryig.codigcomprob = asiento[i].codigcomprob;
                              queryig.documento = asiento[i].documento;
                              queryig.cuenta = asiento[i].cuenta;
                              queryig.detalle = asiento[i].detalle;
                              queryig.idcentro = asiento[i].idcentro;
                              queryig.idnit = asiento[i].idnit;
                              queryig.referencia = asiento[i].referencia;
                              queryig.valordebito = asiento[i].valordebito;
                              queryig.valorcredito = asiento[i].valorcredito;
                              bd.SaveChanges();
                          }

                          for (int i = query.Count - cantidad; i < query.Count; i++)
                          {
                              bd.movimi.Add(asiento[i]);
                          }
                          result = true;
                      }
                      if (query.Count < cantidad)
                      {
                          for (int i = cantidad - query.Count; i < cantidad; i++)
                          {
                              var queryig = bd.movimi.Where(mov => mov.idasiento == asiento[i].idasiento).First();
                              bd.movimi.Remove(queryig);
                          }

                          for (int i = 0; i < query.Count; i++)
                          {
                              var queryig = bd.movimi.Where(mov => mov.idasiento == asiento[i].idasiento).First();
                              queryig.fecha = asiento[i].fecha;
                              queryig.fechaact = asiento[i].fechaact;
                              queryig.codigcomprob = asiento[i].codigcomprob;
                              queryig.documento = asiento[i].documento;
                              queryig.cuenta = asiento[i].cuenta;
                              queryig.detalle = asiento[i].detalle;
                              queryig.idcentro = asiento[i].idcentro;
                              queryig.idnit = asiento[i].idnit;
                              queryig.referencia = asiento[i].referencia;
                              queryig.valordebito = asiento[i].valordebito;
                              queryig.valorcredito = asiento[i].valorcredito;
                              bd.SaveChanges();
                          }
                          result = true;
                      }
                  }
                  catch (Exception ex)
                  {
                      throw ex;
                  }
              }

              return result;
          }/*/

        public int DevolverIdAsientoCon()
        {
            int idasi = 0;
            using (siimnEntities bd = new siimnEntities())
            {
                // idasi = bd.movimi.ToList().Max(mov => mov.idasiento);
            }

            return idasi;
        }

        /*  public List<mes> CargarMeses()
          {
              List<mes> meses = new List<mes>();
              using (siimnEntities bd = new siimnEntities())
              {
                  meses = bd.mes.ToList();
              }

              return meses;
          }*/

      /*  public int ActualizarTodosAsientos(DateTime fechade, DateTime fechahasta)
        {
           /* int cantasientos = 0;
            using (siimnEntities bd = new siimnEntities())
            {
                try
                {
                    var items = bd.movimi.Where(mov => mov.actualizado == false && (mov.fecha.Year >= fechade.Year && mov.fecha.Month >= fechade.Month && mov.fecha.Day >=
                        fechade.Day && mov.fecha.Year <= fechahasta.Year && mov.fecha.Month <= fechahasta.Month && mov.fecha.Day <= fechahasta.Day)).ToList();
                    foreach (var item in items)
                    {
                        saldoscuentas saldos = new saldoscuentas();
                        var query = bd.saldoscuentas.Where(sal => sal.cuenta == item.cuenta && sal.anio.Equals(item.anio) && sal.mes == item.mes).Count();
                        if (query > 0)
                        {
                            var query1 = bd.saldoscuentas.Where(sal => sal.cuenta == item.cuenta && sal.anio.Equals(item.anio) && sal.mes == item.mes).First();
                            query1.saldocuenta = item.valordebito + item.valorcredito;
                            bd.SaveChanges();
                        }
                        else
                        {
                            saldos.cuenta = item.cuenta;
                            saldos.anio = short.Parse(item.anio);
                            saldos.mes = item.mes;
                            saldos.saldocuenta = item.valordebito + item.valorcredito;
                            bd.saldoscuentas.Add(saldos);
                            bd.SaveChanges();
                        }

                        cantasientos++;
                        item.actualizado = true;
                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }

            return cantasientos;
        }*/

      /*  public bool ActualizarUnAsiento(List<movimi> assiento)
        {
           /* bool actualizar = false;
            using (siimnEntities bd = new siimnEntities())
            {
                try
                {
                    var query = bd.movimi.Where(mov => mov.actualizado == false && mov.codigcomprob == comprob && mov.documento == numeroas).First();
                    saldoscuentas saldos = new saldoscuentas();
                    var query1 = bd.saldoscuentas.Where(sal => sal.cuenta == query.cuenta && sal.anio.Equals(query.anio) && sal.mes == query.mes).Count();
                    if (query1 > 0)
                    {
                        var query2 = bd.saldoscuentas.Where(sal => sal.cuenta == query.cuenta && sal.anio.Equals(query.anio) && sal.mes == query.mes).First();
                        query2.saldocuenta = query.valordebito + query.valorcredito;
                        bd.SaveChanges();
                    }
                    else
                    {
                        saldos.cuenta = query.cuenta;
                        saldos.anio = short.Parse(query.anio);
                        saldos.mes = query.mes;
                        saldos.saldocuenta = query.valordebito + query.valorcredito;
                        bd.saldoscuentas.Add(saldos);
                        bd.SaveChanges();
                    }
                    query.actualizado = true;
                    actualizar = true;
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }

            return actualizar;
        }*/

        /*public bool ExMovimiSinAct(short anio, int mesde, int meshasta, int compro, int docde, int dochasta, bool todcom, bool toddoc)
        {
            bool existe = false;
            try
            {
                using (siimnEntities bd = new siimnEntities())
                {
                    int cant = 0;
                    if (todcom == false && toddoc == false)
                    {
                        cant = bd.movimi.Where(mov => mov.anio == anio && mov.mes >= mesde && mov.mes <= meshasta
                                 && mov.codigcomprob == compro && mov.documento >= docde && mov.documento <= dochasta && mov.actualizado == false).Count();
                    }
                    else if (todcom == true && toddoc == false)
                    {
                        cant = bd.movimi.Where(mov => mov.anio == anio && mov.idmes >= mesde && mov.idmes <= meshasta
                                && mov.documento >= docde && mov.documento <= dochasta && mov.actualizado == false).Count();
                    }
                    else if (todcom == false && toddoc == true)
                    {
                        cant = bd.movimi.Where(mov => mov.anio == anio && mov.idmes >= mesde && mov.idmes <= meshasta
                                && mov.codicomp == compro && mov.actualizado == false).Count();
                    }
                    else if (todcom == true && toddoc == true)
                    {
                        cant = bd.movimi.Where(mov => mov.anio == anio && mov.idmes >= mesde && mov.idmes <= meshasta && mov.actualizado == false).Count();
                    }

                    if (cant > 0)
                    {
                        existe = true;
                    }

                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            
            return existe;
        }*/

        /* public List<movimi> DevolverAsientoSinAct(string anio, int mesde, int meshasta, int compro, int docde, int dochasta, bool todcom, bool toddoc)
         {
             List<movimi> asiento = new List<movimi>();
             try
             {
                 using (siimnEntities bd = new siimnEntities())
                 {
                     if (todcom == false && toddoc == false)
                     {
                         asiento = bd.movimi.Include("compania").Include("comprobante").Include("maenits").Where(mov => mov.anio == anio && mov.idmes >= mesde && mov.idmes <= meshasta
                                  && mov.codicomp == compro && mov.documento >= docde && mov.documento <= dochasta && mov.actualizado == false).ToList();
                     }
                     else if (todcom == true && toddoc == false)
                     {
                         asiento = bd.movimi.Include("compania").Include("comprobante").Include("maenits").Where(mov => mov.anio == anio && mov.idmes >= mesde && mov.idmes <= meshasta
                                 && mov.documento >= docde && mov.documento <= dochasta && mov.actualizado == false).ToList();
                     }
                     else if (todcom == false && toddoc == true)
                     {
                         asiento = bd.movimi.Include("compania").Include("comprobante").Include("maenits").Where(mov => mov.anio == anio && mov.idmes >= mesde && mov.idmes <= meshasta
                                 && mov.codicomp == compro && mov.actualizado == false).ToList();
                     }
                     else if (todcom == true && toddoc == true)
                     {
                         asiento = bd.movimi.Include("compania").Include("comprobante").Include("maenits").Where(mov => mov.anio == anio && mov.idmes >= mesde && mov.idmes <= meshasta && mov.actualizado == false).ToList();
                     }
                 }
             }
             catch (Exception ex)
             {
                 throw ex;
             }

             return asiento;
         }*/

        public string DevolverConsecutivo(int codcomprobante)
        {
            using (siimnEntities bd = new siimnEntities())
            {
                try
                {
                    var query = bd.movimi.Where(mov => mov.codigcomprob == codcomprobante);
                    if (query.Count() > 0)
                    {
                        int documento = int.Parse(query.ToList().Max(mov => mov.documento)) + 1;
                        return Convert.ToString(documento);
                    }
                    else
                    {
                        return "1";
                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }
        }
    }
}
