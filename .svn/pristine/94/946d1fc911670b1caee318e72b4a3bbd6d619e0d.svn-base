////*********************************************************
//
//    <copyright file="frmpresupuesto.cs" company="Marketing Software de Colombia LTDA">
//    @Autor Ingrid Sutachan
//    @fecha 01 marzo 2014
//    </copyright>
//
////*********************************************************
namespace App.Forms.Contable
{
    using System;
    using System.Collections.Generic;
    using System.Windows.Forms;
    using Entities.Types;
    using Negocios.Contable;

    /// <summary>
    /// Clase formulario presupuesto
    /// </summary>
    public partial class Frmpresupuesto : Form
    {
        /// <summary>
        /// instacia el presupuesto de la capa negocios
        /// </summary>
        private Presupueston negocioPresupuesto;

        /// <summary>
        /// instacia la cuenta de la capa negocios
        /// </summary>
        private Cuentan negocioCuenta;

        /// <summary>
        /// instacia la cuenta de la capa negocios
        /// </summary>
        private Centron negocioCentro;


        /// <summary>
        /// Almacena boton da el usuario click
        /// </summary>
        private string botonclick;

        /// <summary>
        /// variable para manejar cierre de formulario
        /// </summary>
        private bool usrClose;

        private Funciones funtions;

        /// <summary>
        /// Initializes a new instance of the <see cref="Frmpresupuesto"/> class.
        /// </summary>
        public Frmpresupuesto()
        {
            this.negocioPresupuesto = new Presupueston();
            this.negocioCuenta = new Cuentan();
            this.negocioCentro = new Centron();
            this.funtions = new Funciones();
            this.InitializeComponent();
            this.AutoCompletar();
            this.AutoCompletarCentro();
        }

        #region VISALIZACION
        /// <summary>
        /// campos y nombres de Meses visibles
        /// </summary>
        private void MesesActivos()
        {
            txtenero.Enabled = true;
            txtfebrero.Enabled = true;
            txtmarzo.Enabled = true;
            txtabril.Enabled = true;
            txtmayo.Enabled = true;
            txtjunio.Enabled = true;
            txtjulio.Enabled = true;
            txtagosto.Enabled = true;
            txtsepti.Enabled = true;
            txtoctu.Enabled = true;
            txtnov.Enabled = true;
            txtdici.Enabled = true;
        }

        /// <summary>
        /// Campos vacios 
        /// </summary>
        private void CamposVacios()
        {
            txtano.Text = string.Empty;
            txtnumcuent.Text = string.Empty;
            txtnomcue.Text = string.Empty;
            txt_centro.Text = string.Empty;
            txt_descripcentro.Text = string.Empty;
            txtenero.Text = "0";
            txtfebrero.Text = "0";
            txtmarzo.Text = "0";
            txtabril.Text = "0";
            txtmayo.Text = "0";
            txtjunio.Text = "0";
            txtjulio.Text = "0";
            txtagosto.Text = "0";
            txtsepti.Text = "0";
            txtoctu.Text = "0";
            txtnov.Text = "0";
            txtdici.Text = "0";
            dgvpresu.Visible = false;
        }

        /// <summary>
        /// Nada visible.
        /// </summary>
        private void NadaVisible()
        {
            txtenero.Enabled = false;
            txtfebrero.Enabled = false;
            txtmarzo.Enabled = false;
            txtabril.Enabled = false;
            txtmayo.Enabled = false;
            txtjunio.Enabled = false;
            txtjulio.Enabled = false;
            txtagosto.Enabled = false;
            txtsepti.Enabled = false;
            txtoctu.Enabled = false;
            txtnov.Enabled = false;
            txtdici.Enabled = false;
            pnltitulo.Enabled = false;
            dgvpresu.Enabled = false;
            pnlpresbus.Enabled = false;
        }

        private void AutoCompletar()
        {
            var items = this.negocioCuenta.CargarCuenta();
            AutoCompleteStringCollection cuentas = new AutoCompleteStringCollection();
            foreach (var item in items)
            {
                cuentas.Add(item.Cuenta);
            }
            txtnumcuent.AutoCompleteCustomSource = cuentas;
        }

        private void AutoCompletarCentro()
        {
            var items = this.negocioCentro.CargarCentro();
            AutoCompleteStringCollection centro = new AutoCompleteStringCollection();
            foreach (var item in items)
            {
                centro.Add(Convert.ToString(item.Codcentro));
            }
            txt_centro.AutoCompleteCustomSource = centro;
        }
        private void DefinicionDataGrid()
        {
            dgvpresu.Columns[0].HeaderText = "Año";
            dgvpresu.Columns[4].HeaderText = "Mes";
            dgvpresu.Columns[2].HeaderText = "Cuenta";
            dgvpresu.Columns[3].HeaderText = "Presupuesto";
            dgvpresu.Columns[4].DisplayIndex = 1;
            dgvpresu.Columns[1].Visible = false;
            dgvpresu.Columns[3].Width = 150;
        }
        /// <summary>
        /// Cargar tabla en datagridview
        /// </summary>
        /// <param name="presup">presupuesto que se carga</param>
        /// <returns>booleano que rectifica si el presupuesto existe o no existe</returns>
        private bool CargarTabla(PresupDataSource presup)
        {
            List<PresupDataSource> datasSource = new List<PresupDataSource>();
            bool result = false;
            try
            {
                datasSource = this.negocioPresupuesto.DevolverPresu(presup.Anio, presup.Cuenta, presup.IdCentro);
            }
            catch (Exception ex)
            {
                MessageBox.Show("Se presento un error. " + ex.Message);
            }

            if (datasSource.Count > 0)
            {
                dgvpresu.DataSource = datasSource;
                this.DefinicionDataGrid();
                result = true;
            }
            else
            {
                MessageBox.Show("El presupuesto No Existe", "No Existe", MessageBoxButtons.OK);
                result = false;
            }

            return result;
        }

        #endregion

        #region BOTONES CLICK

        /// <summary>
        /// Handles the Click event of the Btnbuscar control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="EventArgs"/> instance containing the event data.</param>
        private void Btnbuscar_Click(object sender, EventArgs e)
        {
            this.NadaVisible();
            this.CamposVacios();
            txtano.Enabled = true;
            txtnumcuent.Enabled = true;
            txt_centro.Enabled = true;
            dgvpresu.Visible = false;
            pnlpresbus.Visible = false;
            this.botonclick = "buscar";
        }

        /// <summary>
        /// Handles the 1 event of the Btnagregar_Click control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="EventArgs"/> instance containing the event data.</param>
        private void Btnagregar_Click_1(object sender, EventArgs e)
        {
            this.NadaVisible();
            this.CamposVacios();
            txtano.Enabled = true;
            pnlPresupuesto.Focus();
            txtano.Focus();
            txtnumcuent.Enabled = true;
            txt_centro.Enabled = true;
            this.botonclick = "agregar";
            btnguardar.Enabled = true;
            pnltitulo.Visible = true;
        }

        /// <summary>
        /// Handles the Click event of the Btn_buscarcuentas control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="EventArgs"/> instance containing the event data.</param>
        private void Btn_buscarcuentas_Click(object sender, EventArgs e)
        {
            Frmvisualizarcuentas frm = new Frmvisualizarcuentas();
            frm.Show();
        }

        private void Btn_editar_Click(object sender, EventArgs e)
        {
            this.NadaVisible();
            this.CamposVacios();
            lblano.Visible = true;
            txtano.Enabled = true;
            txtnumcuent.Enabled = true;
            btnguardar.Visible = true;
            this.botonclick = "editar";
        }

        /// <summary>
        /// Handles the Click event of the Btn_eliminar control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="EventArgs"/> instance containing the event data.</param>
        private void Btn_eliminar_Click(object sender, EventArgs e)
        {
            this.NadaVisible();
            this.CamposVacios();
            txtano.Enabled = true;
            txtnumcuent.Enabled = true;
            this.botonclick = "eliminar";
        }



        #endregion

        #region EVENTOS TEXTBOX

        private void tabenter_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Enter)
            {
                if (txtano.Text.Length == 4 && int.Parse(txtano.Text) > 1900 && int.Parse(txtano.Text) < 2100)
                {
                    e.Handled = true;
                    SendKeys.Send("{TAB}");
                }
                else
                {
                    e.Handled = false;
                    MessageBox.Show("El año no es valido", "ERROR", MessageBoxButtons.OK);
                }
            }
            else
            {
                e.Handled = this.funtions.ValidacionNumerico(e).Handled;
            }
        }

        private void txtnumcuent_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                if (!txtano.Text.Equals(string.Empty))
                {
                    string result = this.funtions.ValidaCuentaoNombre(txtnumcuent.Text);
                    txtnomcue.Text = result;
                    if (result.Equals("Cuenta General") || result.Equals("Cuenta no Existente"))
                    {
                        e.Handled = true;
                    }
                    else
                    {
                        e.Handled = false;
                        SendKeys.Send("{TAB}");
                    }
                }
                else
                {
                    MessageBox.Show("Digite el año", "ERROR", MessageBoxButtons.OK);
                }
            }
        }

        private void tabenterguardar_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Enter)
            {
                e.Handled = true;
                EventArgs eve = new EventArgs();
                this.Btnguardar_Click(sender, eve);
            }
        }
        #endregion

        #region CERRAR FORMULARIO
        /// <summary>
        /// Handles the FormClosing event of the Frmpresupuesto control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="FormClosingEventArgs"/> instance containing the event data.</param>
        private void Frmpresupuesto_FormClosing(object sender, FormClosingEventArgs e)
        {
            if (!this.usrClose)
            {
                DialogResult result = MessageBox.Show("Esta seguro que desea salir?", "SALIR", MessageBoxButtons.YesNo);
                if (result == DialogResult.No)
                {
                    e.Cancel = true;
                }
            }
        }

        /// <summary>
        /// Handles the Click event of the Salircuent control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="EventArgs"/> instance containing the event data.</param>
        private void Salircuent_Click(object sender, EventArgs e)
        {
            DialogResult result = MessageBox.Show("Esta seguro que desea salir?", "SALIR", MessageBoxButtons.YesNo);
            if (result == DialogResult.Yes)
            {
                this.usrClose = true;
                this.Close();
            }
        }
        #endregion

        #region GUARDAR DATOS

        private List<PresupDataSource> GuardarDatos()
        {
            List<string> meses = new List<string>();
            meses.Add(txtenero.Text);
            meses.Add(txtfebrero.Text);
            meses.Add(txtmarzo.Text);
            meses.Add(txtabril.Text);
            meses.Add(txtmayo.Text);
            meses.Add(txtjunio.Text);
            meses.Add(txtjulio.Text);
            meses.Add(txtagosto.Text);
            meses.Add(txtsepti.Text);
            meses.Add(txtoctu.Text);
            meses.Add(txtnov.Text);
            meses.Add(txtdici.Text);
            List<PresupDataSource> presupuesto = new List<PresupDataSource>();
            for (int i = 1; i <= 12; i++)
            {
                PresupDataSource presup = new PresupDataSource();
                presup.Anio = short.Parse(txtano.Text);
                presup.Cuenta = txtnumcuent.Text;
                presup.Mes = Convert.ToString(i);
                presup.IdCentro = int.Parse(txt_centro.Text);
                presup.Presupuesto = meses[i - 1].Equals(string.Empty) ? 0 : int.Parse(meses[i - 1]);
                presupuesto.Add(presup);
            }

            return presupuesto;
        }

        private void AfterGuardar(List<PresupDataSource> presupus)
        {
            this.CamposVacios();
            this.NadaVisible();
            pnltitulo.Visible = false;
            pnlpresbus.Visible = true;
            dgvpresu.Visible = true;
            PresupDataSource pres = new PresupDataSource();
            pres.Anio = presupus[1].Anio;
            pres.Cuenta = presupus[1].Cuenta;
            this.CargarTabla(pres);
        }
        /// <summary>
        /// Handles the Click event of the Btnguardar control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="EventArgs"/> instance containing the event data.</param>
        private void Btnguardar_Click(object sender, EventArgs e)
        {
            if (this.ValidarGuardar())
            {
                List<PresupDataSource> presupus = new List<PresupDataSource>();
                presupus = this.GuardarDatos();
                if (this.botonclick.Equals("agregar"))
                {
                    try
                    {
                        bool guardo = this.negocioPresupuesto.GuardarPresup(presupus);
                        if (guardo)
                        {
                            MessageBox.Show("El presupuesto ha sido guardado", "Guardar", MessageBoxButtons.OK);
                        }
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show("Se presento un error. " + ex.Message);
                    }
                }

                if (this.botonclick.Equals("editar"))
                {
                    try
                    {
                        bool guardo = this.negocioPresupuesto.UpdatePresupuesto(presupus);
                        MessageBox.Show("El presupuesto ha sido actualizado", "Actualizar", MessageBoxButtons.OK);

                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show("Se presento un error. " + ex.Message);
                    }
                }
                this.AfterGuardar(presupus);
            }
            else
            {
                MessageBox.Show("Debe ingresar todos los campos", "ERROR", MessageBoxButtons.OK);
            }
        }

        #endregion

        #region VALIDACIONES

        private bool ValidarGuardar()
        {
            bool result = txtano.Text.Equals(string.Empty) || txtnumcuent.Text.Equals(string.Empty) ? false : true;
            return result;
        }


        #endregion

        #region  METODOS BOTONES

        /// <summary>
        /// Agregars the presupuesto.
        /// </summary>
        private void AgregarPresupuesto()
        {
            if (!txtnumcuent.Text.Equals(string.Empty) && !txt_centro.Text.Equals(string.Empty))
            {
                List<PresupDataSource> datasSource = new List<PresupDataSource>();
                try
                {
                    datasSource = this.negocioPresupuesto.DevolverPresu(short.Parse(txtano.Text), txtnumcuent.Text, int.Parse(txt_centro.Text));
                }
                catch (Exception ex)
                {
                    MessageBox.Show("Se presento un error. " + ex.Message);
                }

                if (datasSource.Count == 0)
                {
                    this.MesesActivos();
                    btnguardar.Enabled = true;
                }
                else
                {
                    MessageBox.Show("El presupuesto ya existe", "Advetencia", MessageBoxButtons.OK);
                    txtano.Text = string.Empty;
                    txtnumcuent.Text = string.Empty;
                    txtnomcue.Text = string.Empty;
                    txt_centro.Text = string.Empty;
                    txt_descripcentro.Text = string.Empty;
                }
            }
            else
            {
                txtnomcue.Visible = false;
                txtnumcuent.Text = string.Empty;
            }
        }

        /// <summary>
        /// Editars the presupuesto.
        /// </summary>
        private void EditarPresupuesto()
        {

            List<PresupDataSource> datasSource = new List<PresupDataSource>();
            try
            {
                datasSource = this.negocioPresupuesto.DevolverPresu(short.Parse(txtano.Text), txtnumcuent.Text, int.Parse(txt_centro.Text));
            }
            catch (Exception ex)
            {
                MessageBox.Show("Se presento un error. " + ex.Message);
            }

            if (datasSource.Count > 0)
            {
                pnltitulo.Visible = true;
                this.MesesActivos();
                txtenero.Text = this.DevuelvePresupusto(datasSource[0].Presupuesto);
                txtfebrero.Text = this.DevuelvePresupusto(datasSource[1].Presupuesto);
                txtmarzo.Text = this.DevuelvePresupusto(datasSource[2].Presupuesto);
                txtabril.Text = this.DevuelvePresupusto(datasSource[3].Presupuesto);
                txtmayo.Text = this.DevuelvePresupusto(datasSource[4].Presupuesto);
                txtjunio.Text = this.DevuelvePresupusto(datasSource[5].Presupuesto);
                txtjulio.Text = this.DevuelvePresupusto(datasSource[6].Presupuesto);
                txtagosto.Text = this.DevuelvePresupusto(datasSource[7].Presupuesto);
                txtsepti.Text = this.DevuelvePresupusto(datasSource[8].Presupuesto);
                txtoctu.Text = this.DevuelvePresupusto(datasSource[9].Presupuesto);
                txtnov.Text = this.DevuelvePresupusto(datasSource[10].Presupuesto);
                txtdici.Text = this.DevuelvePresupusto(datasSource[11].Presupuesto);
            }
            else
            {
                MessageBox.Show("El presupuesto no existe", "No Existe", MessageBoxButtons.OK);
                txtnumcuent.Text = string.Empty;
                txtnomcue.Text = string.Empty;
                txtnomcue.Text = string.Empty;
                txt_centro.Text = string.Empty;
                txt_descripcentro.Text = string.Empty;
                pnltitulo.Visible = false;
            }

        }

        /// <summary>
        /// Eliminars the presupuesto.
        /// </summary>
        private void EliminarPresupuesto()
        {
            PresupDataSource presup = new PresupDataSource();
            presup.Anio = short.Parse(txtano.Text);
            presup.Cuenta = txtnumcuent.Text;
            presup.IdCentro = int.Parse(txt_centro.Text);
            bool result1 = this.CargarTabla(presup);
            if (result1)
            {
                pnlpresbus.Visible = true;
                dgvpresu.Visible = true;
                DialogResult result = MessageBox.Show("Esta seguro que desea eliminar?", "ELIMINAR", MessageBoxButtons.YesNo);
                if (result == DialogResult.Yes)
                {
                    try
                    {
                        if (this.negocioPresupuesto.EliminarPresupuesto(presup))
                        {
                            MessageBox.Show("El presupuesto fue eliminado", "ERROR", MessageBoxButtons.OK);
                        }

                        this.NadaVisible();
                        this.CamposVacios();
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show("Se presento un error. " + ex.Message);
                    }
                }
            }
            else
            {
                MessageBox.Show("El presupuesto no Existe", "No Existe", MessageBoxButtons.OK);
                txtano.Text = string.Empty;
                txtnumcuent.Text = string.Empty;
                txtnomcue.Text = string.Empty;
            }
        }


        /// <summary>
        /// Buscars the presupuesto.
        /// </summary>
        private void BuscarPresupuesto()
        {
            PresupDataSource presup = new PresupDataSource();
            int valor = 0;
            string cuenta = !int.TryParse(txtnumcuent.Text, out valor) ? txtnomcue.Text : txtnumcuent.Text;
            presup.Anio = short.Parse(txtano.Text);
            presup.Cuenta = cuenta;
            bool result = false;
            result = this.CargarTabla(presup);
            if (result)
            {
                dgvpresu.Visible = true;
            }
            else
            {
                txtano.Text = string.Empty;
                txtnumcuent.Text = string.Empty;
                txtnomcue.Text = string.Empty;
            }
        }

        /// <summary>
        /// Devuelve presupusto
        /// </summary>
        /// <param name="cantidad">cantidad de presupuesto</param>
        /// <returns>la cantidad de presupuesto en string</returns>
        private string DevuelvePresupusto(decimal cantidad)
        {
            string cant = !cantidad.Equals(0) ? Convert.ToString(cantidad) : "0";
            return cant;
        }
        #endregion

        private void txt_centro_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                if (!txtnumcuent.Text.Equals(string.Empty))
                {
                    bool result = this.negocioCentro.ExisteCentro(int.Parse(txt_centro.Text));
                    if (result)
                    {
                        txt_descripcentro.Text = this.negocioCentro.DevolverNombre(int.Parse(txt_centro.Text));
                        e.Handled = true;
                        SendKeys.Send("{TAB}");
                        if (this.botonclick.Equals("agregar"))
                        {
                            this.AgregarPresupuesto();
                        }
                        else if (this.botonclick.Equals("editar"))
                        {
                            this.EditarPresupuesto();
                        }
                        else if (this.botonclick.Equals("eliminar"))
                        {
                            this.EliminarPresupuesto();
                        }
                        else if (this.botonclick.Equals("buscar"))
                        {
                            this.BuscarPresupuesto();
                        }
                    }
                    else
                    {
                        e.Handled = false;
                        MessageBox.Show("El centro no existe", "ERROR", MessageBoxButtons.OK);
                    }
                }
                else
                {
                    MessageBox.Show("Digite la cuenta", "ERROR", MessageBoxButtons.OK);
                }
            }
        }

        private void txtnumcuent_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar != (char)Keys.Enter)
            {
                e.Handled = this.funtions.ValidacionNumerico(e).Handled;
            }
        }

        private void txt_centro_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar != (char)Keys.Enter)
            {
                e.Handled = this.funtions.ValidacionNumerico(e).Handled;
            }
        }



    }
}