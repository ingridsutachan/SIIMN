////*********************************************************
//
//    <copyright file="comprobantesn.cs" company="Marketing Software de Colombia LTDA">
//    @Autor Ingrid Sutachan
//    @fecha 01 marzo 2014
//    </copyright>
//
////*********************************************************
namespace Negocios.Contable
{
    using System;
    using System.Collections.Generic;
    using Datos.Contable;
    using Entities;
    using Entities.Types;

    /// <summary>
    /// TODO: Update summary.
    /// </summary>
    public class Comprobantesn
    {
        /// <summary>
        /// instancia para la capa de datos
        /// </summary>
        private Comprobantesc persistencia;

        /// <summary>
        /// Initializes a new instance of the <see cref="Comprobantesn"/> class.
        /// </summary>
        public Comprobantesn()
        {
            this.persistencia = new Comprobantesc();
        }

        /// <summary>
        /// Cargar datos
        /// </summary>
        /// <returns>Lista de comprobantes que se encuentra en la tabla de la bd</returns>
        public List<ComprobantesDataSource> CargarDatos()
        {
            List<ComprobantesDataSource> compro = new List<ComprobantesDataSource>();
            try
            {
                var items = this.persistencia.CargarComprobantes();
                foreach (var item in items)
                {
                    ComprobantesDataSource comp = new ComprobantesDataSource();
                    comp.Codigo = item.codicomp;
                    comp.Descricompro = item.descomp;
                    comp.Consecutivo = item.consecu;
                    comp.Numerosigui = item.numsigui;
                    comp.Codigootra = item.codotra;
                    compro.Add(comp);
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return compro;
        }

        /// <summary>
        /// Guardar comprobante 
        /// </summary>
        /// <param name="comprobante">el comprobante a guardar</param>
        public bool GuardarComp(ComprobantesDataSource comprobante)
        {
            bool result = false;
            comprobante compro = new comprobante();
            compro.codicomp = comprobante.Codigo;
            compro.descomp = comprobante.Descricompro;
            compro.codotra = comprobante.Codigootra;
            compro.consecu = comprobante.Consecutivo;
            compro.numsigui = comprobante.Numerosigui;
            try
            {
                result = this.persistencia.GuardarComprob(compro);
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return result;
        }

        /// <summary>
        /// Devolver datos
        /// </summary>
        /// <param name="idcomp">identificador de comprobante</param>
        /// <returns>comprante respectivo</returns>
        public ComprobantesDataSource DevolverDatos(int idcomp)
        {
            ComprobantesDataSource compr = new ComprobantesDataSource();
            try
            {
                var item = this.persistencia.DevolverDatos(idcomp);
                compr.Codigo = item.codicomp;
                compr.Descricompro = item.descomp;
                compr.Consecutivo = item.consecu;
                compr.Numerosigui = item.numsigui;
                compr.Codigootra = item.codotra;
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return compr;
        }

        /// <summary>
        /// Actualizar comprobante
        /// </summary>
        /// <param name="comp">comprobante a actualizar</param>
        public bool ActualizarCompro(ComprobantesDataSource comprobante)
        {
            bool result = false;
            comprobante compro = new comprobante();
            compro.codicomp = comprobante.Codigo;
            compro.descomp = comprobante.Descricompro;
            compro.codotra = comprobante.Codigootra;
            compro.consecu = comprobante.Consecutivo;
            compro.numsigui = comprobante.Numerosigui;
            try
            {
                result = this.persistencia.ActualizaCompr(compro);
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return result;
        }

        /// <summary>
        /// Eliminar comprobante
        /// </summary>
        /// <param name="idcompro">identificador del comprobante a eliminar</param>
        /// <returns>booleano que rectifica si se elimino el comprobante</returns>
        public bool EliminarCompro(int idcompro)
        {
            bool result = false;
            try
            {
                result = this.persistencia.EliminarCompro(idcompro);
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return result;
        }

        /// <summary>
        /// Buscar comprobante
        /// </summary>
        /// <param name="buscar">texto a buscar</param>
        /// <returns>listo de registros que contienen el texto buscado</returns>
        public List<ComprobantesDataSource> BuscarCompro(string buscar)
        {
            List<ComprobantesDataSource> compro = new List<ComprobantesDataSource>();
            try
            {
                var items = this.persistencia.BuscarComprobante(buscar);
                foreach (var item in items)
                {
                    ComprobantesDataSource com = new ComprobantesDataSource();
                    com.Codigo = item.codicomp;
                    com.Descricompro = item.descomp;
                    com.Consecutivo = item.consecu;
                    com.Numerosigui = item.numsigui;
                    com.Codigootra = item.codotra;
                    compro.Add(com);
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return compro;
        }

        public int DevolverId(string nombre)
        {
            int id;
            try
            {
                id = this.persistencia.DevolverId(nombre);
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return id;
        }

        public bool ExisteComproNomb(string nombre)
        {
            bool existe = false;
            try
            {
                existe = this.persistencia.ExisteComproNomb(nombre);
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return existe;
        }

        public bool ExisteComproId(int id)
        {
            bool existe = false;
            try
            {
                existe = this.persistencia.ExisteComproId(id);
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return existe;
        }

        public object CargarDatosCombo()
        {
            List<ComprobantesDataSource> compro = new List<ComprobantesDataSource>();
            try
            {
                var items = this.persistencia.CargarComprobantes();
                foreach (var item in items)
                {
                    ComprobantesDataSource comp = new ComprobantesDataSource();
                    comp.Codigo = item.codicomp;
                    comp.Descricompro = item.codicomp+". "+item.descomp;
                    comp.Consecutivo = item.consecu;
                    comp.Numerosigui = item.numsigui;
                    comp.Codigootra = item.codotra;
                    compro.Add(comp);
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return compro;
        }

        public bool DevolverConsecutivo(int codcompro)
        {
            bool consec;
            try
            {
                consec= this.persistencia.DevolverConsecutivo(codcompro);
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return consec;
        }
    }
}
