////*********************************************************
//
//    <copyright file="Form_ReporteLibros.cs" company="Marketing Software de Colombia LTDA">
//    @Autor Ingrid Sutachan
//    @fecha 14 abril 2015
//    </copyright>
//
////*********************************************************
namespace App.Forms.Contable.Reportes
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Data;
    using System.Drawing;
    using System.Linq;
    using System.Text;
    using System.Windows.Forms;
    using Entities.Types;
    using Negocios.Contable;
    using Negocios.General;
    using App.Forms.Contable.Reportes.Types;

    public partial class Form_ReporteLibros : Form
    {
        private Form_LibroMayor form_LibroMayor;

        private string tipo;

        private List<SaldosCuentasDataSource> balance;

        private string fecha;

        private bool encabezado;

        private Empresan negocioEmpresa;

        private Cuentan negocioCuenta;

        private asientosn negocioAsiento;

        private Parametrosn negocioParametro;

        public Form_ReporteLibros()
        {
            InitializeComponent();
        }

        public Form_ReporteLibros(Form_LibroMayor form_LibroMayor, string tipol, List<SaldosCuentasDataSource> balance, string fechal, bool enca)
        {
            // TODO: Complete member initialization
            this.negocioCuenta = new Cuentan();
            this.negocioEmpresa = new Empresan();
            this.negocioAsiento = new asientosn();
            this.negocioParametro = new Parametrosn();
            this.form_LibroMayor = form_LibroMayor;
            this.tipo = tipol;
            this.balance = balance;
            this.fecha = fechal;
            this.encabezado = enca;
            this.InitializeComponent();
            this.GenerarReporte(this.tipo);
        }

        #region EVENTOS FORMULARIO

        protected override bool ProcessCmdKey(ref Message msg, Keys keyData)
        {
            if (keyData == Keys.Escape)
            {
                this.Close();
                return true;
            }

            return base.ProcessCmdKey(ref msg, keyData);
        }

        private void Form_ReporteLibros_FormClosing(object sender, FormClosingEventArgs e)
        {
            if (this.tipo.Equals("mayor"))
            {
                this.form_LibroMayor.SalirReporte();
            }
        }

        #endregion

        private void GenerarReporte(string cualasi)
        {
            EmpresaDataSource empresa = new EmpresaDataSource();
            List<CuentaDataSource> cuenta = new List<CuentaDataSource>();
            List<SaldosCuentasDataSource> saldos = new List<SaldosCuentasDataSource>();
            saldos = this.balance;
            try
            {
                empresa = this.negocioEmpresa.DevolverDatosEmpresa(Program.compa);
            }
            catch (Exception ex)
            {
                MessageBox.Show("SE PRESENTO UN ERROR" + ex.Message, "ERROR", MessageBoxButtons.OK);
            }

            switch (cualasi)
            {
                case "mayor":

                    this.Text = "LIBRO MAYOR";
                    crystal_ReporteInv.Visible = true;
                    List<LibroDiarioDataSourceReports> balanceRe = new List<LibroDiarioDataSourceReports>();
                    for (int i = 0; i < saldos.Count(); i++)
                    {
                        LibroDiarioDataSourceReports balanceR = new LibroDiarioDataSourceReports();
                        if (this.encabezado)
                        {
                            balanceR.MesyAnio = "MES : " + saldos[i].Mes + "   AÑO : " + saldos[i].Anio;
                            balanceR.Compania = empresa.Nombrecia + " - " + empresa.NombreSucursal;
                            balanceR.FechaAct = "FECHA: " + this.fecha;
                            balanceR.Titulo = "LIBRO MAYOR ";
                        }
                        else
                        {
                            balanceR.Titulo = null;
                        }

                        balanceR.Cuenta = saldos[i].Cuenta + " " + saldos[i].NombreCuenta;
                        balanceR.SaldoAnteriorDebito = saldos[i].SaldoAnterior>0 ? saldos[i].SaldoAnterior :0;
                        balanceR.SaldoAnteriorCredito = saldos[i].SaldoAnterior < 0 ? saldos[i].SaldoAnterior : 0;
                        balanceR.Valorcredito = saldos[i].ValorCredito;
                        balanceR.Valordebito = saldos[i].ValorDebito;
                        balanceR.SaldoActualCredito = saldos[i].SaldoActual < 0 ? saldos[i].SaldoActual : 0;
                        balanceR.SaldoActualDebito = saldos[i].SaldoActual > 0 ? saldos[i].SaldoActual : 0;
                        balanceRe.Add(balanceR);
                    }

                    ReporteLibroMayor reportelibro = new ReporteLibroMayor();
                    reportelibro.SetDataSource(balanceRe);
                    crystal_ReporteInv.ReportSource = reportelibro;
                    this.Size = new Size(1003, 583);
                    crystal_ReporteInv.Size = new Size(987, 519);
                    break;

            }
        }
    }
}
