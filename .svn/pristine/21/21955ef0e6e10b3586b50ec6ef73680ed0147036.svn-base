
namespace App.Forms.Contable.Reportes
{
    using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using Negocios.Contable;
    using Entities.Types;


    public partial class Form_ReporteCentro : Form
    {
        private Frmcentro frmcentro;

        private Centron negocioCentro;

        public Form_ReporteCentro()
        {
            this.InitializeComponent();
        }

        public Form_ReporteCentro(Frmcentro frmcentro)
        {
            // TODO: Complete member initialization
            this.frmcentro = frmcentro;
            this.InitializeComponent();
            this.negocioCentro = new Centron();
            this.GenerarReporte();
        }


        #region METODOS FORMULARIO

        protected override bool ProcessCmdKey(ref Message msg, Keys keyData)
        {
            if (keyData == Keys.Escape)
            {
                EventArgs eve = new EventArgs();
                object sender = new object();
                this.Close();
                return true;
            }

            return base.ProcessCmdKey(ref msg, keyData);
        }

        private void Form_ReporteCentro_FormClosing(object sender, FormClosingEventArgs e)
        {
            this.frmcentro.BotonesHabit();
        }

        #endregion

        #region REPORTE

        private void GenerarReporte()
        {
            List<CentroDataSource> centro = new List<CentroDataSource>();
            centro = this.negocioCentro.CargarCentro();

          /*  //List<Cent> comprobR = new List<ComprobantesDataSourceReporte>();
            this.Size = new Size(840, 566);
            foreach (ComprobantesDataSourceShow item in centro)
            {
                ComprobantesDataSourceReporte comproR = new ComprobantesDataSourceReporte();
                comproR.Codigo = item.Codigo ?? default(int);
                comproR.Descricompro = item.Descricompro;
                comproR.Consecutivo = item.Consecutivo == true ? "SI" : "NO";
                comproR.Numerosigui = item.Numerosigui ?? default(int);
                comproR.Codigootra = item.Codigootra;
                comprobR.Add(comproR);
            }

            ReporteComprobante reportcompr = new ReporteComprobante();
            reportcompr.SetDataSource(comprobR);
            crystal_reportnits.ReportSource = reportcompr;*/
        }

        #endregion
    }
}
