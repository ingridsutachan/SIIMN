////*********************************************************
//
//    <copyright file="frmnits.cs" company="Marketing Software de Colombia LTDA">
//    @Autor Ingrid Sutachan
//    @fecha 01 marzo 2014
//    </copyright>
//
////*********************************************************
namespace App.Forms.Contable
{
    using System;
    using System.Collections.Generic;
    using System.Windows.Forms;
    using Entities.Types;
    using Negocios.Contable;
    using Reportes;

    /// <summary>
    /// Clase de formulario de nits
    /// </summary>
    public partial class Frmnits : Form
    {
        /// <summary>
        /// instacia nit de la capa negocios
        /// </summary>
        private Nitsn negocioNit;

        /// <summary>
        /// instacia tipos de nit de la capa negocios
        /// </summary>
        private Tiponitn negocioTipos;

        /// <summary>
        /// instacia ubicacion de la capa negocios
        /// </summary>
        private Ubicacionn negociosUbicacion;

        /// <summary>
        /// identificador de nit 
        /// </summary>
        private int idnit;

        /// <summary>
        /// variable para manejar cierre de formulario
        /// </summary>
        private bool usrClose;

        private Funciones funtions;

        private Form_VisualContable frmguar;

        private Form_ReporteNits frmreporguar;

        /// <summary>
        /// Initializes a new instance of the <see cref="Frmnits"/> class.
        /// </summary>
        public Frmnits()
        {
            this.InitializeComponent();
            this.negocioNit = new Nitsn();
            this.negocioTipos = new Tiponitn();
            this.negociosUbicacion = new Ubicacionn();
            this.funtions = new Funciones();
            this.frmguar = new Form_VisualContable();
            this.frmreporguar = new Form_ReporteNits();
        }

        /// <summary>
        /// Habilita los botones 
        /// </summary>
        public void BotonesHabit()
        {
            btn_buscar.Enabled = true;
            btn_editar.Enabled = true;
            btn_eliminar.Enabled = true;
            btn_nuevo.Enabled = true;
            btn_imprimir.Enabled = true;
        }

        #region TECLAS DE ACCESO

        /// <summary>
        /// Teclas de Acceso a los botones
        /// </summary>
        /// <param name="msg">A <see cref="T:System.Windows.Forms.Message" />mensaje del proceso</param>
        /// <param name="keyData">un <see cref="T:System.Windows.Forms.Keys" /> valor tecla que recibe.</param>
        /// <returns>
        /// true si las teclas correspondiente son ingresadas
        /// </returns>
        protected override bool ProcessCmdKey(ref Message msg, Keys keyData)
        {
            if (keyData == (Keys.Control | Keys.N))
            {
                EventArgs eve = new EventArgs();
                object sender = new object();
                if (btn_nuevo.Enabled == true)
                {
                    this.Btn_nuevo_Click(sender, eve);
                    return true;
                }
            }
            else if (keyData == (Keys.Control | Keys.E))
            {
                EventArgs eve = new EventArgs();
                object sender = new object();
                if (btn_editar.Enabled == true)
                {
                    this.Btn_editar_Click(sender, eve);
                    return true;
                }

                return true;
            }
            else if (keyData == (Keys.Control | Keys.B))
            {
                EventArgs eve = new EventArgs();
                object sender = new object();
                if (btn_buscar.Enabled == true)
                {
                    this.Btn_buscar_Click(sender, eve);
                    return true;
                }
            }
            else if (keyData == (Keys.Control | Keys.D))
            {
                EventArgs eve = new EventArgs();
                object sender = new object();
                if (btn_eliminar.Enabled == true)
                {
                    this.Btn_eliminar_Click(sender, eve);
                    return true;
                }
            }
            else if (keyData == (Keys.Control | Keys.P))
            {
                EventArgs eve = new EventArgs();
                object sender = new object();
                if (btn_imprimir.Enabled == true)
                {
                    this.Btn_imprimir_Click(sender, eve);
                    return true;
                }
            }
            else if (keyData == (Keys.Control | Keys.G))
            {
                EventArgs eve = new EventArgs();
                object sender = new object();
                if (btn_guardar.Enabled == true)
                {
                    this.Btn_guardar_Click(sender, eve);
                    return true;
                }
            }
            else if (keyData == (Keys.Control | Keys.Z))
            {
                EventArgs eve = new EventArgs();
                object sender = new object();
                if (btn_cancelar.Enabled == true)
                {
                    this.Btn_cancelar_Click(sender, eve);
                    return true;
                }
            }
            else if (keyData == Keys.Escape)
            {
                EventArgs eve = new EventArgs();
                object sender = new object();
                if (btn_salir.Enabled == true)
                {
                    this.Btn_salir_Click(sender, eve);
                    return true;
                }
            }

            return base.ProcessCmdKey(ref msg, keyData);
        }

        #endregion

        #region VISUALIZACION

        /// <summary>
        /// Cargar los paises en el combobox
        /// </summary>
        private void CargarCombos()
        {
            List<PaisDataSource> pais = new List<PaisDataSource>();
            List<TiposNitsDataSource> tiponit = new List<TiposNitsDataSource>();
            try
            {
                pais = this.negociosUbicacion.CargarPais();
                tiponit = this.negocioTipos.CargarTipos();
                combo_pais.DataSource = pais;
                combo_pais.ValueMember = "idpais";
                combo_pais.DisplayMember = "nombrepais";
                combo_pais.SelectedIndex = 2;
                combo_tipo.DataSource = tiponit;
                combo_tipo.ValueMember = "idtipo";
                combo_tipo.DisplayMember = "nombretipo";
            }
            catch (Exception ex)
            {
                MessageBox.Show("SE PRESENTO UN ERROR." + ex.Message, "ERROR");
            }
        }

        /// <summary>
        /// Cargar los departamentos en el combobox
        /// </summary>
        /// <param name="idpais">The idpais.</param>
        private void CargarDeptos(string idpais)
        {
            try
            {
                combo_dpto.DataSource = this.negociosUbicacion.CargarDeptos(idpais);
                combo_dpto.ValueMember = "iddpto";
                combo_dpto.DisplayMember = "nombredpto";
            }
            catch (Exception ex)
            {
                MessageBox.Show("Se presento un error. " + ex.Message);
            }
        }

        /// <summary>
        /// Cargar las ciudades en el combobox
        /// </summary>
        /// <param name="iddepto">The iddepto.</param>
        private void CargarCiudades(int iddepto)
        {
            try
            {
                combo_ciudad.DataSource = this.negociosUbicacion.CargarCiudad(iddepto);
                combo_ciudad.ValueMember = "idciudad";
                combo_ciudad.DisplayMember = "nombreciudad";
            }
            catch (Exception ex)
            {
                MessageBox.Show("Se presento un error. " + ex.Message);
            }
        }

        /// <summary>
        /// Campos limpios
        /// </summary>
        private void CamposLimpios()
        {
            txt_numeronit.Text = string.Empty;
            txt_digito.Text = string.Empty;
            txt_nombre.Text = string.Empty;
            txt_actividad.Text = string.Empty;
            txt_direccion.Text = string.Empty;
            combo_pais.Text = string.Empty;
            combo_dpto.Text = string.Empty;
            combo_tipo.Text = string.Empty;
            combo_ciudad.Text = string.Empty;
            txt_telefono.Text = string.Empty;
            txt_celular.Text = string.Empty;
            txt_email.Text = string.Empty;
        }

        /// <summary>
        /// Campos activos.
        /// </summary>
        private void CamposActivos()
        {
            txt_numeronit.Enabled = true;
            txt_digito.Enabled = true;
            txt_nombre.Enabled = true;
            txt_actividad.Enabled = true;
            txt_direccion.Enabled = true;
            combo_tipo.Enabled = true;
            combo_pais.Enabled = true;
            combo_dpto.Enabled = true;
            combo_ciudad.Enabled = true;
            txt_telefono.Enabled = true;
            txt_celular.Enabled = true;
            txt_email.Enabled = true;
        }

        /// <summary>
        /// Campos desactivos.
        /// </summary>
        private void CamposInactivos()
        {
            txt_numeronit.Enabled = false;
            txt_digito.Enabled = false;
            txt_nombre.Enabled = false;
            txt_actividad.Enabled = false;
            txt_direccion.Enabled = false;
            combo_tipo.Enabled = false;
            combo_pais.Enabled = false;
            combo_dpto.Enabled = false;
            combo_ciudad.Enabled = false;
            txt_telefono.Enabled = false;
            txt_celular.Enabled = false;
            txt_email.Enabled = false;
            menu_botones.Focus();
        }

        #endregion

        #region BOTONES CLICK

        /// <summary>
        /// Handles the Click event of the Btn_nuevo control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="EventArgs"/> instance containing the event data.</param>
        private void Btn_nuevo_Click(object sender, EventArgs e)
        {
            this.CamposActivos();
            this.CargarCombos();
            this.BotonesInhabilitados();
            this.txt_numeronit.Focus();
        }

        /// <summary>
        /// Handles the Click event of the Btn_editar control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="EventArgs"/> instance containing the event data.</param>
        private void Btn_editar_Click(object sender, EventArgs e)
        {
            Form_VisualContable frm = new Form_VisualContable("nit", "editar", this);
            this.frmguar = frm;
            frm.MdiParent = this.MdiParent;
            frm.Show();
            this.BotonesInhab();

        }

        /// <summary>
        /// Handles the Click event of the Btn_eliminar control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="EventArgs"/> instance containing the event data.</param>
        private void Btn_eliminar_Click(object sender, EventArgs e)
        {
            Form_VisualContable frm = new Form_VisualContable("nit", "eliminar", this);
            this.frmguar = frm;
            frm.MdiParent = this.MdiParent;
            frm.Show();
            this.BotonesInhab();
            this.CamposLimpios();
            this.CamposInactivos();
        }

        /// <summary>
        /// Handles the Click event of the Btn_buscar control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="EventArgs"/> instance containing the event data.</param>
        private void Btn_buscar_Click(object sender, EventArgs e)
        {
            Form_VisualContable frm = new Form_VisualContable("nit", "buscar", this);
            this.frmguar = frm;
            frm.Show();
            this.BotonesInhab();
        }

        private void Btn_imprimir_Click(object sender, EventArgs e)
        {
            Form_ReporteNits frm = new Form_ReporteNits(this);
            this.frmreporguar = frm;
            frm.MdiParent = this.MdiParent;
            frm.Show();
            this.BotonesInhab();
        }

        private void Btn_guardar_Click(object sender, EventArgs e)
        {
            if (this.Validarguardar())
            {
                /*CuentaDataSource cuenta = new CuentaDataSource();
                cuenta = this.GuardarDatos();
                bool guardo = false;
                if (txtnumcu.ReadOnly == false)
                {
                    try
                    {
                        guardo = this.negocioCuenta.GuardarCuenta(cuenta);
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show("SE PRESENTO UN ERROR. " + ex.Message, "ERROR");
                    }
                }
                else
                {
                    try
                    {
                        guardo = this.negocioCuenta.ActualizarCuenta(cuenta);
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show("SE PRESENTO UN ERROR. " + ex.Message, "ERROR");
                    }
                }*/

                if (false)
                {
                    this.CamposLimpios();
                    this.CamposInactivos();
                    MessageBox.Show("LA CUENTA FUE GUARDADA EXITOSAMENTE", "GUARDAR", MessageBoxButtons.OK);
                    this.BotonesHabit();
                    btn_cancelar.Enabled = false;
                }
            }
        }

        private void Btn_cancelar_Click(object sender, EventArgs e)
        {
            DialogResult result = MessageBox.Show("ESTA SEGURO QUE DESEA CANCELAR?", "CANCELAR", MessageBoxButtons.YesNo);
            if (result == DialogResult.Yes)
            {
                this.CamposLimpios();
                this.CamposInactivos();
                this.BotonesHabit();
                this.btn_cancelar.Enabled = false;
            }
        }

        private void Btn_salir_Click(object sender, EventArgs e)
        {
            DialogResult result = MessageBox.Show("ESTA SEGURO QUE DESEA SALIR?", "SALIR", MessageBoxButtons.YesNo);
            if (result == DialogResult.Yes)
            {
                this.usrClose = true;
                this.Close();
                this.frmguar.Close();
                this.frmreporguar.Close();
            }
        }

        private bool Validarguardar()
        {
            throw new NotImplementedException();
        }

        #endregion

        #region VALIDACIONES

        /// <summary>
        /// Existe nit.
        /// </summary>
        /// <param name="nits">nit a verificar</param>
        /// <returns>booleano que rectifica si existe nit</returns>
        private bool ExisteNit(string nits)
        {
            bool existe = false;
            try
            {
                existe = this.negocioNit.ExisteNit(nits);
            }
            catch (Exception ex)
            {
                MessageBox.Show("Se presento un error. " + ex.Message);
            }

            return existe;
        }

        /// <summary>
        /// Validas the guardar.
        /// </summary>
        /// <returns>booleano si guarda o no</returns>
        private bool ValidaGuardar()
        {
            bool result = false;
            if (!txt_numeronit.Text.Equals(string.Empty) && !txt_digito.Text.Equals(string.Empty)
                && !txt_nombre.Text.Equals(string.Empty) && !txt_actividad.Text.Equals(string.Empty)
                && !combo_pais.Text.Equals(string.Empty) && !combo_dpto.Text.Equals(string.Empty)
                && !combo_ciudad.Text.Equals(string.Empty) && !combo_tipo.Text.Equals(string.Empty)
                && !txt_celular.Text.Equals(string.Empty))
            {
                if (!txt_email.Text.Equals(string.Empty))
                {
                    if (txt_email.Text.Contains(".") && txt_email.Text.Contains("@"))
                    {
                        result = true;
                    }
                    else
                    {
                        MessageBox.Show("Debe ingresar una cuenta de correo valida", "ERROR", MessageBoxButtons.OK);
                        result = false;
                    }
                }
                else
                {
                    result = true;
                }
            }
            else
            {
                result = false;
                MessageBox.Show("Debe llenar todos los campos requeridos", "ERROR", MessageBoxButtons.OK);
            }

            return result;
        }

        #endregion

        #region EVENTOS TEXTBOX COMBOS

        /// <summary>
        /// Handles the SelectionChangeCommitted event of the Combo_pais control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="EventArgs"/> instance containing the event data.</param>
        private void Combo_pais_SelectionChangeCommitted(object sender, EventArgs e)
        {
            string idpais = combo_pais.SelectedValue.ToString();
            this.CargarDeptos(idpais);
        }

        /// <summary>
        /// Handles the SelectionChangeCommitted event of the Combo_dpto control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="EventArgs"/> instance containing the event data.</param>
        private void Combo_dpto_SelectionChangeCommitted(object sender, EventArgs e)
        {
            int idepto = int.Parse(combo_dpto.SelectedValue.ToString());
            this.CargarCiudades(idepto);
        }

        /// <summary>
        /// Handles the CellClick event of the Dgvnit control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="DataGridViewCellEventArgs"/> instance containing the event data.</param>
        /* private void Dgvnit_CellClick(object sender, DataGridViewCellEventArgs e)
         {
             if (dgvnit.SelectedCells.Count > 0)
             {
                 btn_editar.Enabled = true;
                 btn_eliminar.Enabled = true;
             }
         }*/

        #endregion

        #region SALIR FORMULARIO

        /// <summary>
        /// Handles the FormClosing event of the Frmnits control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="FormClosingEventArgs"/> instance containing the event data.</param>
        private void Frmnits_FormClosing(object sender, FormClosingEventArgs e)
        {
            if (!this.usrClose)
            {
                DialogResult result = MessageBox.Show("Esta seguro que desea salir?", "SALIR", MessageBoxButtons.YesNo);
                if (result == DialogResult.No)
                {
                    e.Cancel = true;
                }
            }
        }

        #endregion

        #region ENTER TAB

        private void EnterTabVal_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Enter)
            {
                e.Handled = true;
                SendKeys.Send("{TAB}");
            }
            else
            {
                e.Handled = this.funtions.ValidacionNumerico(e).Handled;
            }
        }

        private void EnterTab_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Enter)
            {
                e.Handled = true;
                SendKeys.Send("{TAB}");
            }
        }

        #endregion

        private void CargarDatos()
        {
            int id = 1/*int.Parse(dgvnit.CurrentRow.Cells[0].Value.ToString())*/;
            NitsDataSource nits = new NitsDataSource();
            btn_guardar.Enabled = true;

            try
            {
                nits = this.negocioNit.DevolverNits(id);
            }
            catch (Exception ex)
            {
                MessageBox.Show("Se presento un error. " + ex.Message);
            }

            this.CamposActivos();
            this.CargarCombos();
            //this.CargarDeptos(nits.Idpais);
            //  this.CargarCiudades(nits.Iddepartamento);
            this.idnit = nits.Idnit;
            txt_numeronit.Text = nits.Nit;
            txt_digito.Text = nits.Digito;
            combo_tipo.SelectedItem = nits.Nombretipo;
            txt_nombre.Text = nits.Nombrenit;
            txt_actividad.Text = nits.ActividadEconomica;
            // combo_pais.SelectedValue = nits.Idpais;
            //    combo_dpto.SelectedValue = nits.Iddepartamento;
            combo_ciudad.SelectedValue = nits.Idciudad;
            txt_direccion.Text = nits.Direccion;
            txt_telefono.Text = nits.Telefono;
            txt_celular.Text = nits.Celular;
            txt_email.Text = nits.Email;
        }

        #region GUARDAR DATOS
        /// <summary>
        /// Guardar datos en nits
        /// </summary>
        /// <returns>nit guardado</returns>
        private NitsDataSource GuardarDatos()
        {
            NitsDataSource nits = new NitsDataSource();
            nits.Nit = txt_numeronit.Text;
            nits.Digito = txt_digito.Text;
            nits.Tiponit = combo_tipo.SelectedValue.ToString();
            // nits.Compania_nits = Program.compa;
            nits.Nombrenit = txt_nombre.Text;
            nits.ActividadEconomica = txt_actividad.Text;
            //  nits.Idpais = combo_pais.SelectedValue.ToString();
            //   nits.Iddepartamento = int.Parse(combo_dpto.SelectedValue.ToString());
            nits.Idciudad = int.Parse(combo_ciudad.SelectedValue.ToString());
            nits.Direccion = txt_direccion.Text;
            nits.Telefono = txt_telefono.Text;
            nits.Celular = txt_celular.Text;
            nits.Email = txt_email.Text;
            return nits;
        }

        private void BotonesInhab()
        {
            btn_buscar.Enabled = false;
            btn_editar.Enabled = false;
            btn_eliminar.Enabled = false;
            btn_nuevo.Enabled = false;
            btn_cancelar.Enabled = false;
            btn_imprimir.Enabled = false;
        }

        private void BotonesInhabilitados()
        {
            this.btn_guardar.Enabled = false;
            this.btn_editar.Enabled = false;
            this.btn_eliminar.Enabled = false;
            this.btn_imprimir.Enabled = false;
            this.btn_buscar.Enabled = false;
            this.btn_cancelar.Enabled = true;
            this.btn_nuevo.Enabled = false;
        }

        #endregion
    }
}
