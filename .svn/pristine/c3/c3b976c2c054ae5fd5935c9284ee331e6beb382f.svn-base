////*********************************************************
//
//    <copyright file="frmcomprobantes.cs" company="Marketing Software de Colombia LTDA">
//    @Autor Ingrid Sutachan
//    @fecha 01 marzo 2014
//    </copyright>
//
////*********************************************************
namespace Datos.Contable
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using Entities;

    /// <summary>
    /// TODO: Update summary.
    /// </summary>
    public class tributariosc
    {
        public tributariosc()
        {
        }

        public List<maetribut> CargarTributario()
        {
            List<maetribut> tribut = new List<maetribut>();
            using (siimnEntities bd = new siimnEntities())
            {
                try
                {
                    tribut = bd.maetribut.ToList();
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }

            return tribut;
        }

        public bool GuardarTribut(maetribut tribut)
        {
            bool result = false;
            using (siimnEntities bd = new siimnEntities())
            {
                try
                {
                    bd.maetribut.Add(tribut);
                    bd.SaveChanges();
                    result = true;
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }

            return result;
        }

        public maetribut DevolverDatos(string codigo)
        {
            maetribut tribut = new maetribut();
            using (siimnEntities bd = new siimnEntities())
            {
                try
                {
                    var query = bd.maetribut.Where(tip => tip.codigotrib == codigo).First();
                    tribut = query;
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }

            return tribut;
        }

        public bool ActualizarTribut(maetribut tribut)
        {
            bool result = false;
            using (siimnEntities bd = new siimnEntities())
            {
                try
                {
                    var query = bd.maetribut.Where(mae => mae.codigotrib == tribut.codigotrib).First();
                    query.codigotrib = tribut.codigotrib;
                    query.nombre = tribut.nombre;
                    query.tope = tribut.tope;
                    query.nomnit = tribut.nomnit;
                    query.nittope = tribut.nittope;
                    bd.SaveChanges();
                    result = true;
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }

            return result;
        }

        public bool EliminarTributario(string codigo)
        {
            bool result = false;
            using (siimnEntities bd = new siimnEntities())
            {
                try
                {
                    var query = bd.maetribut.Where(mae => mae.codigotrib == codigo).First();
                    bd.maetribut.Remove(query);
                    bd.SaveChanges();
                    result = true;
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }

            return result;
        }

        public List<maetribut> BuscarTributario(string buscar)
        {
            List<maetribut> tribut = new List<maetribut>();
            using (siimnEntities bd = new siimnEntities())
            {
                try
                {
                    var query = bd.maetribut.Where(mae => mae.codigotrib.Contains(buscar) || mae.nombre.Contains(buscar) || mae.nomnit.Contains(buscar)).ToList();
                    tribut = query;
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }

            return tribut;
        }
    }
}
