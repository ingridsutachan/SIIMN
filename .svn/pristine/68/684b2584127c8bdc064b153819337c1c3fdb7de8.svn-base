using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using Negocios.Contable;
using Entities.Types;
using System.Globalization;

namespace App.Forms.Contable
{
    public partial class frm_asientos : Form
    {

        private Comprobantesn negocio_Comprobante;

        private Cuentan negocio_Cuenta;

        private Centron negocio_Centro;

        private Nitsn negocio_Nit;

        private asientosn negocio_Asiento;

        private int activo = 0;

        private Funciones funtions;

        private string botonclick;

        private int idasiento;

        private int Rowclick;

        private int cant;

        private string botonasi;

        public frm_asientos()
        {
            this.negocio_Comprobante = new Comprobantesn();
            this.negocio_Cuenta = new Cuentan();
            this.negocio_Centro = new Centron();
            this.negocio_Nit = new Nitsn();
            this.negocio_Asiento = new asientosn();
            this.funtions = new Funciones();
            InitializeComponent();
            this.CargarComprobantes();
            this.CargarMeses();
            this.CargarTabla();
            this.AutoCompletar();
        }

        #region VISUALIZACION

        public void CargarDatosAsientoFijo(string documento)
        {
            List<AsientoDataSource> AsientoFijo = new List<AsientoDataSource>();
            AsientoFijo = this.negocio_Asiento.CargarAsientoFijo(documento);
            this.CamposActivos();
            this.AutoCompletar();
            this.botonclick = "agregar";
            txt_numeroasiento.Text = Convert.ToString(AsientoFijo[0].Documento);
            cbx_comprobante.SelectedValue = AsientoFijo[0].Codcompr;
            for (int i = 0; i < AsientoFijo.Count(); i++)
            {

                dgv_asientos.Rows.Add(AsientoFijo[i].Cuenta, AsientoFijo[i].Descripcion, AsientoFijo[i].Idcentro,
                   AsientoFijo[i].nit, AsientoFijo[i].Cheque, AsientoFijo[i].Valordebito.ToString("0,0.00", CultureInfo.InvariantCulture), AsientoFijo[i].Valorcredito.ToString("0,0.00", CultureInfo.InvariantCulture));
            }
            cbx_comprobante.Focus();
            this.Totales();
            checked_asientofijo.Enabled = false;

        }

        private void CargarTabla()
        {
            dgv_asientos.Columns[0].Width = 120;
            dgv_asientos.Columns[1].Width = 270;
            dgv_asientos.Columns[2].Width = 120;
            dgv_asientos.Columns[3].Width = 120;
            dgv_asientos.Columns[4].Width = 130;
            dgv_asientos.Columns[5].Width = 144;
            dgv_asientos.Columns[6].Width = 144;
        }

        private void CamposVacios()
        {
            dtime_fecha.Enabled = false;
            txt_numeroasiento.Enabled = false;
            cbx_comprobante.Enabled = false;
            txt_cuenta.Text = string.Empty;
            txt_centro.Text = "0";
            txt_nit.Text = string.Empty;
            txt_nit.Enabled = false;
            txt_centro.Enabled = false;
            txt_referencia.Text = string.Empty;
            txt_detalle.Text = string.Empty;
            txt_debito.Text = "0";
            txt_credito.Text = "0";
            txt_nomcentro.Text = string.Empty;
            txt_nomcuenta.Text = string.Empty;
            txt_nomnit.Text = string.Empty;
            txt_numeroasiento.Text = string.Empty;
            checked_asientofijo.Checked = false;
        }

        private void CargarComprobantes()
        {
            try
            {
                cbx_comprobante.DataSource = this.negocio_Comprobante.CargarDatosCombo();
                cbx_comprobante.ValueMember = "Codigo";
                cbx_comprobante.DisplayMember = "Descricompro";
            }
            catch (Exception ex)
            {
                MessageBox.Show("Se presento un error. " + ex.Message);
            }
        }


        private void CargarMeses()
        {
            try
            {
                //cbx_mes.DataSource = this.negocio_Asiento.CargarMeses();
                cbx_mes.ValueMember = "Idmes";
                cbx_mes.DisplayMember = "NombreMes";
            }
            catch (Exception ex)
            {
                MessageBox.Show("Se presento un error. " + ex.Message);
            }
        }

        private void AutoCompletar()
        {
            CuentaDataSource cuenta = new CuentaDataSource();
            var items = this.negocio_Cuenta.CargarCuenta();
            AutoCompleteStringCollection cuentas = new AutoCompleteStringCollection();
            foreach (var item in items)
            {
                cuentas.Add(item.Cuenta);
            }

            txt_cuenta.AutoCompleteCustomSource = cuentas;
            CentroDataSource centro = new CentroDataSource();
            var itecen = this.negocio_Centro.CargarCentro();
            AutoCompleteStringCollection centros = new AutoCompleteStringCollection();
            foreach (var item in itecen)
            {
                centros.Add(Convert.ToString(item.Codcentro));
            }

            txt_centro.AutoCompleteCustomSource = centros;
            NitsDataSource nit = new NitsDataSource();
            var itenit = this.negocio_Nit.CargarNits();
            AutoCompleteStringCollection nits = new AutoCompleteStringCollection();
            foreach (var item in itenit)
            {
                nits.Add(item.Nit + "-" + item.Digito);
            }

            txt_nit.AutoCompleteCustomSource = nits;
        }

        private void CamposActivos()
        {
            dgv_asientos.Enabled = true;
            dtime_fecha.Enabled = true;
            txt_numeroasiento.Enabled = true;
            cbx_comprobante.Enabled = true;
            checked_asientofijo.Enabled = true;
            txt_anio.Enabled = true;
            cbx_mes.Enabled = true;
            txt_anio.Text = DateTime.Now.Year.ToString();
        }
        private void CamposInactivos()
        {
            dtime_fecha.Enabled = false;
            cbx_comprobante.Enabled = false;
            txt_numeroasiento.Enabled = false;
            txt_detalle.Enabled = false;
            txt_centro.Enabled = false;
            txt_nit.Enabled = false;
            txt_referencia.Enabled = false;
            txt_credito.Enabled = false;
            txt_debito.Enabled = false;
            btn_buscar.Visible = false;
            txt_cuenta.Enabled = false;
        }
        #endregion

        private void Totales()
        {
            decimal debito = 0;
            for (int i = 0; i < dgv_asientos.RowCount; i++)
            {
                debito = debito + decimal.Parse(this.QuitarCeros(this.DevolverValor(dgv_asientos.Rows[i].Cells[5].Value.ToString())));
            }
            decimal credito = 0;
            for (int i = 0; i < dgv_asientos.RowCount; i++)
            {
                credito = credito + decimal.Parse(this.QuitarCeros(this.DevolverValor(dgv_asientos.Rows[i].Cells[6].Value.ToString())));
            }

            txt_totaldebito.Text = debito.ToString("0,0.00", CultureInfo.InvariantCulture);
            txt_totalcredito.Text = credito.ToString("0,0.00", CultureInfo.InvariantCulture);
            decimal descuadre = debito + credito;
            txt_descuadre.Text = descuadre.ToString("0,0.00", CultureInfo.InvariantCulture);
        }

        private string QuitarCeros(string cadsincomas)
        {
            string cadenasin = string.Empty;
            string[] separators = { "." };
            string[] numero = cadsincomas.Split(separators, StringSplitOptions.RemoveEmptyEntries);
            int tamano = numero.Count();
            if (!numero[tamano - 1].Equals("00"))
            {
                cadenasin = cadsincomas;
            }
            else
            {
                for (int i = 0; i < tamano - 1; i++)
                {
                    cadenasin = cadenasin + numero[i];
                }
            }

            return cadenasin;
        }

        private int DevolverNits(string nit)
        {
            int identinit = 0;
            string ultimo = txt_nit.Text.Substring(txt_nit.Text.Length - 1);
            char[] delimiterChars = { '-' };
            string[] nitv = nit.Split(delimiterChars);
            int tamano = nit.Count();
           /* if (nit.Contains("-") && tamano > 3)
            {
                try
                {
                    bool existe = this.negocio_Nit.ExisteNitAsi(nitv[0], nitv[1]);
                    if (existe)
                    {
                        identinit = this.negocio_Nit.DevolverNombre(nitv[0]);
                    }
                    else
                    {
                        identinit = 0;
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show("Se presento un error. " + ex.Message);
                }
            }
            else
            {
                identinit = 0;
            }*/

            return identinit;
        }

        #region GUARDAR DATOS

        private bool ValidarCamposVacios()
        {
            bool result = false;
            if (!dtime_fecha.Text.Equals(string.Empty) && !txt_numeroasiento.Text.Equals(string.Empty) && !cbx_comprobante.ValueMember.Equals(string.Empty) &&
                !txt_cuenta.Text.Equals(string.Empty) && !txt_detalle.Text.Equals(string.Empty) && !txt_debito.Text.Equals(string.Empty) &&
                !txt_credito.Text.Equals(string.Empty))
            {
                if (txt_centro.Enabled)
                {
                    if (!txt_centro.Text.Equals(string.Empty))
                    {
                        result = true;
                    }
                    else
                    {
                        result = false;
                        MessageBox.Show("Debe ingresar todos los campos", "ERROR", MessageBoxButtons.OK);
                    }
                }
                else
                {
                    result = true;
                }

                if (txt_nit.Enabled)
                {
                    if (!txt_nit.Text.Equals(string.Empty))
                    {
                        result = true;
                    }
                    else
                    {
                        result = false;
                        MessageBox.Show("Debe ingresar todos los campos", "ERROR", MessageBoxButtons.OK);
                    }
                }
                else
                {
                    result = true;
                }

            }
            else
            {
                result = false;
                MessageBox.Show("Debe ingresar todos los campos", "ERROR", MessageBoxButtons.OK);
            }

            return result;
        }

        private List<AsientoDataSource> guardarAsiento()
        {
            List<AsientoDataSource> asientos = new List<AsientoDataSource>();
            int idasi = this.negocio_Asiento.DevolverIdAsientoCon();
            for (int i = 0; i < dgv_asientos.RowCount; i++)
            {
                AsientoDataSource asi = new AsientoDataSource();
                if (this.botonclick.Equals("editar"))
                {
                    asi.IdAsiento = this.idasiento;
                    asi.fechaactua = DateTime.Now;
                }
                if (this.botonclick.Equals("agregar"))
                {
                    asi.IdAsiento = idasi;
                    asi.fechagraba = DateTime.Now;
                }
                asi.Idmes = cbx_mes.SelectedValue.ToString();
                asi.anio = short.Parse(txt_anio.Text);
                asi.Idcompania = Program.compa;
                asi.usuario = Program.iduser;
                asi.Imprime = false;
                asi.Actualizado = false;
                asi.Fecha = dtime_fecha.Value;
                asi.Documento = txt_numeroasiento.Text;
                asi.Codcompr = int.Parse(cbx_comprobante.SelectedValue.ToString());
                asi.Cuenta = dgv_asientos.Rows[i].Cells[0].Value.ToString();
                asi.Descripcion = dgv_asientos.Rows[i].Cells[1].Value.ToString();
                asi.Idcentro = int.Parse(dgv_asientos.Rows[i].Cells[2].Value.ToString());
                int idnit = this.DevolverNits(dgv_asientos.Rows[i].Cells[3].Value.ToString());
                asi.idnit = idnit;
                asi.Cheque = dgv_asientos.Rows[i].Cells[4].Value.ToString();
                string debito = this.DevolverValor(dgv_asientos.Rows[i].Cells[5].Value.ToString());
                string credito = this.DevolverValor(dgv_asientos.Rows[i].Cells[6].Value.ToString());
                asi.Valordebito = decimal.Parse(debito);
                asi.Valorcredito = decimal.Parse(credito);
                asi.AsiFijo = checked_asientofijo.Checked == true ? true : false;
                asientos.Add(asi);
            }

            return asientos;

        }

        private string DevolverValor(string valor)
        {
            string[] separators = { "," };
            string[] numero = valor.Split(separators, StringSplitOptions.RemoveEmptyEntries);
            int tamano = numero.Count();
            string cadenasin = string.Empty;
            for (int i = 0; i < tamano; i++)
            {
                cadenasin = cadenasin + numero[i];
            }

            return cadenasin;
        }

        #endregion

        #region BOTONES CLICK

        private void btn_nuevo_Click(object sender, EventArgs e)
        {
            if (txt_numeroasiento.Text.Equals(string.Empty))
            {
                this.CamposInactivos();
                this.CamposActivos();
                this.AutoCompletar();
                this.botonclick = "agregar";
                txt_anio.Focus();
                dgv_asientos.Rows.Clear();
                btn_buscar.Visible = false;
            }
            else
            {
                DialogResult agregar = MessageBox.Show("ESTA SEGURO DE CERRAR EL ASIENTO?", "GRABAR ASIENTO", MessageBoxButtons.YesNo);
                if (agregar == DialogResult.Yes)
                {
                    this.CamposInactivos();
                    this.CamposVacios();
                    this.CamposActivos();
                    this.AutoCompletar();
                    btn_buscar.Visible = false;
                    this.botonclick = "agregar";
                }
            }
        }

        private void txt_cuenta_KeyUp(object sender, KeyEventArgs e)
        {
            if (!txt_cuenta.Text.Equals(string.Empty))
            {
                bool existe = this.negocio_Cuenta.ExisteCuenta(txt_cuenta.Text);
                if (existe)
                {
                    txt_nomcuenta.Text = this.negocio_Cuenta.DevolverNombre(txt_cuenta.Text);
                }
                else
                {
                    txt_nomcuenta.Text = string.Empty;
                }
            }
        }

        private void btn_agregar_Click(object sender, EventArgs e)
        {
            bool agregar = this.ValidarCamposVacios();
            if (agregar)
            {
                bool existe = true;
                if (this.botonasi.Equals("asifijo"))
                {
                    existe = this.negocio_Asiento.ExisteAsientoFijo(txt_numeroasiento.Text);
                }
                else
                {
                    existe = this.negocio_Asiento.ExisteAsiento(txt_numeroasiento.Text, int.Parse(cbx_comprobante.SelectedValue.ToString()));
                }
                if (this.botonclick.Equals("editar"))
                {
                    bool existeas = this.negocio_Asiento.ExisteAsiento(txt_numeroasiento.Text, int.Parse(cbx_comprobante.SelectedValue.ToString()));
                    if (existeas)
                    {
                        int devidasi = this.negocio_Asiento.DevolverIdAsiento(txt_numeroasiento.Text, int.Parse(cbx_comprobante.SelectedValue.ToString()));
                        if (devidasi == this.idasiento)
                        {
                            existe = false;
                        }
                        else
                        {
                            existe = true;
                        }
                    }
                    else
                    {
                        existe = true;
                    }
                }
                if (!existe)
                {
                    if (!txt_debito.Text.Equals("0.00") || !txt_credito.Text.Equals("0.00"))
                    {
                        int centro = !txt_centro.Text.Equals(string.Empty) ? int.Parse(txt_centro.Text) : 0;
                        NitsDataSource nits = new NitsDataSource();
                        if (!txt_nit.Text.Equals(string.Empty))
                        {
                            nits.Nit = txt_nit.Text;
                        }
                        else
                        {
                            nits.Nit = string.Empty;
                        }

                        dgv_asientos.Rows.Add(txt_cuenta.Text, txt_detalle.Text, txt_centro.Text,
                        nits.Nit, txt_referencia.Text, txt_debito.Text, txt_credito.Text);
                        this.Totales();
                        txt_detalle.Text = string.Empty;
                        txt_nomcuenta.Text = string.Empty;
                        txt_nomcentro.Text = string.Empty;
                        txt_nomnit.Text = string.Empty;
                        txt_cuenta.Text = string.Empty;
                        txt_centro.Text = "0";
                        txt_nit.Text = "0";
                        txt_referencia.Text = string.Empty;
                        txt_credito.Text = "0";
                        txt_debito.Text = "0";
                        this.CamposInactivos();
                        txt_cuenta.Enabled = true;
                        txt_cuenta.Focus();
                    }
                    else
                    {
                        MessageBox.Show("Debe ingresar un valor valido para debito o credito", "ERROR", MessageBoxButtons.OK);
                    }
                }
                else
                {
                    MessageBox.Show("El numero de asiento ya existe", "GRABAR ASIENTO", MessageBoxButtons.OK);
                }
            }
        }

        #endregion

        private void txt_numeroasiento_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Enter)
            {
                e.Handled = true;
                SendKeys.Send("{TAB}");
            }
            else
            {
                e.Handled = this.funtions.ValidacionNumerico(e).Handled;
            }
        }

        private void txt_debito_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Enter)
            {
                if (!txt_debito.Text.Equals("00.00") && !txt_debito.Text.Equals(string.Empty))
                {
                    txt_credito.Text = "00.00";
                }
                else
                {
                    txt_debito.Text = "00.00";
                }
                char[] delimiterChars = { '.', ',' };
                string[] debito = txt_debito.Text.Split(delimiterChars);
                int tamano = debito.Count();
                string debit = string.Empty;
                if (debito[tamano - 1].Equals("00"))
                {
                    for (int i = 0; i < tamano - 1; i++)
                    {
                        debit = debit + debito[i];
                    }
                }
                else
                {
                    debit = debito[0];
                }
                decimal debitode = decimal.Parse(debit);
                txt_debito.Text = debitode.ToString("0,0.00", CultureInfo.InvariantCulture);

                e.Handled = true;
                SendKeys.Send("{TAB}");
            }
            else
            {
                e.Handled = this.funtions.ValidacionDecimal(e).Handled;
            }
        }

        private void txt_referencia_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Enter)
            {
                e.Handled = true;
                SendKeys.Send("{TAB}");
            }
            else
            {
                e.Handled = this.funtions.ValidacionNumerico(e).Handled;
            }
        }

        private void txt_credito_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Enter)
            {
                if (!txt_credito.Text.Equals("00.00") && !txt_credito.Text.Equals(string.Empty))
                {
                    txt_debito.Text = "00.00";
                }
                else
                {
                    txt_credito.Text = "0.00";
                }
                char[] delimiterChars = { '.', ',' };
                string[] credito = txt_credito.Text.Split(delimiterChars);
                int tamano = credito.Count();
                string credit = string.Empty;
                if (credito[tamano - 1].Equals("00"))
                {
                    for (int i = 0; i < tamano - 1; i++)
                    {
                        credit = credit + credito[i];
                    }
                }
                else
                {
                    credit = credit + credito[0];
                }
                decimal creditode = decimal.Parse(credit);
                creditode = creditode * -1;
                txt_credito.Text = creditode.ToString("0,0.00", CultureInfo.InvariantCulture);
                e.Handled = true;
                SendKeys.Send("{TAB}");
                btn_agregar.Enabled = true;

            }
            else
            {
                e.Handled = this.funtions.ValidacionDecimal(e).Handled;
            }
        }


        private void btn_guardar_Click(object sender, EventArgs e)
        {
            if (txt_descuadre.Text.Equals("00.00"))
            {

                List<AsientoDataSource> asientos = new List<AsientoDataSource>();
                asientos = this.guardarAsiento();

                if (this.botonclick.Equals("agregar"))
                {
                    bool guardo = this.negocio_Asiento.GuardarAsiento(asientos);
                    if (guardo)
                    {
                        MessageBox.Show("EL ASIENTO HA SIDO GUARDADO", "GRABAR ASIENTO", MessageBoxButtons.OK);
                        dgv_asientos.Rows.Clear();
                        CamposVacios();
                        CamposInactivos();
                        txt_totaldebito.Text = string.Empty;
                        txt_totalcredito.Text = string.Empty;
                        txt_descuadre.Text = string.Empty;
                    }
                }
                if (this.botonclick.Equals("editar"))
                {
                    bool existe = this.negocio_Asiento.ExisteAsiento(txt_numeroasiento.Text, int.Parse(cbx_comprobante.SelectedValue.ToString()));
                    if (existe)
                    {
                        int idasi = this.negocio_Asiento.DevolverIdAsiento(txt_numeroasiento.Text, int.Parse(cbx_comprobante.SelectedValue.ToString()));
                        if (this.idasiento == idasi)
                        {
                            bool guardo = this.negocio_Asiento.ActualizarAsiento(asientos, this.cant);
                            if (guardo)
                            {
                                MessageBox.Show("EL ASIENTO HA SIDO GUARDADO", "GRABAR ASIENTO", MessageBoxButtons.OK);
                                dgv_asientos.Rows.Clear();
                                CamposVacios();
                                CamposInactivos();
                                txt_totaldebito.Text = string.Empty;
                                txt_totalcredito.Text = string.Empty;
                                txt_descuadre.Text = string.Empty;
                            }
                        }
                        else
                        {
                            MessageBox.Show("EL ASIENTO YA EXISTE", "EDITAR ASIENTO", MessageBoxButtons.OK);
                        }
                    }
                    else
                    {
                        bool guardo = this.negocio_Asiento.ActualizarAsiento(asientos, this.cant);
                        if (guardo)
                        {
                            MessageBox.Show("EL ASIENTO HA SIDO GUARDADO", "GRABAR ASIENTO", MessageBoxButtons.OK);
                            dgv_asientos.Rows.Clear();
                            CamposVacios();
                            CamposInactivos();
                            txt_totaldebito.Text = string.Empty;
                            txt_totalcredito.Text = string.Empty;
                            txt_descuadre.Text = string.Empty;
                        }
                    }
                }
            }
            else
            {
                MessageBox.Show("EXISTE UN DESCUADRE", "ERROR", MessageBoxButtons.OK);
            }
        }


        private void entertab_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Enter)
            {
                e.Handled = true;
                SendKeys.Send("{TAB}");
            }
        }

        private void btn_traerasiento_Click(object sender, EventArgs e)
        {
            Frm_visualAsiFijo frm = new Frm_visualAsiFijo(this);
            frm.MdiParent = this.MdiParent;
            frm.Show();
        }

        private void cbx_comprobante_SelectionChangeCommitted(object sender, EventArgs e)
        {
            if (this.botonclick.Equals("agregar"))
            {
                txt_numeroasiento.Text = string.Empty;
                txt_numeroasiento.Enabled = true;
                if (checked_asientofijo.Checked == false)
                {
                    int comprobante = int.Parse(cbx_comprobante.SelectedValue.ToString());
                    bool consec = this.negocio_Comprobante.DevolverConsecutivo(comprobante);
                    if (consec == true)
                    {
                        string numdoc = this.negocio_Asiento.DevolverNumeroDocumento(comprobante);
                        txt_numeroasiento.Text = numdoc;
                        txt_numeroasiento.Enabled = false;
                    }
                    txt_cuenta.Enabled = true;
                }
            }
        }

        private void entercomprobante_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (this.botonclick.Equals("agregar"))
            {
                if (e.KeyChar == (char)Keys.Enter)
                {
                    int comprobante = int.Parse(cbx_comprobante.SelectedValue.ToString());
                    bool consec = this.negocio_Comprobante.DevolverConsecutivo(comprobante);
                    if (consec == true)
                    {
                        string numdoc = this.negocio_Asiento.DevolverNumeroDocumento(comprobante);
                        txt_numeroasiento.Text = numdoc;
                        txt_numeroasiento.Enabled = false;
                    }
                    txt_cuenta.Enabled = true;
                    e.Handled = true;
                    SendKeys.Send("{TAB}");
                }
            }
            else
            {
                if (e.KeyChar == (char)Keys.Enter)
                {
                    e.Handled = true;
                    SendKeys.Send("{TAB}");
                }
            }
        }

        private void txt_cuenta_KeyDown(object sender, KeyEventArgs e)
        {
            if (this.activo == 1 && !this.botonclick.Equals("editar"))
            {
                txt_centro.Text = "0";
                txt_nit.Text = "0";
                txt_centro.Enabled = false;
                txt_nit.Enabled = false;
            }
            txt_detalle.Enabled = false;
            if (e.KeyValue == (char)Keys.Enter)
            {
                bool existecu = this.negocio_Cuenta.ExisteCuenta(txt_cuenta.Text);
                if (existecu)
                {
                    string tipo = this.negocio_Cuenta.DevuelveTipoCuenta(txt_cuenta.Text);
                    if (tipo.Equals("M"))
                    {
                        e.Handled = false;
                        MessageBox.Show("CUENTA MAYOR", "GRABAR ASIENTO", MessageBoxButtons.OK);
                    }
                    else
                    {
                        CuentaDataSource cuentaver = new CuentaDataSource();
                        cuentaver = this.negocio_Cuenta.DevolverDatos(txt_cuenta.Text);
                        if (cuentaver.Centro)
                        {
                            txt_centro.Enabled = true;
                            this.activo = 1;
                        }

                        if (cuentaver.Pidenit)
                        {
                            txt_nit.Enabled = true;
                            this.activo = 1;
                        }
                        txt_detalle.Enabled = true;
                        txt_referencia.Enabled = true;
                        txt_credito.Enabled = true;
                        txt_debito.Enabled = true;
                        SendKeys.Send("{TAB}");
                    }
                    e.Handled = true;
                }
                else
                {
                    DialogResult agregar = MessageBox.Show("Cuenta no existe, desea crearlo?", "NO EXISTE", MessageBoxButtons.YesNo);
                    if (agregar == DialogResult.Yes)
                    {
                        Form_Cuenta frmcun = new Form_Cuenta();
                        frmcun.Show();
                    }
                }
            }
        }

        private void txt_centro_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyValue == (char)Keys.Enter)
            {
                bool result = this.negocio_Centro.ExisteCentro(int.Parse(txt_centro.Text));
                if (result)
                {
                    txt_nomcentro.Text = this.negocio_Centro.DevolverNombre(int.Parse(txt_centro.Text));
                    e.Handled = true;
                    SendKeys.Send("{TAB}");
                }
                else
                {
                    e.Handled = false;
                    DialogResult agregar = MessageBox.Show("No existe el centro, desea crearlo?", "NO EXISTE", MessageBoxButtons.YesNo);
                    if (agregar == DialogResult.Yes)
                    {
                        Frmcentro frmcen = new Frmcentro();
                        frmcen.Show();
                    }
                }
            }
        }

        private void txt_nit_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyValue == (char)Keys.Enter)
            {
                int idnit = this.DevolverNits(txt_nit.Text);
                if (idnit != 0)
                {

                    txt_nomnit.Text = this.negocio_Nit.DevolverNombre(txt_nit.Text);
                    e.Handled = true;
                    SendKeys.Send("{TAB}");
                }
                else
                {
                    DialogResult agregar = MessageBox.Show(" NIT no existe, desea crearlo?", "NO EXISTE", MessageBoxButtons.YesNo);
                    if (agregar == DialogResult.Yes)
                    {
                        Form_Cuenta frmcun = new Form_Cuenta();
                        frmcun.Show();
                    }
                    e.Handled = false;
                }
            }
        }

        private void validanumero_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar != (char)Keys.Enter)
            {
                e.Handled = this.funtions.ValidacionNumerico(e).Handled;
            }
        }

        private void txt_numeroasiento_Click(object sender, EventArgs e)
        {
            this.cbx_comprobante_SelectionChangeCommitted(sender, e);
        }

        private void txt_centro_Click(object sender, EventArgs e)
        {
            if (txt_detalle.Text.Equals(string.Empty))
            {
                MessageBox.Show("DEBE DIGITAR DETALLE", "GRABAR ASIENTO", MessageBoxButtons.OK);
            }
        }

        private void txt_detalle_Click(object sender, EventArgs e)
        {

        }

        private void EnterFijo_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Enter)
            {
                e.Handled = true;
                SendKeys.Send("{TAB}");
                txt_cuenta.Enabled = true;
            }
        }

        private void enterdetalle_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Enter)
            {
                if (txt_detalle.Text.Equals(string.Empty))
                {
                    MessageBox.Show("DEBE DIGITAR DETALLE", "GRABAR ASIENTO", MessageBoxButtons.OK);
                    e.Handled = false;
                }
                else
                {
                    e.Handled = true;
                    SendKeys.Send("{TAB}");
                }
            }
        }

        private void btn_editar_Click(object sender, EventArgs e)
        {
            this.botonclick = "editar";
            if (!txt_numeroasiento.Text.Equals(string.Empty))
            {
                DialogResult editar = MessageBox.Show("ESTA SEGURO DE CERRAR EL ASIENTO?", "GRABAR ASIENTO",
                  MessageBoxButtons.YesNo);
                if (editar == DialogResult.Yes)
                {
                    this.CamposVacios();
                    this.CamposInactivos();
                    dgv_asientos.Rows.Clear();
                    btn_buscar.Visible = true;
                    btn_buscar.Enabled = true;
                    cbx_comprobante.Enabled = true;
                    txt_numeroasiento.Enabled = true;
                    cbx_comprobante.Focus();
                }
            }
            else
            {
                btn_buscar.Visible = true;
                btn_buscar.Enabled = true;
                cbx_comprobante.Enabled = true;
                txt_numeroasiento.Enabled = true;
                cbx_comprobante.Focus();
            }

        }

        private void btn_buscar_Click(object sender, EventArgs e)
        {
            if (!txt_numeroasiento.Text.Equals(string.Empty))
            {
                List<AsientoDataSource> asientos = new List<AsientoDataSource>();
                asientos = this.negocio_Asiento.DevolverAsiento(int.Parse(cbx_comprobante.SelectedValue.ToString()), txt_numeroasiento.Text);
                this.cant = asientos.Count;
                cbx_comprobante.SelectedValue = asientos[0].Codcompr;
                txt_numeroasiento.Text = Convert.ToString(asientos[0].Documento);
                dtime_fecha.Value = asientos[0].Fecha;
                for (int i = 0; i < asientos.Count; i++)
                {
                    dgv_asientos.Rows.Add(asientos[i].Cuenta, asientos[i].Descripcion, asientos[i].Idcentro,
                      asientos[i].nit, asientos[i].Cheque, asientos[i].Valordebito.ToString("0,0.00", CultureInfo.InvariantCulture), "-" + asientos[i].Valorcredito.ToString("0,0.00", CultureInfo.InvariantCulture));
                }
                dtime_fecha.Enabled = true;
                this.Totales();
                dtime_fecha.Focus();
                btn_buscar.Enabled = false;

                this.idasiento = asientos[0].IdAsiento;
            }
            else
            {
                MessageBox.Show("DEBE INGRESAR NUMERO DE ASIENTO", "EDITAR ASIENTO", MessageBoxButtons.OK);
            }
        }

        private void enternumero_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (this.botonclick.Equals("agregar"))
            {
                if (e.KeyChar == (char)Keys.Enter)
                {
                    e.Handled = true;
                    SendKeys.Send("{TAB}");
                }
            }
            if (this.botonclick.Equals("editar"))
            {
                if (e.KeyChar == (char)Keys.Enter && btn_buscar.Enabled == true && !txt_numeroasiento.Equals(string.Empty))
                {
                    this.btn_buscar_Click(sender, e);
                }
                else if (e.KeyChar == (char)Keys.Enter)
                {
                    e.Handled = true;
                    SendKeys.Send("{TAB}");
                    txt_cuenta.Enabled = true;
                }

            }
        }

        private void checked_asientofijo_CheckedChanged(object sender, EventArgs e)
        {
            if (checked_asientofijo.Checked == true)
            {
                string numdoc = this.negocio_Asiento.DevolverNumeroAsientoFijo();
                txt_numeroasiento.Text = numdoc;
                txt_numeroasiento.Enabled = false;
                txt_cuenta.Enabled = true;
                this.botonasi = "asifijo";
                txt_cuenta.Focus();
            }
            else
            {
                this.CamposVacios();
                txt_cuenta.Enabled = false;
                this.CamposActivos();
                this.botonclick = "agregar";
            }
        }

        private void frmasientos_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.N && (e.Control))
            {
                btn_nuevo_Click(sender, e);
            }
            if (e.KeyCode == Keys.G && (e.Control) && btn_guardar.Enabled == true)
            {
                btn_guardar_Click(sender, e);
            }
            if (e.KeyCode == Keys.A && (e.Control) && btn_agregar.Enabled == true)
            {
                btn_agregar_Click(sender, e);
            }
            if (e.KeyCode == Keys.E && (e.Control))
            {
                btn_editar_Click(sender, e);
            }
            if (e.KeyCode == Keys.T && (e.Control))
            {
                btn_traerasiento_Click(sender, e);
            }
            if ((e.KeyCode == Keys.M && (e.Control)) && this.botonclick.Equals("editar"))
            {
                dgv_asientos.Focus();
            }
        }

        private void txt_descuadre_TextChanged(object sender, EventArgs e)
        {
            if (txt_descuadre.Text.Equals("00.00"))
            {
                btn_guardar.Enabled = true;
            }
        }
        private void CamposRegistroActivos()
        {


        }
        private void dgv_asientos_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            txt_cuenta.Text = dgv_asientos.CurrentRow.Cells[0].Value.ToString();
            txt_detalle.Text = dgv_asientos.CurrentRow.Cells[1].Value.ToString();
            txt_centro.Text = dgv_asientos.CurrentRow.Cells[2].Value.ToString();
            if (txt_centro.Text.Equals("0"))
            {
                txt_centro.Enabled = false;
            }
            else
            {
                txt_centro.Enabled = true;
            }
            txt_nit.Text = dgv_asientos.CurrentRow.Cells[3].Value.ToString();
            if (txt_nit.Text.Equals("0"))
            {
                txt_nit.Enabled = false;
            }
            else
            {
                txt_nit.Enabled = true;
            }
            txt_referencia.Text = dgv_asientos.CurrentRow.Cells[4].Value.ToString();
            txt_debito.Text = dgv_asientos.CurrentRow.Cells[5].Value.ToString();
            txt_credito.Text = dgv_asientos.CurrentRow.Cells[6].Value.ToString();
            txt_cuenta.Focus();
            txt_cuenta.Enabled = true;
            txt_detalle.Enabled = true;
            txt_referencia.Enabled = true;
            txt_debito.Enabled = true;
            txt_credito.Enabled = true;
            txt_cuenta.Focus();
            btn_agregar.Visible = false;
            this.Rowclick = e.RowIndex;
            btn_actualizar.Visible = true;
            btn_actualizar.Enabled = true;
        }

        private void dgv_asientos_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Enter)
            {
                if (this.botonclick.Equals("editar"))
                {
                    txt_cuenta.Text = dgv_asientos.CurrentRow.Cells[0].Value.ToString();
                    txt_detalle.Text = dgv_asientos.CurrentRow.Cells[1].Value.ToString();
                    txt_centro.Text = dgv_asientos.CurrentRow.Cells[2].Value.ToString();
                    if (txt_centro.Text.Equals("0"))
                    {
                        txt_centro.Enabled = false;
                    }
                    else
                    {
                        txt_centro.Enabled = true;
                    }
                    txt_nit.Text = dgv_asientos.CurrentRow.Cells[3].Value.ToString();
                    if (txt_nit.Text.Equals("0"))
                    {
                        txt_nit.Enabled = false;
                    }
                    else
                    {
                        txt_nit.Enabled = true;
                    }
                    txt_referencia.Text = dgv_asientos.CurrentRow.Cells[4].Value.ToString();
                    txt_debito.Text = dgv_asientos.CurrentRow.Cells[5].Value.ToString();
                    char[] menos = { '-' };
                    txt_credito.Text = dgv_asientos.CurrentRow.Cells[6].Value.ToString().TrimStart(menos);
                    txt_credito.Text.TrimStart();
                    txt_cuenta.Focus();
                    txt_cuenta.Enabled = true;
                    txt_detalle.Enabled = true;
                    txt_referencia.Enabled = true;
                    txt_debito.Enabled = true;
                    txt_credito.Enabled = true;
                    txt_cuenta.Focus();
                    btn_agregar.Visible = false;
                    this.Rowclick = dgv_asientos.CurrentCell.RowIndex;
                    btn_actualizar.Visible = true;
                    btn_actualizar.Enabled = true;

                }
            }
        }

        private void btn_actualizar_Click(object sender, EventArgs e)
        {
            dgv_asientos.Rows[this.Rowclick].Cells[0].Value = txt_cuenta.Text;
            dgv_asientos.Rows[this.Rowclick].Cells[1].Value = txt_detalle.Text;
            dgv_asientos.Rows[this.Rowclick].Cells[2].Value = txt_centro.Text;
            dgv_asientos.Rows[this.Rowclick].Cells[3].Value = txt_nit.Text;
            dgv_asientos.Rows[this.Rowclick].Cells[4].Value = txt_referencia.Text;
            dgv_asientos.Rows[this.Rowclick].Cells[5].Value = txt_debito.Text;
            dgv_asientos.Rows[this.Rowclick].Cells[6].Value = "-" + txt_credito.Text;
            txt_cuenta.Text = string.Empty;
            txt_detalle.Text = string.Empty;
            txt_nomcuenta.Text = string.Empty;
            txt_centro.Enabled = false;
            txt_centro.Text = "0";
            txt_nomcentro.Text = string.Empty;
            txt_nit.Enabled = false;
            txt_nit.Text = "0";
            txt_nomnit.Text = string.Empty;
            txt_referencia.Text = string.Empty;
            txt_debito.Text = "00.00";
            txt_credito.Text = "00.00";
            this.Totales();
        }

        private void txt_anio_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Enter)
            {
                e.Handled = true;
                SendKeys.Send("{TAB}");
            }
            else
            {
                e.Handled = this.funtions.ValidacionNumerico(e).Handled;
            }

        }

        private void cbx_mes_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Enter)
            {
                e.Handled = true;
                SendKeys.Send("{TAB}");
            }
        }

    }
}


