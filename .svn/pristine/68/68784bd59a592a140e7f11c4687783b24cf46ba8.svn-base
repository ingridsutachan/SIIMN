////*********************************************************
//
//    <copyright file="Form_ReporteAsiento.cs" company="Marketing Software de Colombia LTDA">
//    @Autor Ingrid Sutachan
//    @fecha 24 de Marzo 2015
//    </copyright>
//
////*********************************************************
namespace App.Forms.Contable.Reportes
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Data;
    using System.Drawing;
    using System.Linq;
    using System.Text;
    using System.Windows.Forms;
    using Entities.Types;
    using Negocios.Contable;
    using Negocios.General;
    using App.Forms.Contable.Reportes.Types;

    public partial class Form_ReporteAsiento : Form
    {
        private Form_Asientos form_Asientos;

        private string cualasiento;

        private List<AsientoDataSource> asientoshow;

        private asientosn negocioAsiento;

        private Empresan negocioEmpresa;

        private Comprobantesn negocioComprobante;

        private Nitsn negocioNits;

        public Form_ReporteAsiento()
        {
            InitializeComponent();
        }
        public Form_ReporteAsiento(Form_Asientos form_Asientos, string whatasiento, List<AsientoDataSource> asientos)
        {
            // TODO: Complete member initialization
            this.form_Asientos = form_Asientos;
            this.cualasiento = whatasiento;
            this.asientoshow = asientos;
            this.negocioAsiento = new asientosn();
            this.negocioEmpresa = new Empresan();
            this.negocioComprobante = new Comprobantesn();
            this.negocioNits = new Nitsn();
            this.InitializeComponent();
            this.GenerarReporte(this.cualasiento);
            crystal_reportasiento.ShowLogo = false;
        }

        public Form_ReporteAsiento(Form_Asientos form_Asientos, string whatasiento)
        {
            this.form_Asientos = form_Asientos;
            this.cualasiento = whatasiento;
            this.negocioAsiento = new asientosn();
            this.negocioEmpresa = new Empresan();
            this.negocioComprobante = new Comprobantesn();
            this.negocioNits = new Nitsn();
            this.InitializeComponent();
            this.GenerarReporte(this.cualasiento);
            crystal_reportasiento.ShowLogo = false;
        }

        #region EVENTOS FORMULARIO

        protected override bool ProcessCmdKey(ref Message msg, Keys keyData)
        {
            /*if (keyData == (Keys.Control | Keys.P))
            {
                EventArgs eve = new EventArgs();
                object sender = new object();
                if (btn_informe.Enabled == true)
                {
                    this.Btn_informe_ButtonClick(sender, eve);
                    return true;
                }
            }*/

            if (keyData == Keys.Escape)
            {
                /* EventArgs eve = new EventArgs();
                 object sender = new object();
                 if (btn_salir.Enabled == true)
                 {
                     this.Btn_salir_Click(sender, eve);
                     return true;
                 }*/
            }

            return base.ProcessCmdKey(ref msg, keyData);
        }

        private void Form_ReportFormato_FormClosing(object sender, FormClosingEventArgs e)
        {
            this.form_Asientos.BotonesHabit();
        }

        #endregion

        private void GenerarReporte(string cualasi)
        {
            EmpresaDataSource empresa = this.negocioEmpresa.DevolverDatosEmpresa(Program.compa);
            List<AsientoDataSource> asiento = new List<AsientoDataSource>();
            switch (cualasi)
            {
                case "actual":
                    asiento = this.asientoshow;
                    string comprob = this.negocioComprobante.DevolverNombre(asiento[0].Codcompr);
                    List<AsientoDataSourceReports> asientoRe = new List<AsientoDataSourceReports>();
                    for (int i = 0; i < asiento.Count(); i++)
                    {
                        AsientoDataSourceReports asientoR = new AsientoDataSourceReports();
                        asientoR.IdAsiento = asiento[i].IdAsiento;
                        asientoR.Compania = empresa.Nombrecia + " - " + empresa.NombreSucursal;
                        asientoR.Comproban = asiento[i].Codcompr + " - " + comprob;
                        asientoR.Documento = asiento[i].Documento;
                        asientoR.Cuenta = asiento[i].Cuenta;
                        asientoR.Fecha = asiento[i].Fecha.ToShortDateString();
                        asientoR.Idcentro = asiento[i].Idcentro ?? default(int);
                        asientoR.IdNit = asiento[i].IdNit != null ? this.negocioNits.DevolverNit(asiento[i].IdNit) : string.Empty;
                        asientoR.Cheque = asiento[i].Cheque;
                        asientoR.Descripcion = asiento[i].Descripcion;
                        asientoR.Valordebito = asiento[i].Valordebito;
                        asientoR.Valorcredito = asiento[i].Valorcredito;
                        asientoRe.Add(asientoR);
                    }

                    ReporteAsiento reportasiento = new ReporteAsiento();
                    reportasiento.SetDataSource(asientoRe);
                    crystal_reportasiento.ReportSource = reportasiento;
                    this.Size = new Size(1003, 583);
                    crystal_reportasiento.Size = new Size(987, 519);
                    break;

                case "borrados":
                    List<AsientoDataSourceShow> asientobor = this.negocioAsiento.CargarInforme("borrados");
                    List<AsientoDataSourceReports> asientoRep = new List<AsientoDataSourceReports>();
                    foreach (AsientoDataSourceShow item in asientobor)
                    {
                        AsientoDataSourceReports asientoR = new AsientoDataSourceReports();
                        asientoR.IdAsiento = item.IdAsiento;
                        asientoR.Compania = empresa.Nombrecia + " - " + empresa.NombreSucursal;
                        asientoR.Comproban = item.Comproban;
                        asientoR.Documento = item.Documento;
                        asientoR.Cuenta = item.Cuenta;
                        asientoR.Fecha = item.Fecha;
                        asientoR.Idcentro = item.Idcentro ?? default(int);
                        asientoR.IdNit = item.IdNit;
                        asientoR.Cheque = item.Cheque;
                        asientoR.Descripcion = item.Descripcion;
                        asientoR.Valordebito = item.Valordebito;
                        asientoR.Valorcredito = item.Valorcredito;
                        asientoRep.Add(asientoR);
                    }

                    ReporteAsiento reportasientobor = new ReporteAsiento();
                    reportasientobor.SetDataSource(asientoRep);
                    crystal_reportasiento.ReportSource = reportasientobor;
                    this.Size = new Size(1003, 583);
                    crystal_reportasiento.Size = new Size(987, 519);
                    break;

                case "fijos":
                    List<AsientoDataSourceShow> asientofijo = this.negocioAsiento.CargarInforme("fijos");
                    List<AsientoDataSourceReports> asientoRepo = new List<AsientoDataSourceReports>();
                    foreach (AsientoDataSourceShow item in asientofijo)
                    {
                        AsientoDataSourceReports asientoR = new AsientoDataSourceReports();
                        asientoR.IdAsiento = item.IdAsiento;
                        asientoR.Compania = empresa.Nombrecia + " - " + empresa.NombreSucursal;
                        asientoR.Comproban = item.Comproban;
                        asientoR.Documento = item.Documento.Replace("FIJO",string.Empty);
                        asientoR.Cuenta = item.Cuenta;
                        asientoR.Fecha = item.Fecha;
                        asientoR.Idcentro = item.Idcentro ?? default(int);
                        asientoR.IdNit = item.IdNit;
                        asientoR.Cheque = item.Cheque;
                        asientoR.Descripcion = item.Descripcion;
                        asientoR.Valordebito = item.Valordebito;
                        asientoR.Valorcredito = item.Valorcredito;
                        asientoRepo.Add(asientoR);
                    }

                    ReporteAsiento reportasientofij = new ReporteAsiento();
                    reportasientofij.SetDataSource(asientoRepo);
                    crystal_reportasiento.ReportSource = reportasientofij;
                    this.Size = new Size(1003, 583);
                    crystal_reportasiento.Size = new Size(987, 519);
                    break;
            }
        }
    }
}
