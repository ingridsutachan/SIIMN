// -----------------------------------------------------------------------
// <copyright file="asientosn.cs" company="">
// TODO: Update copyright text.
// </copyright>
// -----------------------------------------------------------------------

namespace Negocios.Contable
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using Datos.Contable;
    using Entities;
    using Entities.Types;

    /// <summary>
    /// TODO: Update summary.
    /// </summary>
    public class asientosn
    {
        private asientosc persistencia;
        private Nitsc nitPersistencia;
        private Comprobantesn negocio_Comprobante;

        public asientosn()
        {
            this.persistencia = new asientosc();
            this.nitPersistencia = new Nitsc();
            this.negocio_Comprobante = new Comprobantesn();
        }

        public List<AsientoDataSource> CargarAsiento(string documento)
        {
            List<AsientoDataSource> asientos = new List<AsientoDataSource>();
            try
            {
                var items = this.persistencia.CargarAsiento(documento);
                foreach (var item in items)
                {
                    AsientoDataSource asi = new AsientoDataSource();

                    asi.Fecha = item.fecha;
                    asi.Documento = item.documento;
                    asi.Codcompr = item.codigcomprob;
                    asi.Cuenta = item.cuenta;
                    asi.Idcentro = item.idcentro;
                    asi.idnit = item.idnit;
                    asi.Cheque = item.referencia;
                    asi.Descripcion = item.detalle;
                    asi.Valorcredito = item.valorcredito;
                    asi.Valordebito = item.valordebito;
                    asientos.Add(asi);
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return asientos;
        }

        public bool GuardarAsiento(List<AsientoDataSource> asiento)
        {
            bool result = false;
            string numdoc;
            List<movimi> lstMovimi = new List<movimi>();
            bool consec = this.persistencia.DevolverConsecutivo(asiento[0].Codcompr);
            if (consec)
            {
                numdoc = this.DevolverNumeroDocumento(asiento[0].Codcompr);
            }
            else
            {
                numdoc = asiento[1].Documento;
            }
            foreach (AsientoDataSource item in asiento)
            {
                movimi movimi = new movimi();
                movimi.idsucursal = item.Idcompania;
                movimi.anio = item.anio;
                movimi.mes = item.Idmes;
                movimi.idasiento = item.IdAsiento;
                movimi.idusuario = item.usuario;
                movimi.fechagrabacion = item.fechagraba;
                movimi.fechaact = item.fechaactua;
                movimi.fecha = item.Fecha;
                movimi.documento = numdoc;
                movimi.codigcomprob = item.Codcompr;
                movimi.cuenta = item.Cuenta;
                movimi.idcentro = item.Idcentro;
                movimi.idnit = item.idnit;
                movimi.referencia = item.Cheque;
                movimi.actualizado = item.Actualizado;
                movimi.detalle = item.Descripcion;
                movimi.valorcredito = item.Valorcredito;
                movimi.valordebito = item.Valordebito;
                movimi.asientofijo = item.AsiFijo;
                lstMovimi.Add(movimi);
            }

            result = persistencia.GuardarAsiento(lstMovimi);

            return result;

        }

        public List<AsientoDataSource> CargarTodosAsientos()
        {
            List<AsientoDataSource> asientosfijo = new List<AsientoDataSource>();
            var items = this.persistencia.CargarTodosAsientos();
            string documento = string.Empty;
            foreach (var item in items)
            {
                AsientoDataSource asi = new AsientoDataSource();
                if (documento == item.documento)
                {
                    asi.Documento = "";
                }
                else
                {
                    documento = item.documento;
                    asi.Documento = item.documento;
                }
                asi.Codcompr = item.codigcomprob;
                asi.Cuenta = item.cuenta;
                asi.Idcentro = item.idcentro;
                asi.idnit = item.idnit;
                asi.Cheque = item.referencia;
                asi.Descripcion = item.detalle;
                asi.Valorcredito = item.valorcredito;
                asi.Valordebito = item.valordebito;
                asi.nit = item.idnit != null ? item.maenits.nit + "-" + item.maenits.digito : null;
                asi.NombreCentro = item.idcentro != null ? item.centrocostos.nombrecentro : null;
                asi.Nombrecomprobante = item.comprobante.descripcomprob;
                asientosfijo.Add(asi);
            }

            return asientosfijo;
        }

        public List<AsientoDataSource> CargarAsientoFijo(string documento)
        {
            List<AsientoDataSource> asientos = new List<AsientoDataSource>();
            try
            {
                var items = this.persistencia.CargarAsientoFijo(documento);
                foreach (var item in items)
                {
                    AsientoDataSource asi = new AsientoDataSource();

                    asi.Fecha = item.fecha;
                    asi.Documento = item.documento;
                    asi.Codcompr = item.codigcomprob;
                    asi.Cuenta = item.cuenta;
                    asi.Idcentro = item.idcentro;
                    asi.idnit = item.idnit;
                    asi.Cheque = item.referencia;
                    asi.Descripcion = item.detalle;
                    asi.Valorcredito = item.valorcredito;
                    asi.Valordebito = item.valordebito;
                    asi.NombreCuenta = item.maeconta.nombre;
                    asi.nit = item.idnit != null ? item.maenits.nit + "-" + item.maenits.digito : null;
                    asientos.Add(asi);
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return asientos;
        }

        public bool ExisteAsiento(string documento, int codcompr)
        {
            bool result = false;
            try
            {
                result = this.persistencia.ExisteAsiento(documento, codcompr);
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return result;
        }

        public string DevolverNumeroDocumento(int comprobante)
        {
            string numdoc = string.Empty;
            List<AsientoDataSource> asientos = new List<AsientoDataSource>();
            try
            {
                var items = this.persistencia.DevolverNumeroDocumento(comprobante);
                if (items.Count() > 0)
                {
                    foreach (var item in items)
                    {
                        AsientoDataSource asi = new AsientoDataSource();
                        asi.Fecha = item.fecha;
                        asi.Documento = item.documento;
                        asi.Codcompr = item.codigcomprob;
                        asi.Cuenta = item.cuenta;
                        asi.Idcentro = item.idcentro;
                        asi.idnit = item.idnit;
                        asi.Cheque = item.referencia;
                        asi.Descripcion = item.detalle;
                        asi.Valorcredito = item.valorcredito;
                        asi.Valordebito = item.valordebito;
                        asientos.Add(asi);
                    }
                    numdoc = Convert.ToString(asientos.Max(asi => asi.Documento) + 1);
                }
                else
                {
                    numdoc = "1";
                }

            }
            catch (Exception ex)
            {
                throw ex;
            }
            return numdoc;
        }

        public List<AsientoDataSource> DevolverAsiento(int codcompr, string documento)
        {
            List<AsientoDataSource> asientos = new List<AsientoDataSource>();
            try
            {
                var items = this.persistencia.DevolverAsiento(codcompr, documento);
                foreach (var item in items)
                {
                    AsientoDataSource asi = new AsientoDataSource();

                    asi.Fecha = item.fecha;
                    asi.Documento = item.documento;
                    asi.Codcompr = item.codigcomprob;
                    asi.Cuenta = item.cuenta;
                    asi.Idcentro = item.idcentro;
                    asi.idnit = item.idnit;
                    asi.Cheque = item.referencia;
                    asi.Descripcion = item.detalle;
                    asi.Valorcredito = item.valorcredito;
                    asi.Valordebito = item.valordebito;
                    asi.NombreCuenta = item.maeconta.nombre;
                    asi.IdMovimi = item.idmovimiento;
                    asi.IdAsiento = item.idasiento;
                    asi.nit = item.idnit != null ? item.maenits.nit + "-" + item.maenits.digito : null;
                    asientos.Add(asi);
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return asientos;
        }

        public string DevolverNumeroAsientoFijo()
        {
            string numdoc = string.Empty;
            List<AsientoDataSource> asientos = new List<AsientoDataSource>();
            try
            {
                var items = this.persistencia.DevolverNumeroAsientoFijo();
                if (items.Count() > 0)
                {
                    foreach (var item in items)
                    {
                        AsientoDataSource asi = new AsientoDataSource();
                        asi.Fecha = item.fecha;
                        asi.Documento = item.documento;
                        asi.Codcompr = item.codigcomprob;
                        asi.Cuenta = item.cuenta;
                        asi.Idcentro = item.idcentro;
                        asi.idnit = item.idnit;
                        asi.Cheque = item.referencia;
                        asi.Descripcion = item.detalle;
                        asi.Valorcredito = item.valorcredito;
                        asi.Valordebito = item.valordebito;
                        asientos.Add(asi);
                    }
                    numdoc = Convert.ToString(asientos.Max(asi => asi.Documento) + 1);
                }
                else
                {
                    numdoc = "1";
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return numdoc;
        }

        public bool ExisteAsientoFijo(string documento)
        {
            bool result = false;
            try
            {
                result = this.persistencia.ExisteAsientoFijo(documento);
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return result;
        }

        public int DevolverIdAsiento(string documento, int codcompr)
        {
            int idasiento = 0;
            try
            {
                idasiento = this.persistencia.DevolverIdAsiento(documento, codcompr);
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return idasiento;

        }

        public bool ActualizarAsiento(List<AsientoDataSource> asiento, int cantidad)
        {
            bool result = false;
            List<movimi> lstMovimi = new List<movimi>();

            foreach (AsientoDataSource item in asiento)
            {
                movimi movimi = new movimi();
                movimi.idasiento = item.IdAsiento;
                movimi.idsucursal = item.Idcompania;
                movimi.idusuario = item.usuario;
                movimi.fecha = item.Fecha;
                movimi.documento = item.Documento;
                movimi.codigcomprob = item.Codcompr;
                movimi.cuenta = item.Cuenta;
                movimi.idcentro = item.Idcentro;
                movimi.idnit = item.idnit;
                movimi.referencia = item.Cheque;
                movimi.detalle = item.Descripcion;
                movimi.valorcredito = item.Valorcredito;
                movimi.valordebito = item.Valordebito;
                movimi.asientofijo = item.AsiFijo;
                lstMovimi.Add(movimi);
            }

            result = persistencia.ActualizarAsiento(lstMovimi, cantidad);

            return result;
        }

        public int DevolverIdAsientoCon()
        {
            int idasi = 0;
            try
            {
                idasi = this.persistencia.DevolverIdAsientoCon();
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return idasi;
        }

        public int ActualizarTodosAsientos(DateTime fechade, DateTime fechahasta)
        {
            int cantasiento = 0;
            try
            {
                cantasiento = this.persistencia.ActualizarTodosAsientos(fechade, fechahasta);
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return cantasiento;
        }

        public bool ActualizarUnAsiento(int comprob, string numeroas)
        {
            bool actualizar = false;
            try
            {
                actualizar = this.persistencia.ActualizarUnAsiento(comprob, numeroas);
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return actualizar;
        }

        /* public bool ExisMovimiSinAct(string anio, int mesde, int meshasta, int compro, int docde, int dochasta, bool todcom, bool toddoc)
         {
             bool existe = false;
             try
             {
                 existe = this.persistencia.ExMovimiSinAct(anio, mesde, meshasta, compro, docde, dochasta, todcom, toddoc);
             }
             catch (Exception ex)
             {
                 throw ex;
             }

             return existe;
         }

         public List<AsientoDataSource> DevolverAsientoSinAct(string anio, int mesde, int meshasta, int compro, int docde, int dochasta, bool todcom, bool toddoc)
         {
             List<AsientoDataSource> asiento = new List<AsientoDataSource>();
             try
             {
                 var items = this.persistencia.DevolverAsientoSinAct(anio, mesde, meshasta, compro, docde, dochasta, todcom, toddoc);
                 foreach (var item in items)
                 {
                     AsientoDataSource asi = new AsientoDataSource();

                     asi.Fecha = item.fecha;
                     asi.anio = item.anio;
                     asi.Documento = item.documento;
                     asi.Codcompr = item.codicomp;
                     asi.Cuenta = item.cuenta;
                     asi.Idcentro = item.idcentro;
                     asi.idnit = item.idnit;
                     asi.Cheque = item.cheque;
                     asi.Descripcion = item.descrip;
                     asi.Valorcredito = item.valorcredito;
                     asi.Valordebito = item.valordebito;
                     asi.IdMovimi = item.idmovimi;
                     asi.IdAsiento = item.idasiento;
                     asi.NombreCompa = item.compania.nombrecia;
                     asi.Nombrecomprobante = item.comprobante.descomp;
                     asi.nit = item.maenits.nit + item.maenits.digito;
                     asiento.Add(asi);
                 }
             }
             catch (Exception ex)
             {
                 throw ex;
             }

             return asiento;
         }*/

        public bool DevolverConsecutivo(int comprobante)
        {
            throw new NotImplementedException();
        }
    }
}
