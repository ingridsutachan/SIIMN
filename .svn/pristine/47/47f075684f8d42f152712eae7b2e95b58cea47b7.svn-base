////*********************************************************
//
//    <copyright file="cuentac.cs" company="Marketing Software de Colombia LTDA">
//    @Autor Ingrid Sutachan
//    @fecha 01 marzo 2014
//    </copyright>
//
////*********************************************************
namespace Datos.Contable
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Entities;

    /// <summary>
    /// Clase cuenta de capa de datos
    /// </summary>
    public class Cuentac
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Cuentac"/> class.
        /// </summary>
        public Cuentac()
        {
        }

        /// <summary>
        /// Cargar cuenta
        /// </summary>
        /// <returns>lista de las cuentas que se encuentran en la tabla cuenta</returns>
        public List<maeconta> CargarCuenta()
        {
            using (contableEntities bd = new contableEntities())
            {
                List<maeconta> cuenta = new List<maeconta>();
                try
                {
                    cuenta = bd.maeconta.ToList();
                }
                catch (Exception ex)
                {
                    throw ex;
                }

                return cuenta;
            }
        }

        /// <summary>
        /// Existe cuenta
        /// </summary>
        /// <param name="id">identificador de cuenta</param>
        /// <returns>booleano que rectifica si la cuenta existe</returns>
        public bool ExisteCuenta(string id)
        {
            using (contableEntities bd = new contableEntities())
            {
                bool result = false;
                try
                {
                    var query = bd.maeconta.Where(cue => cue.cuenta == id).Count();
                    result = query == 0 ? false : true;
                }
                catch (Exception ex)
                {
                    throw ex;
                }

                return result;
            }
        }

        /// <summary>
        /// Devuelve datos
        /// </summary>
        /// <param name="id">identificador de la cuenta</param>
        /// <returns>devuelve la cuenta que es respetiva al identificador</returns>
        public maeconta DevuelveDatos(string id)
        {
            using (contableEntities bd = new contableEntities())
            {
                maeconta datos = new maeconta();
                try
                {
                    var query = bd.maeconta.Where(cue => cue.cuenta == id).First();
                    datos = query;
                }
                catch (Exception ex)
                {
                    throw ex;
                }

                return datos;
            }
        }

        /// <summary>
        /// Crea  cuenta
        /// </summary>
        /// <param name="cuenta">cuenta a crear</param>
        /// <returns>cuenta que ha sido creada</returns>
        public bool GuardarCuenta(maeconta cuenta)
        {
            bool result = false;
            try
            {
                using (contableEntities bd = new contableEntities())
                {
                    maeconta cu = new maeconta();
                    cu.cuenta = cuenta.cuenta;
                    cu.idcompania = cuenta.idcompania;
                    cu.tipocta = cuenta.tipocta;
                    cu.nombre = cuenta.nombre;
                    cu.pidenit = cuenta.pidenit;
                    cu.centro = cuenta.centro;
                    cu.ajustesinteg = cuenta.ajustesinteg;
                    cu.nitajustes = cuenta.nitajustes;
                    cu.cueaju = cuenta.cueaju;
                    cu.cuencorre = cuenta.cuencorre;
                    cu.ajudoc = cuenta.ajudoc;
                    cu.cuentret = cuenta.cuentret;
                    cu.porete = cuenta.porete;
                    cu.concepret = cuenta.concepret;
                    bd.maeconta.Add(cu);
                    bd.SaveChanges();
                    result = true;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return result;
        }

        /// <summary>
        /// Actualiza la cuenta.
        /// </summary>
        /// <param name="cuenta">cuenta a actualizar</param>
        /// <returns>cuenta que ha sido actualizada </returns>
        public bool ActualizarCuenta(maeconta cuenta, string cuentaedit)
        {
            bool result = false;

            using (contableEntities bd = new contableEntities())
            {
                try
                {
                    var query = bd.maeconta.Where(cue => cue.cuenta == cuentaedit).First();
                    query.cuenta = cuenta.cuenta;
                    query.tipocta = cuenta.tipocta;
                    query.nombre = cuenta.nombre;
                    query.pidenit = cuenta.pidenit;
                    query.centro = cuenta.centro;
                    query.ajustesinteg = cuenta.ajustesinteg;
                    query.nitajustes = cuenta.nitajustes;
                    query.cueaju = cuenta.cueaju;
                    query.cuencorre = cuenta.cuencorre;
                    query.ajudoc = cuenta.ajudoc;
                    query.cuentret = cuenta.cuentret;
                    query.porete = cuenta.porete;
                    query.concepret = cuenta.concepret;
                    bd.SaveChanges();
                    result = true;
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }

            return result;
        }

        /// <summary>
        /// Elimina cuenta
        /// </summary>
        /// <param name="id">identificador de la cuenta</param>
        /// <returns>booleano que rectifica si la cuenta ha sido eliminada</returns>
        public bool EliminarCuenta(string id)
        {
            using (contableEntities bd = new contableEntities())
            {
                bool result = false;
                try
                {
                    var query = bd.maeconta.Where(mae => mae.cuenta == id).First();
                    bd.maeconta.Remove(query);
                    bd.SaveChanges();
                    result = true;
                }
                catch (Exception ex)
                {
                    throw ex;
                }

                return result;
            }
        }

        /// <summary>
        /// Busca la cuenta
        /// </summary>
        /// <param name="buscar">texto a buscar en la tabla cuenta</param>
        /// <returns>lista de los registros de la tabla cuenta que contienen la busqueda</returns>
        public List<maeconta> BuscarCuentac(string buscar)
        {
            List<maeconta> result = new List<maeconta>();

            using (contableEntities bd = new contableEntities())
            {
                try
                {
                    var query = bd.maeconta.Where(mae => mae.cuenta.Contains(buscar) || mae.nombre.Contains(buscar));
                    result = query.Count() > 0 ? query.ToList() : null;
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }

            return result;
        }

        /// <summary>
        /// Devuelve datos
        /// </summary>
        /// <param name="id">identificador de la cuenta</param>
        /// <returns>devuelve la cuenta que es respetiva al identificador</returns>
        public maeconta BuscarporNombreoCuenta(string id)
        {
            using (contableEntities bd = new contableEntities())
            {
                maeconta datos = new maeconta();
                try
                {
                    var query = bd.maeconta.Where(cue => cue.cuenta == id || cue.nombre == id).First();
                    datos = query;
                }
                catch (Exception ex)
                {
                    throw ex;
                }

                return datos;
            }
        }

        /// <summary>
        /// Verifica si existe una cuenta por nombre o por el numero de cuenta
        /// </summary>
        /// <param name="id">identificador de cuenta , nombre de cuenta</param>
        /// <returns>booleano que rectifica si la cuenta existe</returns>
        public bool VerificaxNombreoCuenta(string id)
        {
            using (contableEntities bd = new contableEntities())
            {
                bool result = false;
                try
                {
                    var query = bd.maeconta.Where(cue => cue.cuenta == id || cue.nombre == id).Count();
                    result = query == 0 ? false : true;
                }
                catch (Exception ex)
                {
                    throw ex;
                }

                return result;
            }
        }

        public List<maeconta> CargarCuentaDetalle()
        {
            using (contableEntities bd = new contableEntities())
            {
                List<maeconta> cuenta = new List<maeconta>();
                try
                {
                    cuenta = bd.maeconta.Where(mae => mae.tipocta == "D").ToList();
                }
                catch (Exception ex)
                {
                    throw ex;
                }

                return cuenta;
            }
        }

        public string DevolverNombre(string codigo)
        {
            using (contableEntities bd = new contableEntities())
            {
                string nombre;
                try
                {
                    var query = bd.maeconta.Where(mae => mae.cuenta == codigo).Count();
                    if (query > 0)
                    {
                        var query1 = bd.maeconta.Where(mae => mae.cuenta == codigo).First();
                        nombre = query1.nombre;
                    }
                    else
                    {
                        nombre = string.Empty;
                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }

                return nombre;
            }
        }

        public List<maeconta> CargarCuentaReporte(int cia)
        {
            using (contableEntities bd = new contableEntities())
            {
                List<maeconta> cuenta = new List<maeconta>();
                try
                {
                    cuenta = bd.maeconta.Include("compania").Where(mae => mae.idcompania == cia).ToList();
                }
                catch (Exception ex)
                {
                    throw ex;
                }

                return cuenta;
            }
        }

        public bool ExisteCuentaVal(string cuenta)
        {
            using (contableEntities bd = new contableEntities())
            {
                bool result = false;
                try
                {
                    var query = bd.maeconta.Where(cue => cue.cuenta == cuenta).Count();
                    result = query == 0 ? false : true;
                }
                catch (Exception ex)
                {
                    throw ex;
                }

                return result;
            }
        }

        public string DevolverTipoCuenta(string cuenta)
        {
            using (contableEntities bd = new contableEntities())
            {
                string tipo;
                try
                {
                    var query = bd.maeconta.Where(mae => mae.cuenta == cuenta).Count();
                    if (query > 0)
                    {
                        var query1 = bd.maeconta.Where(mae => mae.cuenta == cuenta).First();
                        tipo = query1.tipocta;
                    }
                    else
                    {
                        tipo = string.Empty;
                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }

                return tipo;
            }
        }

        public bool ExisteBuscar(string buscar)
        {
            bool existe = false;
            using (contableEntities bd = new contableEntities())
            {
                var query = bd.maeconta.Where(mae => mae.cuenta.Contains(buscar) || mae.nombre.Contains(buscar)).Count();
                existe = query > 0 ? true : false;
            }

            return existe;
        }
    }
}
