////*********************************************************
//
//    <copyright file="Form_ReporteAsiento.cs" company="Marketing Software de Colombia LTDA">
//    @Autor Ingrid Sutachan
//    @fecha 24 de Marzo 2015
//    </copyright>
//
////*********************************************************
namespace App.Forms.Contable.Reportes
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Data;
    using System.Drawing;
    using System.Linq;
    using System.Text;
    using System.Windows.Forms;
    using Entities.Types;
    using Negocios.Contable;
    using Negocios.General;
    using App.Forms.Contable.Reportes.Types;

    public partial class Form_ReporteAsiento : Form
    {
        private Form_Asientos form_Asientos;

        private string cualasiento;

        private List<AsientoDataSource> asientoshow;

        private asientosn negocioAsiento;

        private Empresan negocioEmpresa;

        private Comprobantesn negocioComprobante;

        private Nitsn negocioNits;

        public Form_ReporteAsiento()
        {
            InitializeComponent();
        }

        public Form_ReporteAsiento(Form_Asientos form_Asientos)
        {
            // TODO: Complete member initialization
            this.form_Asientos = form_Asientos;
        }

        public Form_ReporteAsiento(Form_Asientos form_Asientos, string whatasiento, List<AsientoDataSource> asientos)
        {
            // TODO: Complete member initialization
            this.form_Asientos = form_Asientos;
            this.cualasiento = whatasiento;
            this.asientoshow = asientos;
            this.negocioAsiento = new asientosn();
            this.negocioEmpresa = new Empresan();
            this.negocioComprobante = new Comprobantesn();
            this.negocioNits = new Nitsn();
        }

        #region EVENTOS FORMULARIO

        protected override bool ProcessCmdKey(ref Message msg, Keys keyData)
        {
            /*if (keyData == (Keys.Control | Keys.P))
            {
                EventArgs eve = new EventArgs();
                object sender = new object();
                if (btn_informe.Enabled == true)
                {
                    this.Btn_informe_ButtonClick(sender, eve);
                    return true;
                }
            }*/

            if (keyData == Keys.Escape)
            {
                /* EventArgs eve = new EventArgs();
                 object sender = new object();
                 if (btn_salir.Enabled == true)
                 {
                     this.Btn_salir_Click(sender, eve);
                     return true;
                 }*/
            }

            return base.ProcessCmdKey(ref msg, keyData);
        }

        private void Form_ReportFormato_FormClosing(object sender, FormClosingEventArgs e)
        {
            this.form_Asientos.BotonesHabit();
        }

        #endregion

        private void GenerarReporte()
        {
            switch (this.cualasiento)
            {
                case "actual":
                    List<AsientoDataSource> asiento = new List<AsientoDataSource>();
                    asiento = this.asientoshow;
                    EmpresaDataSource empresa = new EmpresaDataSource();
                    empresa = this.negocioEmpresa.DevolverDatosEmpresa(Program.compa);
                    string comprob = this.negocioComprobante.DevolverNombre(asiento[0].Codcompr);
                    int cantidad = asiento.Count()-1;
                    List<AsientoDataSourceReports> formatoR = new List<AsientoDataSourceReports>();
                    foreach (AsientoDataSource item in asiento)
                    {
                        AsientoDataSourceReports asientoR = new AsientoDataSourceReports();
                        asientoR.Compania = empresa.Nombrecia + empresa.NombreSucursal;
                        asientoR.Comproban = asiento[cantidad].Codcompr + comprob;
                        asientoR.Documento = asiento[cantidad].Documento;
                        asientoR.Fecha = asiento[cantidad].Fecha;
                        asientoR.Idcentro = asiento[cantidad].Idcentro?? default (int);
                      /*  //if(asiento[])
                       // asientoR.IdNit = asiento[cantidad]
                        asientoR.NombreLinea = this.negocioCuenta.DevolverNombre(item.ClaseCuenta + item.Linea);
                        asientoR.Nombre = item.Nombre;
                        asientoR.CuentaInicial = item.CuentaInicial;
                        asientoR.CuentaFinal = item.CuentaFinal;
                        asientoR.NombreCuentaIni = this.negocioCuenta.DevolverNombre(asientoR.CuentaInicial);
                        asientoR.NombreCuentaFin = this.negocioCuenta.DevolverNombre(asientoR.CuentaFinal);
                        asientoR.Fecha = fecha_informecuenta.Value.ToShortDateString();*/
                        formatoR.Add(asientoR);
                    }

                   /* ReporteFormato reportformato = new ReporteFormato();
                    reportformato.SetDataSource(formatoR);
                    crystal_reportformato.ReportSource = reportformato;
                    this.Size = new Size(1003, 583);
                    crystal_reportformato.Size = new Size(987, 519);
                    this.crystal_reportformato.Visible = true;
                    lbl_fecha.Visible = false;
                    fecha_informecuenta.Visible = false;
                    this.CenterToScreen();*/
                    break;
            }
        }


    }
}
