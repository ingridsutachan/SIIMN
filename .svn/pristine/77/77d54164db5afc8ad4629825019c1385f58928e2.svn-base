namespace App.Forms.Contable
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Data;
    using System.Drawing;
    using System.Linq;
    using System.Text;
    using System.Windows.Forms;
    using Negocios.Contable;
    using Entities.Types;
    using System.Globalization;
    using Negocios.General;

    public partial class Form_Balance : Form
    {
        private int tipoba;

        private asientosn negocioAsiento;

        private bool usrClose;

        private Funciones funtions;

        private Parametrosn negocioParametro;

        private Cuentan negocioCuenta;

        private int validaotrascuentas;

        public Form_Balance(int tipo)
        {
            this.negocioAsiento = new asientosn();
            this.negocioParametro = new Parametrosn();
            this.negocioCuenta = new Cuentan();
            this.funtions = new Funciones();
            this.InitializeComponent();
            this.tipoba = tipo;
            this.ValidarTipo(tipoba);
            this.CargarMeses();
        }

        public void SalirReporte(int tipo)
        {
            this.tipoba = tipo;
            this.Enabled = true;
            if (this.tipoba == 1)
            {
                this.HabilitarMes();
            }
            else
            {
                // this.HabilitarResumido();
            }
        }

        #region TECLAS DE ACCESO

        /// <summary>
        /// Teclas de Acceso a los botones
        /// </summary>
        /// <param name="msg">A <see cref="T:System.Windows.Forms.Message" />mensaje del proceso</param>
        /// <param name="keyData">un <see cref="T:System.Windows.Forms.Keys" /> valor tecla que recibe.</param>
        /// <returns>
        /// true si las teclas correspondiente son ingresadas
        /// </returns>
        protected override bool ProcessCmdKey(ref Message msg, Keys keyData)
        {
            EventArgs eve = new EventArgs();
            object sender = new object();
            switch (keyData)
            {
                case Keys.Control | Keys.P:
                    if (btn_imprimir.Enabled == true)
                    {
                        this.Btn_imprimir_Click(sender, eve);
                        return true;
                    }

                    break;

                case Keys.Escape:

                    if (btn_salir.Enabled == true)
                    {
                        this.Btn_salir_Click(sender, eve);
                        return true;
                    }

                    break;
            }

            return base.ProcessCmdKey(ref msg, keyData);
        }

        #endregion

        #region VISUALIZACION

        private void CargarMeses()
        {
            List<MesesDataSource> meses = new List<MesesDataSource>();
            List<MesesDataSource> meses2 = new List<MesesDataSource>();
            string[] mes1 = CultureInfo.CurrentCulture.DateTimeFormat.MonthNames;
            for (int i = 0; i <= 11; i++)
            {
                MesesDataSource mes = new MesesDataSource();
                mes.NumeroMes = Convert.ToString(i + 1);
                mes.NombreMes = Convert.ToString(i + 1) + " - " + mes1[i].ToUpper();
                meses.Add(mes);
                meses2.Add(mes);
            }
            if (this.tipoba == 1)
            {
                cbx_mesmes.DataSource = meses;
                cbx_mesmes.ValueMember = "NumeroMes";
                cbx_mesmes.DisplayMember = "NombreMes";
                cbx_mesmes.SelectedIndex = DateTime.Now.Month - 1;
            }
            else if (this.tipoba == 3)
            {
                cbx_mesinv.DataSource = meses;
                cbx_mesinv.ValueMember = "NumeroMes";
                cbx_mesinv.DisplayMember = "NombreMes";
                cbx_mesinv.SelectedIndex = DateTime.Now.Month - 1;
            }
        }

        private void AutoCompletar()
        {
            CuentaDataSource cuenta = new CuentaDataSource();
            AutoCompleteStringCollection cuentas = new AutoCompleteStringCollection();
            try
            {
                var items = this.negocioCuenta.CargarCuenta();

                foreach (var item in items)
                {
                    cuentas.Add(item.Cuenta);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("SE PRESENTO UN ERROR." + ex.Message, "ERROR");
            }
            if (this.tipoba == 1)
            {
                txt_cuentaini.AutoCompleteCustomSource = cuentas;
                txt_cuentafin.AutoCompleteCustomSource = cuentas;
            }
            else if (this.tipoba == 3)
            {
                txt_cuentaininv.AutoCompleteCustomSource = cuentas;
                txt_cuentafininv.AutoCompleteCustomSource = cuentas;
            }
        }

        private void DeshabilitarMes()
        {
            cbx_mesmes.Enabled = false;
            txt_cuentaini.Enabled = false;
            txt_cuentafin.Enabled = false;
            dt_fechames.Enabled = false;
            check_encabe.Enabled = false;
            check_encabe.Enabled = false;
            cbx_mesmes.SelectedIndex = DateTime.Now.Month - 1;
            txt_cuentaini.Clear();
            txt_cuentafin.Clear();
            dt_fechames.Value = DateTime.Now;
            check_encabe.Checked = true;
            check_terceros.Checked = false;
        }

        private void HabilitarMes()
        {
            cbx_mesmes.Enabled = true;
            txt_cuentaini.Enabled = true;
            txt_cuentafin.Enabled = true;
            dt_fechames.Enabled = true;
            check_encabe.Enabled = true;
            check_terceros.Enabled = true;
            cbx_mesmes.Focus();
        }

        private void ValidarTipo(int tipo)
        {
            if (tipo == 1)
            {
                panel_balanmes.Visible = true;
                this.Text = "IMPRESIÓN BALANCE DE PRUEBA DE UN MES";
                this.AutoCompletar();
            }
            if (tipo == 2)
            {
                panel_anual.Visible = true;
                this.Size = new Size(451, 147);
                this.Text = "IMPRESIÓN BALANCE DE PRUEBA ANUAL";
            }

            if (tipo == 3)
            {
                panel_invbalance.Visible = true;
                this.Text = "IMPRESIÓN INVENTARIOS Y BALANCES";
                this.AutoCompletar();
            }
        }

        /*private void DeshabilitarResumido()
        {
            cbx_resumido.Enabled = false;
            dtt_fecha.Enabled = false;
            check_encabe.Enabled = false;
            cbx_resumido.SelectedIndex = DateTime.Now.Month - 1;
            dtt_fecha.Value = DateTime.Now;
            check_encabe.Checked = true;
        }

        private void HabilitarResumido()
        {
            cbx_resumido.Enabled = true;
            dtt_fecha.Enabled = true;
            check_encabe.Enabled = true;
            cbx_resumido.Focus();
        }*/

        #endregion

        #region BOTONES

        private void Btn_imprimir_Click(object sender, EventArgs e)
        {
            List<AsientoDataSourceShow> asientolibrodiario = new List<AsientoDataSourceShow>();
            /* if (this.ValidarCampos())
             {
                 if (this.tipoba == 1)
                 {
                     try
                     {
                         asientolibrodiario = this.negocioAsiento.CargarInformeLibroDiario(int.Parse(cbx_mesdesde.SelectedValue.ToString()), int.Parse(cbx_meshasta.SelectedValue.ToString()), txt_compro.Text, txt_docin.Text, txt_cuentaini.Text, Program.compa);
                     }
                     catch (Exception ex)
                     {
                         MessageBox.Show("SE PRESENTO UN ERROR : " + ex.Message, "ERROR", MessageBoxButtons.OK);
                     }
                     Form_ReporteAsiento frm = new Form_ReporteAsiento(this, "librodiario", asientolibrodiario, dtt_fecha.Value.ToShortDateString(), check_encabe.Checked);
                     frm.MdiParent = this.MdiParent;
                     frm.Show();
                     this.DeshabilitarDetallado();
                 }
                 else
                 {
                     try
                     {
                         string aniotrabajo = this.negocioParametro.AnioTrabajo();
                         asientolibrodiario = this.negocioAsiento.CargarInformeLibroResumido(int.Parse(cbx_resumido.SelectedValue.ToString()), aniotrabajo, Program.compa);
                     }
                     catch (Exception ex)
                     {
                         MessageBox.Show("SE PRESENTO UN ERROR : " + ex.Message, "ERROR", MessageBoxButtons.OK);
                     }
                     Form_ReporteAsiento frm = new Form_ReporteAsiento(this, "libroresumido", asientolibrodiario, dtt_fecha.Value.ToShortDateString(), check_encabe.Checked);
                     frm.MdiParent = this.MdiParent;
                     frm.Show();
                     this.DeshabilitarResumido();
                 }
             }*/
        }

        private void btn_cancelar_Click(object sender, EventArgs e)
        {
            DialogResult result = MessageBox.Show("ESTA SEGURO QUE DESEA CANCELAR?", "CANCELAR", MessageBoxButtons.YesNo);
            if (result == DialogResult.Yes)
            {
                if (this.tipoba == 1)
                {
                    this.DeshabilitarMes();
                    this.HabilitarMes();
                }
                else if (this.tipoba == 2)
                {
                    /*this.DeshabilitarResumido();
                    this.HabilitarResumido();*/
                }
            }
        }

        private void Btn_salir_Click(object sender, EventArgs e)
        {
            DialogResult result = MessageBox.Show("ESTA SEGURO QUE DESEA SALIR?", "SALIR", MessageBoxButtons.YesNo);
            if (result == DialogResult.Yes)
            {
                this.usrClose = true;
                this.Close();
            }
        }

        #endregion

        #region CERRAR FORMULARIO

        private void Frm_LibroDiario_FormClosing(object sender, FormClosingEventArgs e)
        {
            if (!this.usrClose)
            {
                DialogResult result = MessageBox.Show("ESTA SEGURO QUE DESEA SALIR?", "SALIR", MessageBoxButtons.YesNo);
                if (result == DialogResult.No)
                {
                    e.Cancel = true;
                }
            }
        }

        #endregion

        #region VALIDACIONES

        private bool ValidarCampos()
        {
            if (this.tipoba == 1)
            {
                if (!string.Empty.Equals(txt_cuentaini.Text) && !string.Empty.Equals(txt_cuentafin.Text))
                {
                    bool val = false;
                    try
                    {
                       // val = this.negocioAsiento.TienenMovimientoCuentas(int.Parse(cbx_mesmes.SelectedValue.ToString()), txt_cuentaini.Text, txt_cuentafin.Text, Program.compa);
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show("SE PRESENTO UN ERROR" + ex.Message, "ERROR", MessageBoxButtons.OK);
                    }
                    if (val)
                    {
                        return true;
                    }
                    else
                    {
                        MessageBox.Show("NO EXISTEN MOVIMIENTOS", "ERROR", MessageBoxButtons.OK);
                        return false;
                    }
                }
                else
                {
                    MessageBox.Show("POR FAVOR INGRESE TODOS LOS CAMPOS", "ERROR", MessageBoxButtons.OK);
                    return false;
                }
            }
            else
            {
                bool val = false;
                try
                {
                    // val = this.negocioAsiento.TienenMovimientoMes(int.Parse(cbx_resumido.SelectedValue.ToString()), Program.compa);
                }
                catch (Exception ex)
                {
                    MessageBox.Show("SE PRESENTO UN ERROR" + ex.Message, "ERROR", MessageBoxButtons.OK);
                }

                if (val)
                {
                    return true;
                }
                else
                {
                    MessageBox.Show("NO EXISTEN MOVIMIENTOS", "ERROR", MessageBoxButtons.OK);
                    return false;
                }
            }
        }

        private void EnterTab_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Enter)
            {
                e.Handled = true;
                SendKeys.Send("{TAB}");
            }
        }

        private void EnterValidacionAsteris_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar != (char)Keys.Enter)
            {
                e.Handled = this.funtions.ValidacionNumeroAsterisco(e).Handled;
            }
        }

       private void Txtcuenta_KeyUp(object sender, KeyEventArgs e)
        {
            TextBox tb = (TextBox)sender;
            if (e.KeyCode != Keys.Enter && e.KeyCode != Keys.Tab)
            {
                this.validaotrascuentas = 0;
            }
            if (!"CUENTA NO EXISTENTE".Equals(this.GetNextControl((Control)sender, true).Text) || this.validaotrascuentas == 0)
            {
                int tamanio = tb.Text.Length;
                if (!tb.Text.Equals(string.Empty) && (tamanio != 3 && tamanio != 5 && tamanio != 7 && tamanio != 11) && !tb.Text.Contains("**"))
                {
                    try
                    {
                        this.GetNextControl((Control)sender, true).Text = this.negocioCuenta.DevolverNombre(tb.Text);
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(ex.Message, "ERROR", MessageBoxButtons.OK);
                    }
                }
                else
                {
                    this.GetNextControl((Control)sender, true).Text = string.Empty;
                }
            }
        }

        private void Txt_Cuenta_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                e.Handled = false;
                SendKeys.Send("{TAB}");
            }
        }

        private void Txtcuentaini_Leave(object sender, EventArgs e)
        {
            TextBox tb = (TextBox)sender;
            if (!string.Empty.Equals(tb.Text) || !tb.Text.Contains("**"))
            {
                string mensaje = this.funtions.ValidarCuentaExista(tb.Text);

                if (!string.Empty.Equals(mensaje))
                {
                    this.GetNextControl((Control)sender, true).Text = mensaje;
                    this.validaotrascuentas++;
                    tb.Focus();
                }
            }
            else if (tb.Text.Contains("**"))
            {
                tb.Text = "**";
                txt_cuentafin.Text = "**";
                txt_cuentafin.Enabled = false;
            }
            else
            {
                tb.Focus();
            }
        }

        private void Txtcuentafin_Leave(object sender, EventArgs e)
        {
            TextBox tb = (TextBox)sender;
            if (!string.Empty.Equals(tb.Text) || !tb.Text.Contains("**"))
            {
                string mensaje = this.funtions.ValidarCuentaExista(tb.Text);

                if (!string.Empty.Equals(mensaje))
                {
                    this.GetNextControl((Control)sender, true).Text = mensaje;
                    this.validaotrascuentas++;
                    tb.Focus();
                }
            }
            else if (tb.Text.Contains("**"))
            {
                tb.Text = "**";
            }
            else
            {
                tb.Focus();
            }
        }

        #endregion
    }
}
