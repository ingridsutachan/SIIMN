// -----------------------------------------------------------------------
// <copyright file="formatos.cs" company="">
// TODO: Update copyright text.
// </copyright>
// -----------------------------------------------------------------------

namespace Negocios.Contable
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using Datos.Contable;
    using Entities.Types;
    using Entities;

    /// <summary>
    /// TODO: Update summary.
    /// </summary>
    public class formatosn
    {
        private formatosc persistencia;

        public formatosn()
        {
            this.persistencia = new formatosc();
        }

        public bool GuardarFormato(FormatoDataSource formato, string encabezado)
        {
            formatosbpyg forma = new formatosbpyg();
            forma.tipoformato = formato.TipoFormato;
            forma.nombref = formato.Nombre;
            forma.clasemayor = formato.ClaseCuenta;
            forma.linea = formato.Linea;
            forma.cuentaini = formato.CuentaInicial;
            forma.cuentafin = formato.CuentaFinal;
            try
            {
                return this.persistencia.Guardarformato(forma, encabezado);
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public bool ExisteFormato(FormatoDataSource formato)
        {
            formatosbpyg forma = new formatosbpyg();
            forma.tipoformato = formato.TipoFormato;
            forma.nombref = formato.Nombre;
            forma.clasemayor = formato.ClaseCuenta;
            forma.linea = formato.Linea;
            forma.cuentaini = formato.CuentaInicial;
            forma.cuentafin = formato.CuentaFinal;
            try
            {
                return this.persistencia.ExisteFormato(forma);
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public FormatoDataSource DevolverFormato(FormatoDataSource format)
        {
            FormatoDataSource formato = new FormatoDataSource();
            formatosbpyg form = new formatosbpyg();
            form.tipoformato = format.TipoFormato;
            form.clasemayor = format.ClaseCuenta;
            form.linea = format.Linea;
            try
            {
                var items = this.persistencia.DevolverFormato(form);
                if (items != null)
                {
                    formato.TipoFormato = items.tipoformato;
                    formato.ClaseCuenta = items.clasemayor;
                    formato.Linea = items.linea;
                    formato.Nombre = items.nombref;
                    formato.CuentaInicial = items.cuentaini;
                    formato.CuentaFinal = items.cuentafin;
                }
                else
                {
                    formato = null;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return formato;
        }

        public string DevolverEncabezado(int tipoencabezado)
        {
            try
            {
                return this.persistencia.DevolverEncabezado(tipoencabezado);
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public bool ActualizarFormato(FormatoDataSource formato, string encabezado)
        {
            formatosbpyg forma = new formatosbpyg();
            forma.tipoformato = formato.TipoFormato;
            forma.nombref = formato.Nombre;
            forma.clasemayor = formato.ClaseCuenta;
            forma.linea = formato.Linea;
            forma.cuentaini = formato.CuentaInicial;
            forma.cuentafin = formato.CuentaFinal;
            try
            {
                return this.persistencia.ActualizarFormato(forma, encabezado);
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public List<FormatoDataSource> Busqueda(string tipo, string buscar)
        {
            List<FormatoDataSource> formato = new List<FormatoDataSource>();
            try
            {
                var items = this.persistencia.Busqueda(tipo, buscar);
                if (items != null)
                {
                    foreach (var item in items)
                    {
                        FormatoDataSource forma = new FormatoDataSource();
                        forma.TipoFormato = item.tipoformato;
                        forma.ClaseCuenta = item.clasemayor;
                        forma.Linea = item.linea;
                        forma.CuentaInicial = item.cuentaini;
                        forma.CuentaFinal = item.cuentafin;
                        formato.Add(forma);
                    }
                }
                else
                {
                   /* CentroDataSourceShow centr = new CentroDataSourceShow();
                    centr.Codcentro = null;
                    centr.Nombrecentro = null;
                    formato.Add(centr);*/
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return formato;
        }
    }
}
