using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using Negocios.Contable;
using Entities.Types;

namespace App.Forms.Contable
{
    public partial class Form_Actualizar : Form
    {
        private asientosn NegocioAsiento;

        private Comprobantesn negocioComprobante;

        public int tipoact;

        public Form_Actualizar(int tipo)
        {
            this.NegocioAsiento = new asientosn();
            this.negocioComprobante = new Comprobantesn();
            this.InitializeComponent();
            tipoact = tipo;
            this.ValidarTipo(tipoact);
        }

        private void ValidarTipo(int tipo)
        {
                      if (tipo == 1)
            {
                panel_acttodos.Visible = true;
                dt_desde.Focus();
            }
            if (tipo == 2)
            {
                panel_actuno.Visible = true;
                this.CargarComprobantes();
                cbx_comprobante.Focus();
            }

        }

        private void CargarComprobantes()
        {
            List<ComprobantesDataSource> comprob = new List<ComprobantesDataSource>();
            try
            {
                comprob = this.negocioComprobante.CargarDatos();
            }
            catch (Exception ex)
            {
                MessageBox.Show("SE PRESENTO UN ERROR." + ex.Message, "ERROR");
            }

            foreach (ComprobantesDataSource item in comprob)
            {
                item.Descricompro = Convert.ToString(item.Codigo) + "-" + item.Descricompro;
            }

            cbx_comprobante.DataSource = comprob;
            cbx_comprobante.ValueMember = "Codigo";
            cbx_comprobante.DisplayMember = "Descricompro";
        }

        private void Btn_actualizar_Click(object sender, EventArgs e)
        {
            if (this.ValidarActualizar())
            {
                backgroundWorker1.RunWorkerAsync();
                if (this.tipoact == 1)
                {
                    int cantasient = this.NegocioAsiento.ActualizarTodosAsientos(dt_desde.Value, dt_hasta.Value);
                    if (cantasient > 0)
                    {
                        //timer_pg.Stop();
                      //  timer_pg.Enabled = false;
                      MessageBox.Show(cantasient + "ASIENTOS HAN SIDO ACTUALIZADOS", "ACTUALIZAR ASIENTOS", MessageBoxButtons.OK);
                    }
                    else
                    {
                        MessageBox.Show("NINGUN ASIENTO HA SIDO ACTUALIZADO", "ACTUALIZAR ASIENTOS", MessageBoxButtons.OK);
                    }

                }
                else
                {
                    bool existe = this.NegocioAsiento.ExisteAsiento(txt_numeroasiento.Text, int.Parse(cbx_comprobante.SelectedValue.ToString()));
                    if (existe)
                    {
                        bool actualiza = this.NegocioAsiento.ActualizarUnAsiento(int.Parse(cbx_comprobante.SelectedValue.ToString()), txt_numeroasiento.Text);
                        if (actualiza)
                        {
                            MessageBox.Show("ASIENTO HA SIDO ACTUALIZADO", "ACTUALIZAR ASIENTOS", MessageBoxButtons.OK);
                        }
                        else
                        {
                           MessageBox.Show("NINGUN ASIENTO HA SIDO ACTUALIZADO", "ACTUALIZAR ASIENTOS", MessageBoxButtons.OK);
                        }
                    }
                    else
                    {
                        MessageBox.Show("EL ASIENTO NO EXISTE", "ACTUALIZAR ASIENTO", MessageBoxButtons.OK);
                    }
                }
            }
        }

        private bool ValidarActualizar()
        {
            return true;
        }

        private void timer_pg_Tick(object sender, EventArgs e)
        {
           /* this.progressbarAct.Increment(1);
            porcentaje.Visible = true;
            porcentaje.Text = progressbarAct.Value.ToString()+"%";*/
      }

        private void backgroundWorker1_DoWork(object sender, DoWorkEventArgs e)
        {
            for (int i = 0; i <= 100; i++)
            {
                // Report progress to 'UI' thread
                backgroundWorker1.ReportProgress(i);
                // Simulate long task
                System.Threading.Thread.Sleep(100);
            }
        }

        private void backgroundWorker1_ProgressChanged(object sender, ProgressChangedEventArgs e)
        {
            progressbarAct.Value = e.ProgressPercentage;
            porcentaje.Text = e.ProgressPercentage.ToString();
            porcentaje.Visible = true;
        }

        private void backgroundWorker1_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {

        }
    }
}
